
firstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  0800a378  0800a378  0001a378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ac  0800a8ac  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b4  0800a8b4  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020208  2**0
                  CONTENTS
 10 .bss          000002b4  20000208  20000208  00020208  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  200004bc  00020208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b33  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000362d  00000000  00000000  00038d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f68  00000000  00000000  0003d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024637  00000000  00000000  0003e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f0c  00000000  00000000  00062a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf020  00000000  00000000  0007a933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149953  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059d4  00000000  00000000  001499a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a35c 	.word	0x0800a35c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800a35c 	.word	0x0800a35c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <at24c02_write_one_byte>:
#include "gpio.h"
#include <stdio.h>

/*at24c02写一个字节*/
void at24c02_write_one_byte(uint16_t addr, uint8_t data)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	717b      	strb	r3, [r7, #5]
	//1、发送其实信号
	IIC_Start();
 8000ffc:	f000 f96e 	bl	80012dc <IIC_Start>
	//2、发送通信地址（写操作地址）
	IIC_Send_Byte(0xA0);
 8001000:	20a0      	movs	r0, #160	; 0xa0
 8001002:	f000 fa3d 	bl	8001480 <IIC_Send_Byte>
	//3、等待应答信号
	IIC_Wait_Ack();
 8001006:	f000 f9b5 	bl	8001374 <IIC_Wait_Ack>
	//4、发送内存地址
	IIC_Send_Byte(addr);
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa36 	bl	8001480 <IIC_Send_Byte>
	//5、等待应答信号
	IIC_Wait_Ack();
 8001014:	f000 f9ae 	bl	8001374 <IIC_Wait_Ack>
	//6、发送写入数据
	IIC_Send_Byte(data);
 8001018:	797b      	ldrb	r3, [r7, #5]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fa30 	bl	8001480 <IIC_Send_Byte>
	//7、等待应答信号
	IIC_Wait_Ack();
 8001020:	f000 f9a8 	bl	8001374 <IIC_Wait_Ack>
	//8、发送停止信号
	IIC_Stop();
 8001024:	f000 f980 	bl	8001328 <IIC_Stop>
	//9、等待EEPROM写入完成
	HAL_Delay(10);
 8001028:	200a      	movs	r0, #10
 800102a:	f001 f951 	bl	80022d0 <HAL_Delay>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <at24c02_read_one_byte>:

/*at24c02读取一个字节*/
uint8_t at24c02_read_one_byte(uint16_t addr)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	80fb      	strh	r3, [r7, #6]
	//1、发送起始信号
	IIC_Start();
 8001040:	f000 f94c 	bl	80012dc <IIC_Start>
	//2、发送通信地址（写操作地址）
	IIC_Send_Byte(0xA0);
 8001044:	20a0      	movs	r0, #160	; 0xa0
 8001046:	f000 fa1b 	bl	8001480 <IIC_Send_Byte>
	//3、等待应答信号
	IIC_Wait_Ack();
 800104a:	f000 f993 	bl	8001374 <IIC_Wait_Ack>
	//4、发送内存地址
	IIC_Send_Byte(addr);
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fa14 	bl	8001480 <IIC_Send_Byte>
	//5、等待应答信号
	IIC_Wait_Ack();
 8001058:	f000 f98c 	bl	8001374 <IIC_Wait_Ack>

	//6、发送起始信号
	IIC_Start();
 800105c:	f000 f93e 	bl	80012dc <IIC_Start>
	//7、发送通信地址（读操作地址）
	IIC_Send_Byte(0xA1);
 8001060:	20a1      	movs	r0, #161	; 0xa1
 8001062:	f000 fa0d 	bl	8001480 <IIC_Send_Byte>
	//8、等待应答信号
	IIC_Wait_Ack();
 8001066:	f000 f985 	bl	8001374 <IIC_Wait_Ack>
	//9、等待接收数据
	uint8_t rec = IIC_Read_Byte(0);
 800106a:	2000      	movs	r0, #0
 800106c:	f000 fa4e 	bl	800150c <IIC_Read_Byte>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
	//10、发送非应答信号（获取地址即可）

	//11、发送停止信号
	IIC_Stop();
 8001074:	f000 f958 	bl	8001328 <IIC_Stop>

	return rec;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <at24c02_write>:

/*at24c02写多个字节*/
void at24c02_write(uint16_t addr, uint8_t *pBuffer, uint16_t len)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	6039      	str	r1, [r7, #0]
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4613      	mov	r3, r2
 8001090:	80bb      	strh	r3, [r7, #4]
	while(len--)
 8001092:	e00c      	b.n	80010ae <at24c02_write+0x2c>
	{
		at24c02_write_one_byte(addr, *pBuffer);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	781a      	ldrb	r2, [r3, #0]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ffa5 	bl	8000fec <at24c02_write_one_byte>
		addr++;
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	3301      	adds	r3, #1
 80010a6:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	603b      	str	r3, [r7, #0]
	while(len--)
 80010ae:	88bb      	ldrh	r3, [r7, #4]
 80010b0:	1e5a      	subs	r2, r3, #1
 80010b2:	80ba      	strh	r2, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1ed      	bne.n	8001094 <at24c02_write+0x12>
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <at24c02_read>:
/*at24c02读取多个字节*/
void at24c02_read(uint16_t addr, uint8_t *pBuffer, uint16_t len)
{
 80010c2:	b590      	push	{r4, r7, lr}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	6039      	str	r1, [r7, #0]
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	4613      	mov	r3, r2
 80010d0:	80bb      	strh	r3, [r7, #4]
	while(len)
 80010d2:	e00d      	b.n	80010f0 <at24c02_read+0x2e>
	{
		*pBuffer++= at24c02_read_one_byte(addr++);
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	80fa      	strh	r2, [r7, #6]
 80010da:	683c      	ldr	r4, [r7, #0]
 80010dc:	1c62      	adds	r2, r4, #1
 80010de:	603a      	str	r2, [r7, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffa8 	bl	8001036 <at24c02_read_one_byte>
 80010e6:	4603      	mov	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
		len--;
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	80bb      	strh	r3, [r7, #4]
	while(len)
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1ee      	bne.n	80010d4 <at24c02_read+0x12>
	}
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}

08001100 <USR_EXTI0_Callback>:
		key_up = 1;
	return 0;
}

void USR_EXTI0_Callback(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin))
 8001104:	2101      	movs	r1, #1
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <USR_EXTI0_Callback+0x3c>)
 8001108:	f001 ffb6 	bl	8003078 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d011      	beq.n	8001136 <USR_EXTI0_Callback+0x36>
	{
		norflash_Write_Page(&SPI_SendBuffer, 0x123456, SPI_SIZE);
 8001112:	2211      	movs	r2, #17
 8001114:	490a      	ldr	r1, [pc, #40]	; (8001140 <USR_EXTI0_Callback+0x40>)
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <USR_EXTI0_Callback+0x44>)
 8001118:	f000 fae2 	bl	80016e0 <norflash_Write_Page>
		printf("SPI write data \r\n");
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <USR_EXTI0_Callback+0x48>)
 800111e:	f005 fb6d 	bl	80067fc <puts>
		at24c02_write(0, &IIC_SendBuffer, IIC_SIZE);
 8001122:	2211      	movs	r2, #17
 8001124:	4909      	ldr	r1, [pc, #36]	; (800114c <USR_EXTI0_Callback+0x4c>)
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffab 	bl	8001082 <at24c02_write>
		printf("IIC write data \r\n");
 800112c:	4808      	ldr	r0, [pc, #32]	; (8001150 <USR_EXTI0_Callback+0x50>)
 800112e:	f005 fb65 	bl	80067fc <puts>
		led0_switch();
 8001132:	f000 f83b 	bl	80011ac <led0_switch>
	}
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40020000 	.word	0x40020000
 8001140:	00123456 	.word	0x00123456
 8001144:	20000014 	.word	0x20000014
 8001148:	0800a378 	.word	0x0800a378
 800114c:	20000000 	.word	0x20000000
 8001150:	0800a38c 	.word	0x0800a38c

08001154 <USR_EXTI4_Callback>:

void USR_EXTI4_Callback(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin))
 8001158:	2110      	movs	r1, #16
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <USR_EXTI4_Callback+0x40>)
 800115c:	f001 ff8c 	bl	8003078 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d013      	beq.n	800118e <USR_EXTI4_Callback+0x3a>
	{
		norflash_Read(&SPI_RevBuffer, 0x123456, SPI_SIZE);
 8001166:	2211      	movs	r2, #17
 8001168:	490b      	ldr	r1, [pc, #44]	; (8001198 <USR_EXTI4_Callback+0x44>)
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <USR_EXTI4_Callback+0x48>)
 800116c:	f000 fa10 	bl	8001590 <norflash_Read>
		printf("SPI read data : %s \r\n", SPI_RevBuffer);
 8001170:	490a      	ldr	r1, [pc, #40]	; (800119c <USR_EXTI4_Callback+0x48>)
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <USR_EXTI4_Callback+0x4c>)
 8001174:	f005 fabc 	bl	80066f0 <iprintf>
		at24c02_read(0, &IIC_RevBuffer, IIC_SIZE);
 8001178:	2211      	movs	r2, #17
 800117a:	490a      	ldr	r1, [pc, #40]	; (80011a4 <USR_EXTI4_Callback+0x50>)
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ffa0 	bl	80010c2 <at24c02_read>
		printf("IIC read data : %s \r\n", IIC_RevBuffer);
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <USR_EXTI4_Callback+0x50>)
 8001184:	4808      	ldr	r0, [pc, #32]	; (80011a8 <USR_EXTI4_Callback+0x54>)
 8001186:	f005 fab3 	bl	80066f0 <iprintf>
		led1_switch();
 800118a:	f000 f82b 	bl	80011e4 <led1_switch>
	}
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000
 8001198:	00123456 	.word	0x00123456
 800119c:	20000230 	.word	0x20000230
 80011a0:	0800a3a0 	.word	0x0800a3a0
 80011a4:	20000244 	.word	0x20000244
 80011a8:	0800a3b8 	.word	0x0800a3b8

080011ac <led0_switch>:

#include "led.h"
#include "main.h"

void led0_switch()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(LED0_GPIO_Port, LED0_Pin) == 0)
 80011b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <led0_switch+0x34>)
 80011b6:	f001 ff5f 	bl	8003078 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <led0_switch+0x22>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <led0_switch+0x34>)
 80011c8:	f001 ff6e 	bl	80030a8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
}
 80011cc:	e005      	b.n	80011da <led0_switch+0x2e>
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <led0_switch+0x34>)
 80011d6:	f001 ff67 	bl	80030a8 <HAL_GPIO_WritePin>
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40021400 	.word	0x40021400

080011e4 <led1_switch>:

void led1_switch()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) == 0)
 80011e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <led1_switch+0x34>)
 80011ee:	f001 ff43 	bl	8003078 <HAL_GPIO_ReadPin>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d106      	bne.n	8001206 <led1_switch+0x22>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <led1_switch+0x34>)
 8001200:	f001 ff52 	bl	80030a8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
}
 8001204:	e005      	b.n	8001212 <led1_switch+0x2e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <led1_switch+0x34>)
 800120e:	f001 ff4b 	bl	80030a8 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021400 	.word	0x40021400

0800121c <delay_us>:
#include "main.h"
#include "gpio.h"
#include <stdio.h>

void delay_us(uint32_t us)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	uint32_t Delay = us * 168/4;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	22a8      	movs	r2, #168	; 0xa8
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	60fb      	str	r3, [r7, #12]
	do
	{
		__NOP();
 8001230:	bf00      	nop
	}
	while (Delay --);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	60fa      	str	r2, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <delay_us+0x14>
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <SDA_IN>:


void SDA_IN(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct= {0};
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = IIC_SDA_Pin;
 8001260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001264:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126a:	2301      	movs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4619      	mov	r1, r3
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <SDA_IN+0x38>)
 8001278:	f001 fd62 	bl	8002d40 <HAL_GPIO_Init>
}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40020400 	.word	0x40020400

08001288 <SDA_OUT>:
void SDA_OUT(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = IIC_SDA_Pin;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001292:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <SDA_OUT+0x2c>)
 80012a6:	f001 fd4b 	bl	8002d40 <HAL_GPIO_Init>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020400 	.word	0x40020400

080012b8 <IIC_Init>:

void IIC_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	IIC_SDA_H;
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <IIC_Init+0x20>)
 80012c4:	f001 fef0 	bl	80030a8 <HAL_GPIO_WritePin>
	IIC_SCL_H;
 80012c8:	2201      	movs	r2, #1
 80012ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ce:	4802      	ldr	r0, [pc, #8]	; (80012d8 <IIC_Init+0x20>)
 80012d0:	f001 feea 	bl	80030a8 <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40020400 	.word	0x40020400

080012dc <IIC_Start>:

/*产生起始信号*/
void IIC_Start(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	SDA_OUT();
 80012e0:	f7ff ffd2 	bl	8001288 <SDA_OUT>
	IIC_SDA_H;
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ea:	480e      	ldr	r0, [pc, #56]	; (8001324 <IIC_Start+0x48>)
 80012ec:	f001 fedc 	bl	80030a8 <HAL_GPIO_WritePin>
	IIC_SCL_H;
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012f6:	480b      	ldr	r0, [pc, #44]	; (8001324 <IIC_Start+0x48>)
 80012f8:	f001 fed6 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(5);
 80012fc:	2005      	movs	r0, #5
 80012fe:	f7ff ff8d 	bl	800121c <delay_us>

	IIC_SDA_L;
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <IIC_Start+0x48>)
 800130a:	f001 fecd 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff ff84 	bl	800121c <delay_us>

	IIC_SCL_L;
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131a:	4802      	ldr	r0, [pc, #8]	; (8001324 <IIC_Start+0x48>)
 800131c:	f001 fec4 	bl	80030a8 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40020400 	.word	0x40020400

08001328 <IIC_Stop>:

/*产生停止信号*/
void IIC_Stop(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	SDA_OUT();
 800132c:	f7ff ffac 	bl	8001288 <SDA_OUT>
	IIC_SCL_L;
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <IIC_Stop+0x48>)
 8001338:	f001 feb6 	bl	80030a8 <HAL_GPIO_WritePin>
	IIC_SDA_L;
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <IIC_Stop+0x48>)
 8001344:	f001 feb0 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(4);
 8001348:	2004      	movs	r0, #4
 800134a:	f7ff ff67 	bl	800121c <delay_us>

	IIC_SCL_H;
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001354:	4806      	ldr	r0, [pc, #24]	; (8001370 <IIC_Stop+0x48>)
 8001356:	f001 fea7 	bl	80030a8 <HAL_GPIO_WritePin>
	IIC_SDA_H;
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <IIC_Stop+0x48>)
 8001362:	f001 fea1 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(4);
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff ff58 	bl	800121c <delay_us>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400

08001374 <IIC_Wait_Ack>:
/* 等待应答信号到来
 * 返回值：1，接收应答失败
 * 		0，接收应答成功
 * */
uint8_t IIC_Wait_Ack(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	uint8_t ucErrTime = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	71fb      	strb	r3, [r7, #7]
	SDA_IN();
 800137e:	f7ff ff65 	bl	800124c <SDA_IN>
	IIC_SDA_H;delay_us(1);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001388:	4816      	ldr	r0, [pc, #88]	; (80013e4 <IIC_Wait_Ack+0x70>)
 800138a:	f001 fe8d 	bl	80030a8 <HAL_GPIO_WritePin>
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff ff44 	bl	800121c <delay_us>
	IIC_SCL_H;delay_us(1);
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800139a:	4812      	ldr	r0, [pc, #72]	; (80013e4 <IIC_Wait_Ack+0x70>)
 800139c:	f001 fe84 	bl	80030a8 <HAL_GPIO_WritePin>
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff ff3b 	bl	800121c <delay_us>
	while(SDA_read)
 80013a6:	e009      	b.n	80013bc <IIC_Wait_Ack+0x48>
	{
		ucErrTime++;
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3301      	adds	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime > 250)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2bfa      	cmp	r3, #250	; 0xfa
 80013b2:	d903      	bls.n	80013bc <IIC_Wait_Ack+0x48>
		{
			IIC_Stop();
 80013b4:	f7ff ffb8 	bl	8001328 <IIC_Stop>
			return 1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00e      	b.n	80013da <IIC_Wait_Ack+0x66>
	while(SDA_read)
 80013bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c0:	4808      	ldr	r0, [pc, #32]	; (80013e4 <IIC_Wait_Ack+0x70>)
 80013c2:	f001 fe59 	bl	8003078 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ed      	bne.n	80013a8 <IIC_Wait_Ack+0x34>
		}
	}
	IIC_SCL_L;
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d2:	4804      	ldr	r0, [pc, #16]	; (80013e4 <IIC_Wait_Ack+0x70>)
 80013d4:	f001 fe68 	bl	80030a8 <HAL_GPIO_WritePin>
	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020400 	.word	0x40020400

080013e8 <IIC_Ack>:

/*产生应答信号*/
void IIC_Ack(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	IIC_SCL_L;
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <IIC_Ack+0x48>)
 80013f4:	f001 fe58 	bl	80030a8 <HAL_GPIO_WritePin>
	SDA_OUT();
 80013f8:	f7ff ff46 	bl	8001288 <SDA_OUT>
	IIC_SDA_L;
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <IIC_Ack+0x48>)
 8001404:	f001 fe50 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(2);
 8001408:	2002      	movs	r0, #2
 800140a:	f7ff ff07 	bl	800121c <delay_us>

	IIC_SCL_H;
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <IIC_Ack+0x48>)
 8001416:	f001 fe47 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(2);
 800141a:	2002      	movs	r0, #2
 800141c:	f7ff fefe 	bl	800121c <delay_us>

	IIC_SCL_L;
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <IIC_Ack+0x48>)
 8001428:	f001 fe3e 	bl	80030a8 <HAL_GPIO_WritePin>
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020400 	.word	0x40020400

08001434 <IIC_NAck>:

/*产生非应答信号*/
void IIC_NAck(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	IIC_SCL_L;
 8001438:	2200      	movs	r2, #0
 800143a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800143e:	480f      	ldr	r0, [pc, #60]	; (800147c <IIC_NAck+0x48>)
 8001440:	f001 fe32 	bl	80030a8 <HAL_GPIO_WritePin>
	SDA_OUT();
 8001444:	f7ff ff20 	bl	8001288 <SDA_OUT>
	IIC_SDA_H;
 8001448:	2201      	movs	r2, #1
 800144a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144e:	480b      	ldr	r0, [pc, #44]	; (800147c <IIC_NAck+0x48>)
 8001450:	f001 fe2a 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(2);
 8001454:	2002      	movs	r0, #2
 8001456:	f7ff fee1 	bl	800121c <delay_us>

	IIC_SCL_H;
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001460:	4806      	ldr	r0, [pc, #24]	; (800147c <IIC_NAck+0x48>)
 8001462:	f001 fe21 	bl	80030a8 <HAL_GPIO_WritePin>
	delay_us(2);
 8001466:	2002      	movs	r0, #2
 8001468:	f7ff fed8 	bl	800121c <delay_us>

	IIC_SCL_L;
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	4802      	ldr	r0, [pc, #8]	; (800147c <IIC_NAck+0x48>)
 8001474:	f001 fe18 	bl	80030a8 <HAL_GPIO_WritePin>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020400 	.word	0x40020400

08001480 <IIC_Send_Byte>:

/*发送一个字节*/
void IIC_Send_Byte(uint8_t txd)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	uint8_t t;
	SDA_OUT();
 800148a:	f7ff fefd 	bl	8001288 <SDA_OUT>
	IIC_SCL_L;
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	481c      	ldr	r0, [pc, #112]	; (8001508 <IIC_Send_Byte+0x88>)
 8001496:	f001 fe07 	bl	80030a8 <HAL_GPIO_WritePin>
	for(t = 0; t < 8; t++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e02b      	b.n	80014f8 <IIC_Send_Byte+0x78>
	{
		if((txd&0x80) >> 7)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	da06      	bge.n	80014b6 <IIC_Send_Byte+0x36>
			IIC_SDA_H;
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ae:	4816      	ldr	r0, [pc, #88]	; (8001508 <IIC_Send_Byte+0x88>)
 80014b0:	f001 fdfa 	bl	80030a8 <HAL_GPIO_WritePin>
 80014b4:	e005      	b.n	80014c2 <IIC_Send_Byte+0x42>
		else
			IIC_SDA_L;
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014bc:	4812      	ldr	r0, [pc, #72]	; (8001508 <IIC_Send_Byte+0x88>)
 80014be:	f001 fdf3 	bl	80030a8 <HAL_GPIO_WritePin>
		txd<<=1;
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	71fb      	strb	r3, [r7, #7]
		delay_us(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fea7 	bl	800121c <delay_us>
		IIC_SCL_H;
 80014ce:	2201      	movs	r2, #1
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <IIC_Send_Byte+0x88>)
 80014d6:	f001 fde7 	bl	80030a8 <HAL_GPIO_WritePin>
		delay_us(2);
 80014da:	2002      	movs	r0, #2
 80014dc:	f7ff fe9e 	bl	800121c <delay_us>
		IIC_SCL_L;
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <IIC_Send_Byte+0x88>)
 80014e8:	f001 fdde 	bl	80030a8 <HAL_GPIO_WritePin>
		delay_us(2);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff fe95 	bl	800121c <delay_us>
	for(t = 0; t < 8; t++)
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	3301      	adds	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	d9d0      	bls.n	80014a0 <IIC_Send_Byte+0x20>
	}
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020400 	.word	0x40020400

0800150c <IIC_Read_Byte>:

/*读取一个字节*/
uint8_t IIC_Read_Byte(uint8_t ack)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	uint8_t receive = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
	SDA_IN();
 800151a:	f7ff fe97 	bl	800124c <SDA_IN>
	for(int i = 0; i < 8; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	e022      	b.n	800156a <IIC_Read_Byte+0x5e>
	{
		IIC_SCL_L;
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <IIC_Read_Byte+0x80>)
 800152c:	f001 fdbc 	bl	80030a8 <HAL_GPIO_WritePin>
		delay_us(2);
 8001530:	2002      	movs	r0, #2
 8001532:	f7ff fe73 	bl	800121c <delay_us>
		IIC_SCL_H;
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153c:	4813      	ldr	r0, [pc, #76]	; (800158c <IIC_Read_Byte+0x80>)
 800153e:	f001 fdb3 	bl	80030a8 <HAL_GPIO_WritePin>
		receive<<=1;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
		if(SDA_read)receive++;
 8001548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <IIC_Read_Byte+0x80>)
 800154e:	f001 fd93 	bl	8003078 <HAL_GPIO_ReadPin>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <IIC_Read_Byte+0x52>
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	3301      	adds	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
		delay_us(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff fe5c 	bl	800121c <delay_us>
	for(int i = 0; i < 8; i++)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	3301      	adds	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b07      	cmp	r3, #7
 800156e:	ddd9      	ble.n	8001524 <IIC_Read_Byte+0x18>
	}
	if(!ack)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <IIC_Read_Byte+0x70>
		IIC_NAck();
 8001576:	f7ff ff5d 	bl	8001434 <IIC_NAck>
 800157a:	e001      	b.n	8001580 <IIC_Read_Byte+0x74>
	else
		IIC_Ack();
 800157c:	f7ff ff34 	bl	80013e8 <IIC_Ack>

	return receive;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40020400 	.word	0x40020400

08001590 <norflash_Read>:
#include "gpio.h"
#include "spi.h"
#include <stdio.h>

void norflash_Read(uint8_t* pBuffer, uint32_t readAddr, uint16_t len)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	4613      	mov	r3, r2
 800159c:	80fb      	strh	r3, [r7, #6]
	SPI1_CS_L;
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a4:	4819      	ldr	r0, [pc, #100]	; (800160c <norflash_Read+0x7c>)
 80015a6:	f001 fd7f 	bl	80030a8 <HAL_GPIO_WritePin>
	//1、发送读命令
	SPI1_ReadWriteByte(0x03);
 80015aa:	2003      	movs	r0, #3
 80015ac:	f000 fb1a 	bl	8001be4 <SPI1_ReadWriteByte>

	//2、发送地址
	SPI1_ReadWriteByte(readAddr >> 16);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	0c1b      	lsrs	r3, r3, #16
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 fb14 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(readAddr >> 8);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	0a1b      	lsrs	r3, r3, #8
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fb0e 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(readAddr);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fb09 	bl	8001be4 <SPI1_ReadWriteByte>

	//3、读取数据
	for(int i = 0; i < len; i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	e00a      	b.n	80015ee <norflash_Read+0x5e>
	{
		pBuffer[i] = SPI1_ReadWriteByte(0xff);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	18d4      	adds	r4, r2, r3
 80015de:	20ff      	movs	r0, #255	; 0xff
 80015e0:	f000 fb00 	bl	8001be4 <SPI1_ReadWriteByte>
 80015e4:	4603      	mov	r3, r0
 80015e6:	7023      	strb	r3, [r4, #0]
	for(int i = 0; i < len; i++)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	dbf0      	blt.n	80015d8 <norflash_Read+0x48>
	}
	SPI1_CS_H;
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <norflash_Read+0x7c>)
 80015fe:	f001 fd53 	bl	80030a8 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop
 800160c:	40020400 	.word	0x40020400

08001610 <norflash_Wait_Busy>:

uint8_t norflash_Wait_Busy(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
	SPI1_CS_L;
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <norflash_Wait_Busy+0x38>)
 800161e:	f001 fd43 	bl	80030a8 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x05);
 8001622:	2005      	movs	r0, #5
 8001624:	f000 fade 	bl	8001be4 <SPI1_ReadWriteByte>
	uint8_t busy_flag = SPI1_ReadWriteByte(0xff);
 8001628:	20ff      	movs	r0, #255	; 0xff
 800162a:	f000 fadb 	bl	8001be4 <SPI1_ReadWriteByte>
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	SPI1_CS_H;
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <norflash_Wait_Busy+0x38>)
 800163a:	f001 fd35 	bl	80030a8 <HAL_GPIO_WritePin>

	return busy_flag;
 800163e:	79fb      	ldrb	r3, [r7, #7]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020400 	.word	0x40020400

0800164c <norflash_erase_sector>:

void norflash_erase_sector(uint32_t CleanDddr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	//1、写使能
	SPI1_CS_L;
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165a:	4820      	ldr	r0, [pc, #128]	; (80016dc <norflash_erase_sector+0x90>)
 800165c:	f001 fd24 	bl	80030a8 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x06);
 8001660:	2006      	movs	r0, #6
 8001662:	f000 fabf 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_CS_H;
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166c:	481b      	ldr	r0, [pc, #108]	; (80016dc <norflash_erase_sector+0x90>)
 800166e:	f001 fd1b 	bl	80030a8 <HAL_GPIO_WritePin>

	//2、等待空闲
	while(norflash_Wait_Busy()&0x01);
 8001672:	bf00      	nop
 8001674:	f7ff ffcc 	bl	8001610 <norflash_Wait_Busy>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f8      	bne.n	8001674 <norflash_erase_sector+0x28>

	//3、发送扇区擦除指令
	SPI1_CS_L;
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <norflash_erase_sector+0x90>)
 800168a:	f001 fd0d 	bl	80030a8 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x20);
 800168e:	2020      	movs	r0, #32
 8001690:	f000 faa8 	bl	8001be4 <SPI1_ReadWriteByte>

	//4、发送地址
	SPI1_ReadWriteByte(CleanDddr >> 16);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	b2db      	uxtb	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 faa2 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(CleanDddr >> 8);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fa9c 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(CleanDddr);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fa97 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_CS_H;
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <norflash_erase_sector+0x90>)
 80016be:	f001 fcf3 	bl	80030a8 <HAL_GPIO_WritePin>

	//5、等待空闲
	while(norflash_Wait_Busy()&0x01);
 80016c2:	bf00      	nop
 80016c4:	f7ff ffa4 	bl	8001610 <norflash_Wait_Busy>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f8      	bne.n	80016c4 <norflash_erase_sector+0x78>
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020400 	.word	0x40020400

080016e0 <norflash_Write_Page>:

void norflash_Write_Page(uint8_t* pBuffer, uint32_t writeAddr, uint16_t len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80fb      	strh	r3, [r7, #6]
	//1、擦除扇区
	norflash_erase_sector(writeAddr);
 80016ee:	68b8      	ldr	r0, [r7, #8]
 80016f0:	f7ff ffac 	bl	800164c <norflash_erase_sector>

	//2、写使能
	SPI1_CS_L;
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fa:	4822      	ldr	r0, [pc, #136]	; (8001784 <norflash_Write_Page+0xa4>)
 80016fc:	f001 fcd4 	bl	80030a8 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x06);
 8001700:	2006      	movs	r0, #6
 8001702:	f000 fa6f 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_CS_H;
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800170c:	481d      	ldr	r0, [pc, #116]	; (8001784 <norflash_Write_Page+0xa4>)
 800170e:	f001 fccb 	bl	80030a8 <HAL_GPIO_WritePin>

	//3、发送页写指令
	SPI1_CS_L;
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <norflash_Write_Page+0xa4>)
 800171a:	f001 fcc5 	bl	80030a8 <HAL_GPIO_WritePin>
	SPI1_ReadWriteByte(0x02);
 800171e:	2002      	movs	r0, #2
 8001720:	f000 fa60 	bl	8001be4 <SPI1_ReadWriteByte>

	//4、发送地址
	SPI1_ReadWriteByte(writeAddr >> 16);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	0c1b      	lsrs	r3, r3, #16
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fa5a 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(writeAddr >> 8);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b2db      	uxtb	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fa54 	bl	8001be4 <SPI1_ReadWriteByte>
	SPI1_ReadWriteByte(writeAddr);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fa4f 	bl	8001be4 <SPI1_ReadWriteByte>

	//5、要写入的数据
	for(int i = 0; i < len; i++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <norflash_Write_Page+0x80>
	{
		SPI1_ReadWriteByte(pBuffer[i]);
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fa45 	bl	8001be4 <SPI1_ReadWriteByte>
	for(int i = 0; i < len; i++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <norflash_Write_Page+0x6c>
	}

	//6、等待写入完成
	while(norflash_Wait_Busy()&0x01);
 8001768:	bf00      	nop
 800176a:	f7ff ff51 	bl	8001610 <norflash_Wait_Busy>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f8      	bne.n	800176a <norflash_Write_Page+0x8a>
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020400 	.word	0x40020400

08001788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_DMA_Init+0x3c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a0b      	ldr	r2, [pc, #44]	; (80017c4 <MX_DMA_Init+0x3c>)
 8001798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_DMA_Init+0x3c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2101      	movs	r1, #1
 80017ae:	203a      	movs	r0, #58	; 0x3a
 80017b0:	f000 fe8d 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017b4:	203a      	movs	r0, #58	; 0x3a
 80017b6:	f000 fea6 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08c      	sub	sp, #48	; 0x30
 80017cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
 80017e2:	4b58      	ldr	r3, [pc, #352]	; (8001944 <MX_GPIO_Init+0x17c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a57      	ldr	r2, [pc, #348]	; (8001944 <MX_GPIO_Init+0x17c>)
 80017e8:	f043 0310 	orr.w	r3, r3, #16
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b55      	ldr	r3, [pc, #340]	; (8001944 <MX_GPIO_Init+0x17c>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a50      	ldr	r2, [pc, #320]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <MX_GPIO_Init+0x17c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <MX_GPIO_Init+0x17c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a49      	ldr	r2, [pc, #292]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001820:	f043 0320 	orr.w	r3, r3, #32
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a42      	ldr	r2, [pc, #264]	; (8001944 <MX_GPIO_Init+0x17c>)
 800183c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a3b      	ldr	r2, [pc, #236]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b35      	ldr	r3, [pc, #212]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a34      	ldr	r2, [pc, #208]	; (8001944 <MX_GPIO_Init+0x17c>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <MX_GPIO_Init+0x17c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800188c:	482e      	ldr	r0, [pc, #184]	; (8001948 <MX_GPIO_Init+0x180>)
 800188e:	f001 fc0b 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	482c      	ldr	r0, [pc, #176]	; (800194c <MX_GPIO_Init+0x184>)
 800189a:	f001 fc05 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80018a4:	4829      	ldr	r0, [pc, #164]	; (800194c <MX_GPIO_Init+0x184>)
 80018a6:	f001 fbff 	bl	80030a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80018aa:	2310      	movs	r3, #16
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b4:	2302      	movs	r3, #2
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4824      	ldr	r0, [pc, #144]	; (8001950 <MX_GPIO_Init+0x188>)
 80018c0:	f001 fa3e 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 80018c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d2:	2302      	movs	r3, #2
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	481a      	ldr	r0, [pc, #104]	; (8001948 <MX_GPIO_Init+0x180>)
 80018de:	f001 fa2f 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ec:	2302      	movs	r3, #2
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <MX_GPIO_Init+0x18c>)
 80018f8:	f001 fa22 	bl	8002d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 80018fc:	f44f 4386 	mov.w	r3, #17152	; 0x4300
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190a:	2302      	movs	r3, #2
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_GPIO_Init+0x184>)
 8001916:	f001 fa13 	bl	8002d40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2102      	movs	r1, #2
 800191e:	2006      	movs	r0, #6
 8001920:	f000 fdd5 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001924:	2006      	movs	r0, #6
 8001926:	f000 fdee 	bl	8002506 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2102      	movs	r1, #2
 800192e:	200a      	movs	r0, #10
 8001930:	f000 fdcd 	bl	80024ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001934:	200a      	movs	r0, #10
 8001936:	f000 fde6 	bl	8002506 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3730      	adds	r7, #48	; 0x30
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40021400 	.word	0x40021400
 800194c:	40020400 	.word	0x40020400
 8001950:	40021000 	.word	0x40021000
 8001954:	40020000 	.word	0x40020000

08001958 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_IWDG_Init+0x2c>)
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <MX_IWDG_Init+0x30>)
 8001960:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <MX_IWDG_Init+0x2c>)
 8001964:	2204      	movs	r2, #4
 8001966:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2000;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_IWDG_Init+0x2c>)
 800196a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800196e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	; (8001984 <MX_IWDG_Init+0x2c>)
 8001972:	f001 fbd6 	bl	8003122 <HAL_IWDG_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800197c:	f000 f898 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000258 	.word	0x20000258
 8001988:	40003000 	.word	0x40003000

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f000 fc2c 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 f820 	bl	80019d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();				//�?要在USART_Init之前先初始化DMA_Init，原因是USART中有关于DMA的配置，要进行DMA的配置，�?要先在DMA_Init中开启时�?
 8001998:	f7ff fef6 	bl	8001788 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f7ff ff14 	bl	80017c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019a0:	f000 faec 	bl	8001f7c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80019a4:	f000 fa90 	bl	8001ec8 <MX_TIM14_Init>
  MX_DMA_Init();
 80019a8:	f7ff feee 	bl	8001788 <MX_DMA_Init>
  MX_SPI1_Init();
 80019ac:	f000 f886 	bl	8001abc <MX_SPI1_Init>
  MX_IWDG_Init();
 80019b0:	f7ff ffd2 	bl	8001958 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  IIC_Init();
 80019b4:	f7ff fc80 	bl	80012b8 <IIC_Init>
  printf("reset\r\n");
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <main+0x44>)
 80019ba:	f004 ff1f 	bl	80067fc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 80019be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019c2:	f000 fc85 	bl	80022d0 <HAL_Delay>
	  HAL_IWDG_Refresh(&hiwdg);			//独立看门狗时间约为4.4s
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <main+0x48>)
 80019c8:	f001 fbed 	bl	80031a6 <HAL_IWDG_Refresh>
	  HAL_Delay(500);
 80019cc:	e7f7      	b.n	80019be <main+0x32>
 80019ce:	bf00      	nop
 80019d0:	0800a3d0 	.word	0x0800a3d0
 80019d4:	20000258 	.word	0x20000258

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b094      	sub	sp, #80	; 0x50
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	2230      	movs	r2, #48	; 0x30
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f004 f800 	bl	80059ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <SystemClock_Config+0xd0>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <SystemClock_Config+0xd0>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <SystemClock_Config+0xd0>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <SystemClock_Config+0xd4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	; (8001aac <SystemClock_Config+0xd4>)
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <SystemClock_Config+0xd4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a34:	2309      	movs	r3, #9
 8001a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a42:	2302      	movs	r3, #2
 8001a44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a50:	23a8      	movs	r3, #168	; 0xa8
 8001a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a54:	2302      	movs	r3, #2
 8001a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fbb1 	bl	80031c8 <HAL_RCC_OscConfig>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a6c:	f000 f820 	bl	8001ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a70:	230f      	movs	r3, #15
 8001a72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a74:	2302      	movs	r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2105      	movs	r1, #5
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 fe12 	bl	80036b8 <HAL_RCC_ClockConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a9a:	f000 f809 	bl	8001ab0 <Error_Handler>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3750      	adds	r7, #80	; 0x50
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40007000 	.word	0x40007000

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab4:	b672      	cpsid	i
}
 8001ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <Error_Handler+0x8>
	...

08001abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ac2:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <MX_SPI1_Init+0x90>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001adc:	2202      	movs	r2, #2
 8001ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001af0:	2238      	movs	r2, #56	; 0x38
 8001af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b08:	220a      	movs	r2, #10
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b0c:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b0e:	f001 ffcf 	bl	8003ab0 <HAL_SPI_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b18:	f7ff ffca 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  HAL_SPI_Init(&hspi1);
 8001b1c:	480a      	ldr	r0, [pc, #40]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b1e:	f001 ffc7 	bl	8003ab0 <HAL_SPI_Init>
  __HAL_SPI_ENABLE(&hspi1);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_SPI1_Init+0x8c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b30:	601a      	str	r2, [r3, #0]
  SPI1_ReadWriteByte(0xff);
 8001b32:	20ff      	movs	r0, #255	; 0xff
 8001b34:	f000 f856 	bl	8001be4 <SPI1_ReadWriteByte>
  SPI1_CS_H;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_SPI1_Init+0x94>)
 8001b40:	f001 fab2 	bl	80030a8 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000264 	.word	0x20000264
 8001b4c:	40013000 	.word	0x40013000
 8001b50:	40020400 	.word	0x40020400

08001b54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_SPI_MspInit+0x84>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12b      	bne.n	8001bce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_SPI_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bae:	2338      	movs	r3, #56	; 0x38
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bbe:	2305      	movs	r3, #5
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_SPI_MspInit+0x8c>)
 8001bca:	f001 f8b9 	bl	8002d40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40013000 	.word	0x40013000
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020400 	.word	0x40020400

08001be4 <SPI1_ReadWriteByte>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t SPI1_ReadWriteByte(uint8_t TxData)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	uint8_t RxData;
	HAL_SPI_TransmitReceive(&hspi1, &TxData, &RxData, 1, 1000);
 8001bee:	f107 020f 	add.w	r2, r7, #15
 8001bf2:	1df9      	adds	r1, r7, #7
 8001bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <SPI1_ReadWriteByte+0x28>)
 8001bfe:	f001 ffe0 	bl	8003bc2 <HAL_SPI_TransmitReceive>
	return RxData;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000264 	.word	0x20000264

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c24:	6453      	str	r3, [r2, #68]	; 0x44
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	603b      	str	r3, [r7, #0]
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_MspInit+0x4c>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <NMI_Handler+0x4>

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 faf0 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f001 fa0f 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  USR_EXTI0_Callback();
 8001cbe:	f7ff fa1f 	bl	8001100 <USR_EXTI0_Callback>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cca:	2010      	movs	r0, #16
 8001ccc:	f001 fa06 	bl	80030dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  USR_EXTI4_Callback();
 8001cd0:	f7ff fa40 	bl	8001154 <USR_EXTI4_Callback>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <USART1_IRQHandler+0x14>)
 8001cde:	f002 fe0f 	bl	8004900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USR_USART1_DMA_Callback(&huart1);
 8001ce2:	4802      	ldr	r0, [pc, #8]	; (8001cec <USART1_IRQHandler+0x14>)
 8001ce4:	f000 fa04 	bl	80020f0 <USR_USART1_DMA_Callback>
  /* USER CODE END USART1_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000364 	.word	0x20000364

08001cf0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cf6:	f002 fa91 	bl	800421c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200002bc 	.word	0x200002bc

08001d04 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA2_Stream2_IRQHandler+0x10>)
 8001d0a:	f000 fdaf 	bl	800286c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000304 	.word	0x20000304

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d32:	f003 fe31 	bl	8005998 <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
	}

return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e009      	b.n	8001dbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 f9df 	bl	8002174 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	3301      	adds	r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	dbf1      	blt.n	8001da8 <_write+0x12>
	}
	return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_close>:

int _close(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001df6:	605a      	str	r2, [r3, #4]
	return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <_isatty>:

int _isatty(int file)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f003 fd96 	bl	8005998 <__errno>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20020000 	.word	0x20020000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000224 	.word	0x20000224
 8001ea0:	200004c0 	.word	0x200004c0

08001ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <MX_TIM14_Init+0x4c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 8399;
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001ed4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001ed8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4999;
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001ee2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ee6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001ef0:	2280      	movs	r2, #128	; 0x80
 8001ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ef4:	4806      	ldr	r0, [pc, #24]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001ef6:	f002 f8d1 	bl	800409c <HAL_TIM_Base_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8001f00:	f7ff fdd6 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <MX_TIM14_Init+0x48>)
 8001f06:	f002 f919 	bl	800413c <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM14_Init 2 */

}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200002bc 	.word	0x200002bc
 8001f14:	40002000 	.word	0x40002000

08001f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_TIM_Base_MspInit+0x48>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d115      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_TIM_Base_MspInit+0x4c>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_TIM_Base_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2101      	movs	r1, #1
 8001f4a:	202d      	movs	r0, #45	; 0x2d
 8001f4c:	f000 fabf 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f50:	202d      	movs	r0, #45	; 0x2d
 8001f52:	f000 fad8 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40002000 	.word	0x40002000
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	if(htim == (&htim14))
	{
		//led0_switch();
	}
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001f82:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <MX_USART1_UART_Init+0x68>)
 8001f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fb2:	480b      	ldr	r0, [pc, #44]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fb4:	f002 fb16 	bl	80045e4 <HAL_UART_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fbe:	f7ff fd77 	bl	8001ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);          //使能IDLE中断
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 0210 	orr.w	r2, r2, #16
 8001fd0:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)USART1_RX_BUF, USART1_REC_LEN);
 8001fd2:	22ff      	movs	r2, #255	; 0xff
 8001fd4:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <MX_USART1_UART_Init+0x6c>)
 8001fd6:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <MX_USART1_UART_Init+0x64>)
 8001fd8:	f002 fbe3 	bl	80047a2 <HAL_UART_Receive_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000364 	.word	0x20000364
 8001fe4:	40011000 	.word	0x40011000
 8001fe8:	200003a8 	.word	0x200003a8

08001fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b08a      	sub	sp, #40	; 0x28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a34      	ldr	r2, [pc, #208]	; (80020dc <HAL_UART_MspInit+0xf0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d162      	bne.n	80020d4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a32      	ldr	r2, [pc, #200]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <HAL_UART_MspInit+0xf4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002046:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002058:	2307      	movs	r3, #7
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	4820      	ldr	r0, [pc, #128]	; (80020e4 <HAL_UART_MspInit+0xf8>)
 8002064:	f000 fe6c 	bl	8002d40 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_UART_MspInit+0x100>)
 800206c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 8002070:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002074:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 8002084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002088:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020a8:	480f      	ldr	r0, [pc, #60]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 80020aa:	f000 fa47 	bl	800253c <HAL_DMA_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80020b4:	f7ff fcfc 	bl	8001ab0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 80020bc:	639a      	str	r2, [r3, #56]	; 0x38
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_UART_MspInit+0xfc>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2103      	movs	r1, #3
 80020c8:	2025      	movs	r0, #37	; 0x25
 80020ca:	f000 fa00 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020ce:	2025      	movs	r0, #37	; 0x25
 80020d0:	f000 fa19 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	20000304 	.word	0x20000304
 80020ec:	40026440 	.word	0x40026440

080020f0 <USR_USART1_DMA_Callback>:
  }
}

/* USER CODE BEGIN 1 */
void USR_USART1_DMA_Callback(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a1b      	ldr	r2, [pc, #108]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d12e      	bne.n	800215e <USR_USART1_DMA_Callback+0x6e>
	{
		if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET)   					   //判断是否是空闲中�?
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b10      	cmp	r3, #16
 800210c:	d127      	bne.n	800215e <USR_USART1_DMA_Callback+0x6e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&huart1);                     					   //清楚空闲中断标志（否则会�?直不断进入中断）
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]

			HAL_UART_DMAStop(&huart1);                                                     //停止本次DMA传输
 8002124:	4810      	ldr	r0, [pc, #64]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 8002126:	f002 fb6c 	bl	8004802 <HAL_UART_DMAStop>

			uint8_t data_length  = USART1_REC_LEN - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);   //计算接收到的数据长度
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <USR_USART1_DMA_Callback+0x7c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	73fb      	strb	r3, [r7, #15]

			HAL_UART_Transmit(&huart1,USART1_RX_BUF,data_length,200);                     //测试函数：将接收到的数据打印出去
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	b29a      	uxth	r2, r3
 800213a:	23c8      	movs	r3, #200	; 0xc8
 800213c:	490c      	ldr	r1, [pc, #48]	; (8002170 <USR_USART1_DMA_Callback+0x80>)
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 8002140:	f002 fa9d 	bl	800467e <HAL_UART_Transmit>

			memset(USART1_RX_BUF,0,data_length);                                            //清零接收缓冲�?
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	461a      	mov	r2, r3
 8002148:	2100      	movs	r1, #0
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <USR_USART1_DMA_Callback+0x80>)
 800214c:	f003 fc4e 	bl	80059ec <memset>
			data_length = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	73fb      	strb	r3, [r7, #15]
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)USART1_RX_BUF, USART1_REC_LEN);                    //重启�?始DMA传输 每次255字节数据
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	4906      	ldr	r1, [pc, #24]	; (8002170 <USR_USART1_DMA_Callback+0x80>)
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <USR_USART1_DMA_Callback+0x78>)
 800215a:	f002 fb22 	bl	80047a2 <HAL_UART_Receive_DMA>
		}
	}
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000364 	.word	0x20000364
 800216c:	20000304 	.word	0x20000304
 8002170:	200003a8 	.word	0x200003a8

08002174 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 800217c:	1d39      	adds	r1, r7, #4
 800217e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002182:	2201      	movs	r2, #1
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <__io_putchar+0x20>)
 8002186:	f002 fa7a 	bl	800467e <HAL_UART_Transmit>
	return ch;
 800218a:	687b      	ldr	r3, [r7, #4]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000364 	.word	0x20000364

08002198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219e:	490e      	ldr	r1, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021a0:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a4:	e002      	b.n	80021ac <LoopCopyDataInit>

080021a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021aa:	3304      	adds	r3, #4

080021ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b0:	d3f9      	bcc.n	80021a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b2:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b4:	4c0b      	ldr	r4, [pc, #44]	; (80021e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b8:	e001      	b.n	80021be <LoopFillZerobss>

080021ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021bc:	3204      	adds	r2, #4

080021be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c0:	d3fb      	bcc.n	80021ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021c2:	f7ff fe6f 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c6:	f003 fbed 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ca:	f7ff fbdf 	bl	800198c <main>
  bx  lr    
 80021ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80021dc:	0800a8bc 	.word	0x0800a8bc
  ldr r2, =_sbss
 80021e0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80021e4:	200004bc 	.word	0x200004bc

080021e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f0:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0d      	ldr	r2, [pc, #52]	; (800222c <HAL_Init+0x40>)
 80021f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_Init+0x40>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_Init+0x40>)
 8002202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x40>)
 800220e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002214:	2003      	movs	r0, #3
 8002216:	f000 f94f 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f808 	bl	8002230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002220:	f7ff fcf6 	bl	8001c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40023c00 	.word	0x40023c00

08002230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x54>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_InitTick+0x58>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002246:	fbb3 f3f1 	udiv	r3, r3, r1
 800224a:	fbb2 f3f3 	udiv	r3, r2, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f967 	bl	8002522 <HAL_SYSTICK_Config>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e00e      	b.n	800227c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b0f      	cmp	r3, #15
 8002262:	d80a      	bhi.n	800227a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002264:	2200      	movs	r2, #0
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	f04f 30ff 	mov.w	r0, #4294967295
 800226c:	f000 f92f 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_InitTick+0x5c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000028 	.word	0x20000028
 8002288:	20000030 	.word	0x20000030
 800228c:	2000002c 	.word	0x2000002c

08002290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x20>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_IncTick+0x24>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	4a04      	ldr	r2, [pc, #16]	; (80022b4 <HAL_IncTick+0x24>)
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000030 	.word	0x20000030
 80022b4:	200004a8 	.word	0x200004a8

080022b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return uwTick;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_GetTick+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	200004a8 	.word	0x200004a8

080022d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d8:	f7ff ffee 	bl	80022b8 <HAL_GetTick>
 80022dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e8:	d005      	beq.n	80022f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_Delay+0x44>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f6:	bf00      	nop
 80022f8:	f7ff ffde 	bl	80022b8 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d8f7      	bhi.n	80022f8 <HAL_Delay+0x28>
  {
  }
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000030 	.word	0x20000030

08002318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002334:	4013      	ands	r3, r2
 8002336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <__NVIC_SetPriorityGrouping+0x44>)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	60d3      	str	r3, [r2, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <__NVIC_GetPriorityGrouping+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 0307 	and.w	r3, r3, #7
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db0b      	blt.n	80023a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	f003 021f 	and.w	r2, r3, #31
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <__NVIC_EnableIRQ+0x38>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	2001      	movs	r0, #1
 800239e:	fa00 f202 	lsl.w	r2, r0, r2
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000e100 	.word	0xe000e100

080023b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	6039      	str	r1, [r7, #0]
 80023c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0a      	blt.n	80023e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	490c      	ldr	r1, [pc, #48]	; (8002404 <__NVIC_SetPriority+0x4c>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	0112      	lsls	r2, r2, #4
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	440b      	add	r3, r1
 80023dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e0:	e00a      	b.n	80023f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4908      	ldr	r1, [pc, #32]	; (8002408 <__NVIC_SetPriority+0x50>)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3b04      	subs	r3, #4
 80023f0:	0112      	lsls	r2, r2, #4
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	440b      	add	r3, r1
 80023f6:	761a      	strb	r2, [r3, #24]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b480      	push	{r7}
 800240e:	b089      	sub	sp, #36	; 0x24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f1c3 0307 	rsb	r3, r3, #7
 8002426:	2b04      	cmp	r3, #4
 8002428:	bf28      	it	cs
 800242a:	2304      	movcs	r3, #4
 800242c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	2b06      	cmp	r3, #6
 8002434:	d902      	bls.n	800243c <NVIC_EncodePriority+0x30>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3b03      	subs	r3, #3
 800243a:	e000      	b.n	800243e <NVIC_EncodePriority+0x32>
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002454:	f04f 31ff 	mov.w	r1, #4294967295
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	43d9      	mvns	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	4313      	orrs	r3, r2
         );
}
 8002466:	4618      	mov	r0, r3
 8002468:	3724      	adds	r7, #36	; 0x24
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff8e 	bl	80023b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff29 	bl	8002318 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff3e 	bl	8002360 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff8e 	bl	800240c <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5d 	bl	80023b8 <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff31 	bl	800237c <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002548:	f7ff feb6 	bl	80022b8 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e099      	b.n	800268c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002578:	e00f      	b.n	800259a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800257a:	f7ff fe9d 	bl	80022b8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b05      	cmp	r3, #5
 8002586:	d908      	bls.n	800259a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e078      	b.n	800268c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e8      	bne.n	800257a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_DMA_Init+0x158>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d107      	bne.n	8002604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	4313      	orrs	r3, r2
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0307 	bic.w	r3, r3, #7
 800261a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	2b04      	cmp	r3, #4
 800262c:	d117      	bne.n	800265e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4313      	orrs	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fb01 	bl	8002c48 <DMA_CheckFifoParam>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800265a:	2301      	movs	r3, #1
 800265c:	e016      	b.n	800268c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fab8 	bl	8002bdc <DMA_CalcBaseAndBitshift>
 800266c:	4603      	mov	r3, r0
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002674:	223f      	movs	r2, #63	; 0x3f
 8002676:	409a      	lsls	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	f010803f 	.word	0xf010803f

08002698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Start_IT+0x26>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e040      	b.n	8002740 <HAL_DMA_Start_IT+0xa8>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d12f      	bne.n	8002732 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fa4a 	bl	8002b80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	223f      	movs	r2, #63	; 0x3f
 80026f2:	409a      	lsls	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0216 	orr.w	r2, r2, #22
 8002706:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0208 	orr.w	r2, r2, #8
 800271e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	e005      	b.n	800273e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800273a:	2302      	movs	r3, #2
 800273c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002756:	f7ff fdaf 	bl	80022b8 <HAL_GetTick>
 800275a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d008      	beq.n	800277a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e052      	b.n	8002820 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0216 	bic.w	r2, r2, #22
 8002788:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002798:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d103      	bne.n	80027aa <HAL_DMA_Abort+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0208 	bic.w	r2, r2, #8
 80027b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0201 	bic.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ca:	e013      	b.n	80027f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027cc:	f7ff fd74 	bl	80022b8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d90c      	bls.n	80027f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e015      	b.n	8002820 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e4      	bne.n	80027cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	223f      	movs	r2, #63	; 0x3f
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d004      	beq.n	8002846 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00c      	b.n	8002860 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002878:	4b92      	ldr	r3, [pc, #584]	; (8002ac4 <HAL_DMA_IRQHandler+0x258>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a92      	ldr	r2, [pc, #584]	; (8002ac8 <HAL_DMA_IRQHandler+0x25c>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0a9b      	lsrs	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	2208      	movs	r2, #8
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d01a      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d013      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0204 	bic.w	r2, r2, #4
 80028be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2208      	movs	r2, #8
 80028c6:	409a      	lsls	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	f043 0201 	orr.w	r2, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	2201      	movs	r2, #1
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0202 	orr.w	r2, r3, #2
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2204      	movs	r2, #4
 8002914:	409a      	lsls	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d012      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00b      	beq.n	8002944 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	2204      	movs	r2, #4
 8002932:	409a      	lsls	r2, r3
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	2210      	movs	r2, #16
 800294a:	409a      	lsls	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d043      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d03c      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2210      	movs	r2, #16
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d018      	beq.n	80029ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	e01f      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	4798      	blx	r3
 80029ac:	e016      	b.n	80029dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0208 	bic.w	r2, r2, #8
 80029ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	2220      	movs	r2, #32
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 808e 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 8086 	beq.w	8002b0a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	2220      	movs	r2, #32
 8002a04:	409a      	lsls	r2, r3
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d136      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0216 	bic.w	r2, r2, #22
 8002a24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x1da>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d007      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0208 	bic.w	r2, r2, #8
 8002a54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5a:	223f      	movs	r2, #63	; 0x3f
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07d      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
        }
        return;
 8002a82:	e078      	b.n	8002b76 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01c      	beq.n	8002acc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d108      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d030      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
 8002ab0:	e02b      	b.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d027      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e022      	b.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
 8002ac4:	20000028 	.word	0x20000028
 8002ac8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0210 	bic.w	r2, r2, #16
 8002ae8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d032      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d022      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d307      	bcc.n	8002b52 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f2      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x2ca>
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b52:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
 8002b74:	e000      	b.n	8002b78 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b76:	bf00      	nop
    }
  }
}
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop

08002b80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d108      	bne.n	8002bc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bbe:	e007      	b.n	8002bd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	60da      	str	r2, [r3, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b10      	subs	r3, #16
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <DMA_CalcBaseAndBitshift+0x64>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <DMA_CalcBaseAndBitshift+0x68>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d909      	bls.n	8002c1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	1d1a      	adds	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c1c:	e007      	b.n	8002c2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	aaaaaaab 	.word	0xaaaaaaab
 8002c44:	0800a3f0 	.word	0x0800a3f0

08002c48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11f      	bne.n	8002ca2 <DMA_CheckFifoParam+0x5a>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d856      	bhi.n	8002d16 <DMA_CheckFifoParam+0xce>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <DMA_CheckFifoParam+0x28>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c93 	.word	0x08002c93
 8002c78:	08002c81 	.word	0x08002c81
 8002c7c:	08002d17 	.word	0x08002d17
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d046      	beq.n	8002d1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c90:	e043      	b.n	8002d1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c9a:	d140      	bne.n	8002d1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e03d      	b.n	8002d1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002caa:	d121      	bne.n	8002cf0 <DMA_CheckFifoParam+0xa8>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d837      	bhi.n	8002d22 <DMA_CheckFifoParam+0xda>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <DMA_CheckFifoParam+0x70>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cc9 	.word	0x08002cc9
 8002cbc:	08002ccf 	.word	0x08002ccf
 8002cc0:	08002cc9 	.word	0x08002cc9
 8002cc4:	08002ce1 	.word	0x08002ce1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ccc:	e030      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d025      	beq.n	8002d26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cde:	e022      	b.n	8002d26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ce8:	d11f      	bne.n	8002d2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cee:	e01c      	b.n	8002d2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d903      	bls.n	8002cfe <DMA_CheckFifoParam+0xb6>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d003      	beq.n	8002d04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cfc:	e018      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      break;
 8002d02:	e015      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e00b      	b.n	8002d2e <DMA_CheckFifoParam+0xe6>
      break;
 8002d16:	bf00      	nop
 8002d18:	e00a      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e008      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e006      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e004      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
 8002d28:	e002      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e16b      	b.n	8003034 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f040 815a 	bne.w	800302e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d005      	beq.n	8002d92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d130      	bne.n	8002df4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	2203      	movs	r2, #3
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc8:	2201      	movs	r2, #1
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0201 	and.w	r2, r3, #1
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d017      	beq.n	8002e30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0303 	and.w	r3, r3, #3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d123      	bne.n	8002e84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	08da      	lsrs	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3208      	adds	r2, #8
 8002e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	08da      	lsrs	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3208      	adds	r2, #8
 8002e7e:	69b9      	ldr	r1, [r7, #24]
 8002e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	2203      	movs	r2, #3
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 0203 	and.w	r2, r3, #3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80b4 	beq.w	800302e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b60      	ldr	r3, [pc, #384]	; (800304c <HAL_GPIO_Init+0x30c>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	4a5f      	ldr	r2, [pc, #380]	; (800304c <HAL_GPIO_Init+0x30c>)
 8002ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	; (800304c <HAL_GPIO_Init+0x30c>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_GPIO_Init+0x310>)
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	220f      	movs	r2, #15
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x314>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02b      	beq.n	8002f66 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a51      	ldr	r2, [pc, #324]	; (8003058 <HAL_GPIO_Init+0x318>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d025      	beq.n	8002f62 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_GPIO_Init+0x31c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d01f      	beq.n	8002f5e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_GPIO_Init+0x320>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d019      	beq.n	8002f5a <HAL_GPIO_Init+0x21a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4e      	ldr	r2, [pc, #312]	; (8003064 <HAL_GPIO_Init+0x324>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d013      	beq.n	8002f56 <HAL_GPIO_Init+0x216>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4d      	ldr	r2, [pc, #308]	; (8003068 <HAL_GPIO_Init+0x328>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00d      	beq.n	8002f52 <HAL_GPIO_Init+0x212>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4c      	ldr	r2, [pc, #304]	; (800306c <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <HAL_GPIO_Init+0x20e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_GPIO_Init+0x20a>
 8002f46:	2307      	movs	r3, #7
 8002f48:	e00e      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e00c      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f4e:	2306      	movs	r3, #6
 8002f50:	e00a      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f52:	2305      	movs	r3, #5
 8002f54:	e008      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e006      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e004      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x228>
 8002f66:	2300      	movs	r3, #0
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	f002 0203 	and.w	r2, r2, #3
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	4093      	lsls	r3, r2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f78:	4935      	ldr	r1, [pc, #212]	; (8003050 <HAL_GPIO_Init+0x310>)
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002faa:	4a32      	ldr	r2, [pc, #200]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd4:	4a27      	ldr	r2, [pc, #156]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fda:	4b26      	ldr	r3, [pc, #152]	; (8003074 <HAL_GPIO_Init+0x334>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <HAL_GPIO_Init+0x334>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <HAL_GPIO_Init+0x334>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003028:	4a12      	ldr	r2, [pc, #72]	; (8003074 <HAL_GPIO_Init+0x334>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	3301      	adds	r3, #1
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b0f      	cmp	r3, #15
 8003038:	f67f ae90 	bls.w	8002d5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	40013800 	.word	0x40013800
 8003054:	40020000 	.word	0x40020000
 8003058:	40020400 	.word	0x40020400
 800305c:	40020800 	.word	0x40020800
 8003060:	40020c00 	.word	0x40020c00
 8003064:	40021000 	.word	0x40021000
 8003068:	40021400 	.word	0x40021400
 800306c:	40021800 	.word	0x40021800
 8003070:	40021c00 	.word	0x40021c00
 8003074:	40013c00 	.word	0x40013c00

08003078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	e001      	b.n	800309a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800309a:	7bfb      	ldrb	r3, [r7, #15]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030c4:	e003      	b.n	80030ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030c6:	887b      	ldrh	r3, [r7, #2]
 80030c8:	041a      	lsls	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	619a      	str	r2, [r3, #24]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 f806 	bl	800310c <HAL_GPIO_EXTI_Callback>
  }
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e034      	b.n	800319e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800313c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f245 5255 	movw	r2, #21845	; 0x5555
 8003146:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6892      	ldr	r2, [r2, #8]
 800315a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800315c:	f7ff f8ac 	bl	80022b8 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003162:	e00f      	b.n	8003184 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003164:	f7ff f8a8 	bl	80022b8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b31      	cmp	r3, #49	; 0x31
 8003170:	d908      	bls.n	8003184 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e00c      	b.n	800319e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e8      	bne.n	8003164 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800319a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80031b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e264      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d075      	beq.n	80032d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	4ba3      	ldr	r3, [pc, #652]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d00c      	beq.n	800320c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4ba0      	ldr	r3, [pc, #640]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fa:	2b08      	cmp	r3, #8
 80031fc:	d112      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b9d      	ldr	r3, [pc, #628]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d10b      	bne.n	8003224 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	4b99      	ldr	r3, [pc, #612]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05b      	beq.n	80032d0 <HAL_RCC_OscConfig+0x108>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d157      	bne.n	80032d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e23f      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322c:	d106      	bne.n	800323c <HAL_RCC_OscConfig+0x74>
 800322e:	4b91      	ldr	r3, [pc, #580]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e01d      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003244:	d10c      	bne.n	8003260 <HAL_RCC_OscConfig+0x98>
 8003246:	4b8b      	ldr	r3, [pc, #556]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a8a      	ldr	r2, [pc, #552]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	4b88      	ldr	r3, [pc, #544]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a87      	ldr	r2, [pc, #540]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	e00b      	b.n	8003278 <HAL_RCC_OscConfig+0xb0>
 8003260:	4b84      	ldr	r3, [pc, #528]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a83      	ldr	r2, [pc, #524]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b81      	ldr	r3, [pc, #516]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a80      	ldr	r2, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d013      	beq.n	80032a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7ff f81a 	bl	80022b8 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff f816 	bl	80022b8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b64      	cmp	r3, #100	; 0x64
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e204      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329a:	4b76      	ldr	r3, [pc, #472]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0xc0>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7ff f806 	bl	80022b8 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b0:	f7ff f802 	bl	80022b8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1f0      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c2:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0xe8>
 80032ce:	e000      	b.n	80032d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d063      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b62      	ldr	r3, [pc, #392]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11c      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d116      	bne.n	8003330 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d005      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1c4      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4952      	ldr	r1, [pc, #328]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	e03a      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d020      	beq.n	800337a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003338:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <HAL_RCC_OscConfig+0x2b0>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe ffbb 	bl	80022b8 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003346:	f7fe ffb7 	bl	80022b8 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e1a5      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4940      	ldr	r1, [pc, #256]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337a:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_OscConfig+0x2b0>)
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003380:	f7fe ff9a 	bl	80022b8 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003388:	f7fe ff96 	bl	80022b8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e184      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d030      	beq.n	8003414 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ba:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCC_OscConfig+0x2b4>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c0:	f7fe ff7a 	bl	80022b8 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c8:	f7fe ff76 	bl	80022b8 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e164      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x200>
 80033e6:	e015      	b.n	8003414 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_RCC_OscConfig+0x2b4>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fe ff63 	bl	80022b8 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f6:	f7fe ff5f 	bl	80022b8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e14d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80a0 	beq.w	8003562 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCC_OscConfig+0x2b8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d121      	bne.n	80034a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b08      	ldr	r3, [pc, #32]	; (8003480 <HAL_RCC_OscConfig+0x2b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <HAL_RCC_OscConfig+0x2b8>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe ff25 	bl	80022b8 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e011      	b.n	8003496 <HAL_RCC_OscConfig+0x2ce>
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	42470000 	.word	0x42470000
 800347c:	42470e80 	.word	0x42470e80
 8003480:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003484:	f7fe ff18 	bl	80022b8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e106      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003496:	4b85      	ldr	r3, [pc, #532]	; (80036ac <HAL_RCC_OscConfig+0x4e4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x2f0>
 80034aa:	4b81      	ldr	r3, [pc, #516]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ae:	4a80      	ldr	r2, [pc, #512]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6713      	str	r3, [r2, #112]	; 0x70
 80034b6:	e01c      	b.n	80034f2 <HAL_RCC_OscConfig+0x32a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d10c      	bne.n	80034da <HAL_RCC_OscConfig+0x312>
 80034c0:	4b7b      	ldr	r3, [pc, #492]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a7a      	ldr	r2, [pc, #488]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034c6:	f043 0304 	orr.w	r3, r3, #4
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b78      	ldr	r3, [pc, #480]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a77      	ldr	r2, [pc, #476]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
 80034d8:	e00b      	b.n	80034f2 <HAL_RCC_OscConfig+0x32a>
 80034da:	4b75      	ldr	r3, [pc, #468]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4a74      	ldr	r2, [pc, #464]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70
 80034e6:	4b72      	ldr	r3, [pc, #456]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a71      	ldr	r2, [pc, #452]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d015      	beq.n	8003526 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fa:	f7fe fedd 	bl	80022b8 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003500:	e00a      	b.n	8003518 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003502:	f7fe fed9 	bl	80022b8 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0c5      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003518:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 800351a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RCC_OscConfig+0x33a>
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003526:	f7fe fec7 	bl	80022b8 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	e00a      	b.n	8003544 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fe fec3 	bl	80022b8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	f241 3288 	movw	r2, #5000	; 0x1388
 800353c:	4293      	cmp	r3, r2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0af      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003544:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ee      	bne.n	800352e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003556:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a55      	ldr	r2, [pc, #340]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 800355c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 809b 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b08      	cmp	r3, #8
 8003576:	d05c      	beq.n	8003632 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d141      	bne.n	8003604 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003580:	4b4c      	ldr	r3, [pc, #304]	; (80036b4 <HAL_RCC_OscConfig+0x4ec>)
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe fe97 	bl	80022b8 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe fe93 	bl	80022b8 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e081      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a0:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	019b      	lsls	r3, r3, #6
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	085b      	lsrs	r3, r3, #1
 80035c4:	3b01      	subs	r3, #1
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x4ec>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7fe fe6c 	bl	80022b8 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe fe68 	bl	80022b8 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e056      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x41c>
 8003602:	e04e      	b.n	80036a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x4ec>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360a:	f7fe fe55 	bl	80022b8 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003612:	f7fe fe51 	bl	80022b8 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e03f      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003624:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x44a>
 8003630:	e037      	b.n	80036a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e032      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800363e:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <HAL_RCC_OscConfig+0x4e8>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d028      	beq.n	800369e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d121      	bne.n	800369e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d11a      	bne.n	800369e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003674:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003676:	4293      	cmp	r3, r2
 8003678:	d111      	bne.n	800369e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d107      	bne.n	800369e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40007000 	.word	0x40007000
 80036b0:	40023800 	.word	0x40023800
 80036b4:	42470060 	.word	0x42470060

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0cc      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b68      	ldr	r3, [pc, #416]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90c      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800372e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d044      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d119      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d003      	beq.n	8003776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b3f      	ldr	r3, [pc, #252]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e06f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e067      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f023 0203 	bic.w	r2, r3, #3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4934      	ldr	r1, [pc, #208]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a8:	f7fe fd86 	bl	80022b8 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe fd82 	bl	80022b8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e04f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 020c 	and.w	r2, r3, #12
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d1eb      	bne.n	80037b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037d8:	4b25      	ldr	r3, [pc, #148]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d20c      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fce6 	bl	8002230 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023c00 	.word	0x40023c00
 8003874:	40023800 	.word	0x40023800
 8003878:	0800a3d8 	.word	0x0800a3d8
 800387c:	20000028 	.word	0x20000028
 8003880:	2000002c 	.word	0x2000002c

08003884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800389c:	4b67      	ldr	r3, [pc, #412]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d00d      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	f200 80bd 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x1a4>
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x34>
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d003      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0x3a>
 80038b6:	e0b7      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038ba:	60bb      	str	r3, [r7, #8]
       break;
 80038bc:	e0b7      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038be:	4b61      	ldr	r3, [pc, #388]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80038c0:	60bb      	str	r3, [r7, #8]
      break;
 80038c2:	e0b4      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038c4:	4b5d      	ldr	r3, [pc, #372]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ce:	4b5b      	ldr	r3, [pc, #364]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d04d      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038da:	4b58      	ldr	r3, [pc, #352]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	099b      	lsrs	r3, r3, #6
 80038e0:	461a      	mov	r2, r3
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038ea:	f04f 0100 	mov.w	r1, #0
 80038ee:	ea02 0800 	and.w	r8, r2, r0
 80038f2:	ea03 0901 	and.w	r9, r3, r1
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	014b      	lsls	r3, r1, #5
 8003904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003908:	0142      	lsls	r2, r0, #5
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	ebb0 0008 	subs.w	r0, r0, r8
 8003912:	eb61 0109 	sbc.w	r1, r1, r9
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	018b      	lsls	r3, r1, #6
 8003920:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003924:	0182      	lsls	r2, r0, #6
 8003926:	1a12      	subs	r2, r2, r0
 8003928:	eb63 0301 	sbc.w	r3, r3, r1
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	00d9      	lsls	r1, r3, #3
 8003936:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800393a:	00d0      	lsls	r0, r2, #3
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	eb12 0208 	adds.w	r2, r2, r8
 8003944:	eb43 0309 	adc.w	r3, r3, r9
 8003948:	f04f 0000 	mov.w	r0, #0
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	0259      	lsls	r1, r3, #9
 8003952:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003956:	0250      	lsls	r0, r2, #9
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	461a      	mov	r2, r3
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	f7fd f98e 	bl	8000c88 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e04a      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	461a      	mov	r2, r3
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	ea02 0400 	and.w	r4, r2, r0
 800398e:	ea03 0501 	and.w	r5, r3, r1
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	014b      	lsls	r3, r1, #5
 80039a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039a4:	0142      	lsls	r2, r0, #5
 80039a6:	4610      	mov	r0, r2
 80039a8:	4619      	mov	r1, r3
 80039aa:	1b00      	subs	r0, r0, r4
 80039ac:	eb61 0105 	sbc.w	r1, r1, r5
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	018b      	lsls	r3, r1, #6
 80039ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039be:	0182      	lsls	r2, r0, #6
 80039c0:	1a12      	subs	r2, r2, r0
 80039c2:	eb63 0301 	sbc.w	r3, r3, r1
 80039c6:	f04f 0000 	mov.w	r0, #0
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	00d9      	lsls	r1, r3, #3
 80039d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039d4:	00d0      	lsls	r0, r2, #3
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	1912      	adds	r2, r2, r4
 80039dc:	eb45 0303 	adc.w	r3, r5, r3
 80039e0:	f04f 0000 	mov.w	r0, #0
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	0299      	lsls	r1, r3, #10
 80039ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80039ee:	0290      	lsls	r0, r2, #10
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	f7fd f942 	bl	8000c88 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	60bb      	str	r3, [r7, #8]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a2a:	60bb      	str	r3, [r7, #8]
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	20000028 	.word	0x20000028

08003a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a64:	f7ff fff0 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	0a9b      	lsrs	r3, r3, #10
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	4903      	ldr	r1, [pc, #12]	; (8003a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	0800a3e8 	.word	0x0800a3e8

08003a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a8c:	f7ff ffdc 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0b5b      	lsrs	r3, r3, #13
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800a3e8 	.word	0x0800a3e8

08003ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07b      	b.n	8003bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad2:	d009      	beq.n	8003ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
 8003ada:	e005      	b.n	8003ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe f826 	bl	8001b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6c:	ea42 0103 	orr.w	r1, r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	0c1b      	lsrs	r3, r3, #16
 8003b86:	f003 0104 	and.w	r1, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f003 0210 	and.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b08c      	sub	sp, #48	; 0x30
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_SPI_TransmitReceive+0x26>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e18a      	b.n	8003efe <HAL_SPI_TransmitReceive+0x33c>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf0:	f7fe fb62 	bl	80022b8 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c06:	887b      	ldrh	r3, [r7, #2]
 8003c08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d00f      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x70>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c18:	d107      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_SPI_TransmitReceive+0x68>
 8003c22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d003      	beq.n	8003c32 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c30:	e15b      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x82>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_TransmitReceive+0x82>
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c4a:	e14e      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d003      	beq.n	8003c60 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	887a      	ldrh	r2, [r7, #2]
 8003c70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	887a      	ldrh	r2, [r7, #2]
 8003c76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	887a      	ldrh	r2, [r7, #2]
 8003c82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d007      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d178      	bne.n	8003db0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_SPI_TransmitReceive+0x10a>
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d166      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	881a      	ldrh	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cf0:	e053      	b.n	8003d9a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d11b      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x176>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x176>
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d113      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	1c9a      	adds	r2, r3, #2
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d119      	bne.n	8003d7a <HAL_SPI_TransmitReceive+0x1b8>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d014      	beq.n	8003d7a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d76:	2301      	movs	r3, #1
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d7a:	f7fe fa9d 	bl	80022b8 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d807      	bhi.n	8003d9a <HAL_SPI_TransmitReceive+0x1d8>
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d003      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d98:	e0a7      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1a6      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x130>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1a1      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x130>
 8003dae:	e07c      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_TransmitReceive+0x1fc>
 8003db8:	8b7b      	ldrh	r3, [r7, #26]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d16b      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003de4:	e057      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d11c      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x26c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_SPI_TransmitReceive+0x26c>
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d114      	bne.n	8003e2e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	330c      	adds	r3, #12
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d119      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x2ae>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d014      	beq.n	8003e70 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e70:	f7fe fa22 	bl	80022b8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d803      	bhi.n	8003e88 <HAL_SPI_TransmitReceive+0x2c6>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d102      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x2cc>
 8003e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d103      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e94:	e029      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1a2      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x224>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d19d      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8b2 	bl	8004018 <SPI_EndRxTxTransaction>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ec6:	e010      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	e000      	b.n	8003eea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003efa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3730      	adds	r7, #48	; 0x30
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	4613      	mov	r3, r2
 8003f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f18:	f7fe f9ce 	bl	80022b8 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4413      	add	r3, r2
 8003f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f28:	f7fe f9c6 	bl	80022b8 <HAL_GetTick>
 8003f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f2e:	4b39      	ldr	r3, [pc, #228]	; (8004014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	015b      	lsls	r3, r3, #5
 8003f34:	0d1b      	lsrs	r3, r3, #20
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	fb02 f303 	mul.w	r3, r2, r3
 8003f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3e:	e054      	b.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d050      	beq.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f48:	f7fe f9b6 	bl	80022b8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d902      	bls.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d13d      	bne.n	8003fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d111      	bne.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	d004      	beq.n	8003f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8a:	d107      	bne.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d10f      	bne.n	8003fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e017      	b.n	800400a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d19b      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000028 	.word	0x20000028

08004018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004024:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <SPI_EndRxTxTransaction+0x7c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <SPI_EndRxTxTransaction+0x80>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0d5b      	lsrs	r3, r3, #21
 8004030:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004042:	d112      	bne.n	800406a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7ff ff5a 	bl	8003f08 <SPI_WaitFlagStateUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	f043 0220 	orr.w	r2, r3, #32
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e00f      	b.n	800408a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3b01      	subs	r3, #1
 8004074:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d0f2      	beq.n	800406a <SPI_EndRxTxTransaction+0x52>
 8004084:	e000      	b.n	8004088 <SPI_EndRxTxTransaction+0x70>
        break;
 8004086:	bf00      	nop
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	20000028 	.word	0x20000028
 8004098:	165e9f81 	.word	0x165e9f81

0800409c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e041      	b.n	8004132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd ff28 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3304      	adds	r3, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 f9ce 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d001      	beq.n	8004154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e04e      	b.n	80041f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <HAL_TIM_Base_Start_IT+0xc4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417e:	d01d      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_TIM_Base_Start_IT+0xc8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1e      	ldr	r2, [pc, #120]	; (8004208 <HAL_TIM_Base_Start_IT+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <HAL_TIM_Base_Start_IT+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1b      	ldr	r2, [pc, #108]	; (8004210 <HAL_TIM_Base_Start_IT+0xd4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_TIM_Base_Start_IT+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_Base_Start_IT+0x80>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a18      	ldr	r2, [pc, #96]	; (8004218 <HAL_TIM_Base_Start_IT+0xdc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d010      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	e007      	b.n	80041f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40010400 	.word	0x40010400
 8004214:	40014000 	.word	0x40014000
 8004218:	40001800 	.word	0x40001800

0800421c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d122      	bne.n	8004278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11b      	bne.n	8004278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0202 	mvn.w	r2, #2
 8004248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8ee 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8e0 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8f1 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0304 	and.w	r3, r3, #4
 8004282:	2b04      	cmp	r3, #4
 8004284:	d122      	bne.n	80042cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b04      	cmp	r3, #4
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0204 	mvn.w	r2, #4
 800429c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8c4 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8b6 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8c7 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d122      	bne.n	8004320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b08      	cmp	r3, #8
 80042e6:	d11b      	bne.n	8004320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0208 	mvn.w	r2, #8
 80042f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f89a 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 800430c:	e005      	b.n	800431a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f88c 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f89d 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b10      	cmp	r3, #16
 800432c:	d122      	bne.n	8004374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b10      	cmp	r3, #16
 800433a:	d11b      	bne.n	8004374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0210 	mvn.w	r2, #16
 8004344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2208      	movs	r2, #8
 800434a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f870 	bl	8004440 <HAL_TIM_IC_CaptureCallback>
 8004360:	e005      	b.n	800436e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f862 	bl	800442c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f873 	bl	8004454 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10e      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d107      	bne.n	80043a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0201 	mvn.w	r2, #1
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fd fde4 	bl	8001f68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b80      	cmp	r3, #128	; 0x80
 80043ac:	d10e      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b8:	2b80      	cmp	r3, #128	; 0x80
 80043ba:	d107      	bne.n	80043cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f902 	bl	80045d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d6:	2b40      	cmp	r3, #64	; 0x40
 80043d8:	d10e      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	d107      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f838 	bl	8004468 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b20      	cmp	r3, #32
 8004404:	d10e      	bne.n	8004424 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b20      	cmp	r3, #32
 8004412:	d107      	bne.n	8004424 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0220 	mvn.w	r2, #32
 800441c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8cc 	bl	80045bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a40      	ldr	r2, [pc, #256]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a3d      	ldr	r2, [pc, #244]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a3b      	ldr	r2, [pc, #236]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x40>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <TIM_Base_SetConfig+0x114>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044dc:	d027      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <TIM_Base_SetConfig+0x118>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d023      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a2b      	ldr	r2, [pc, #172]	; (8004598 <TIM_Base_SetConfig+0x11c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a2a      	ldr	r2, [pc, #168]	; (800459c <TIM_Base_SetConfig+0x120>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d01b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a29      	ldr	r2, [pc, #164]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d017      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <TIM_Base_SetConfig+0x128>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d013      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_Base_SetConfig+0x12c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <TIM_Base_SetConfig+0x130>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a25      	ldr	r2, [pc, #148]	; (80045b0 <TIM_Base_SetConfig+0x134>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <TIM_Base_SetConfig+0x138>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <TIM_Base_SetConfig+0x13c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d108      	bne.n	8004540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <TIM_Base_SetConfig+0x114>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_Base_SetConfig+0xf8>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a0c      	ldr	r2, [pc, #48]	; (80045a0 <TIM_Base_SetConfig+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d103      	bne.n	800457c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	615a      	str	r2, [r3, #20]
}
 8004582:	bf00      	nop
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800
 80045b0:	40001800 	.word	0x40001800
 80045b4:	40001c00 	.word	0x40001c00
 80045b8:	40002000 	.word	0x40002000

080045bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e03f      	b.n	8004676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd fcee 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 ffed 	bl	8005608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800463c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695a      	ldr	r2, [r3, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800464c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800465c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b08a      	sub	sp, #40	; 0x28
 8004682:	af02      	add	r7, sp, #8
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b20      	cmp	r3, #32
 800469c:	d17c      	bne.n	8004798 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_UART_Transmit+0x2c>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e075      	b.n	800479a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Transmit+0x3e>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e06e      	b.n	800479a <HAL_UART_Transmit+0x11c>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2221      	movs	r2, #33	; 0x21
 80046ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d2:	f7fd fdf1 	bl	80022b8 <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	88fa      	ldrh	r2, [r7, #6]
 80046dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88fa      	ldrh	r2, [r7, #6]
 80046e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d108      	bne.n	8004700 <HAL_UART_Transmit+0x82>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e003      	b.n	8004708 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004710:	e02a      	b.n	8004768 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2180      	movs	r1, #128	; 0x80
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fca9 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e036      	b.n	800479a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	3302      	adds	r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e007      	b.n	800475a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	3301      	adds	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1cf      	bne.n	8004712 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	2140      	movs	r1, #64	; 0x40
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fc79 	bl	8005074 <UART_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d11d      	bne.n	80047f8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <HAL_UART_Receive_DMA+0x26>
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e016      	b.n	80047fa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_UART_Receive_DMA+0x38>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e00f      	b.n	80047fa <HAL_UART_Receive_DMA+0x58>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fcae 	bl	8005150 <UART_Start_Receive_DMA>
 80047f4:	4603      	mov	r3, r0
 80047f6:	e000      	b.n	80047fa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b090      	sub	sp, #64	; 0x40
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004818:	2b80      	cmp	r3, #128	; 0x80
 800481a:	bf0c      	ite	eq
 800481c:	2301      	moveq	r3, #1
 800481e:	2300      	movne	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b21      	cmp	r3, #33	; 0x21
 800482e:	d128      	bne.n	8004882 <HAL_UART_DMAStop+0x80>
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d025      	beq.n	8004882 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	623b      	str	r3, [r7, #32]
   return(result);
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484c:	63bb      	str	r3, [r7, #56]	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004856:	633a      	str	r2, [r7, #48]	; 0x30
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486e:	2b00      	cmp	r3, #0
 8004870:	d004      	beq.n	800487c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4618      	mov	r0, r3
 8004878:	f7fd ff66 	bl	8002748 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fd01 	bl	8005284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b22      	cmp	r3, #34	; 0x22
 80048a2:	d128      	bne.n	80048f6 <HAL_UART_DMAStop+0xf4>
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d025      	beq.n	80048f6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048ca:	61fa      	str	r2, [r7, #28]
 80048cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	69b9      	ldr	r1, [r7, #24]
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	617b      	str	r3, [r7, #20]
   return(result);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd ff2c 	bl	8002748 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fcef 	bl	80052d4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3740      	adds	r7, #64	; 0x40
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b0ba      	sub	sp, #232	; 0xe8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004926:	2300      	movs	r3, #0
 8004928:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800493e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_UART_IRQHandler+0x66>
 8004952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fd97 	bl	8005492 <UART_Receive_IT>
      return;
 8004964:	e256      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 80de 	beq.w	8004b2c <HAL_UART_IRQHandler+0x22c>
 8004970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800497c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004980:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 80d1 	beq.w	8004b2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800498a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_UART_IRQHandler+0xae>
 8004996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0304 	and.w	r3, r3, #4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_UART_IRQHandler+0xd2>
 80049ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0202 	orr.w	r2, r3, #2
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <HAL_UART_IRQHandler+0xf6>
 80049de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <HAL_UART_IRQHandler+0x126>
 8004a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d105      	bne.n	8004a1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f043 0208 	orr.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 81ed 	beq.w	8004e0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a34:	f003 0320 	and.w	r3, r3, #32
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_UART_IRQHandler+0x14e>
 8004a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fd22 	bl	8005492 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a58:	2b40      	cmp	r3, #64	; 0x40
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <HAL_UART_IRQHandler+0x17a>
 8004a72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d04f      	beq.n	8004b1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fc2a 	bl	80052d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d141      	bne.n	8004b12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3314      	adds	r3, #20
 8004a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004aa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004aba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ac6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1d9      	bne.n	8004a8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	4a7d      	ldr	r2, [pc, #500]	; (8004cdc <HAL_UART_IRQHandler+0x3dc>)
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd fe9a 	bl	8002828 <HAL_DMA_Abort_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b04:	4610      	mov	r0, r2
 8004b06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e00e      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f9a4 	bl	8004e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e00a      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f9a0 	bl	8004e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b18:	e006      	b.n	8004b28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f99c 	bl	8004e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b26:	e170      	b.n	8004e0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b28:	bf00      	nop
    return;
 8004b2a:	e16e      	b.n	8004e0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f040 814a 	bne.w	8004dca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 8143 	beq.w	8004dca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 813c 	beq.w	8004dca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	f040 80b4 	bne.w	8004ce0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8140 	beq.w	8004e0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f080 8139 	bcs.w	8004e0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	f000 8088 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004be2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1d9      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e1      	bne.n	8004bfe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	3314      	adds	r3, #20
 8004c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e3      	bne.n	8004c3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	f023 0310 	bic.w	r3, r3, #16
 8004c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ca4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ca6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e3      	bne.n	8004c80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fd43 	bl	8002748 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8ca 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cd8:	e099      	b.n	8004e0e <HAL_UART_IRQHandler+0x50e>
 8004cda:	bf00      	nop
 8004cdc:	0800539b 	.word	0x0800539b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 808b 	beq.w	8004e12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8086 	beq.w	8004e12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e3      	bne.n	8004d06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3314      	adds	r3, #20
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d62:	633a      	str	r2, [r7, #48]	; 0x30
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e3      	bne.n	8004d3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0310 	bic.w	r3, r3, #16
 8004d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dac:	69b9      	ldr	r1, [r7, #24]
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	e841 2300 	strex	r3, r2, [r1]
 8004db4:	617b      	str	r3, [r7, #20]
   return(result);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1e3      	bne.n	8004d84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f852 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dc8:	e023      	b.n	8004e12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <HAL_UART_IRQHandler+0x4ea>
 8004dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 faed 	bl	80053c2 <UART_Transmit_IT>
    return;
 8004de8:	e014      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00e      	beq.n	8004e14 <HAL_UART_IRQHandler+0x514>
 8004df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d008      	beq.n	8004e14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fb2d 	bl	8005462 <UART_EndTransmit_IT>
    return;
 8004e08:	e004      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
    return;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
      return;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_UART_IRQHandler+0x514>
      return;
 8004e12:	bf00      	nop
  }
}
 8004e14:	37e8      	adds	r7, #232	; 0xe8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop

08004e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b09c      	sub	sp, #112	; 0x70
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d172      	bne.n	8004f86 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ec6:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ec8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004efa:	647a      	str	r2, [r7, #68]	; 0x44
 8004efc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
 8004f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3314      	adds	r3, #20
 8004f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d119      	bne.n	8004f86 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	330c      	adds	r3, #12
 8004f58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f023 0310 	bic.w	r3, r3, #16
 8004f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f72:	61fa      	str	r2, [r7, #28]
 8004f74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	69b9      	ldr	r1, [r7, #24]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d106      	bne.n	8004f9c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f92:	4619      	mov	r1, r3
 8004f94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f96:	f7ff ff69 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f9a:	e002      	b.n	8004fa2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004f9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004f9e:	f7ff ff47 	bl	8004e30 <HAL_UART_RxCpltCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3770      	adds	r7, #112	; 0x70
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d108      	bne.n	8004fd2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fc4:	085b      	lsrs	r3, r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	4619      	mov	r1, r3
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff ff4e 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fd0:	e002      	b.n	8004fd8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff ff36 	bl	8004e44 <HAL_UART_RxHalfCpltCallback>
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	bf0c      	ite	eq
 8005000:	2301      	moveq	r3, #1
 8005002:	2300      	movne	r3, #0
 8005004:	b2db      	uxtb	r3, r3
 8005006:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b21      	cmp	r3, #33	; 0x21
 8005012:	d108      	bne.n	8005026 <UART_DMAError+0x46>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2200      	movs	r2, #0
 800501e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005020:	68b8      	ldr	r0, [r7, #8]
 8005022:	f000 f92f 	bl	8005284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	bf0c      	ite	eq
 8005034:	2301      	moveq	r3, #1
 8005036:	2300      	movne	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b22      	cmp	r3, #34	; 0x22
 8005046:	d108      	bne.n	800505a <UART_DMAError+0x7a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005054:	68b8      	ldr	r0, [r7, #8]
 8005056:	f000 f93d 	bl	80052d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f043 0210 	orr.w	r2, r3, #16
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005066:	68b8      	ldr	r0, [r7, #8]
 8005068:	f7ff fef6 	bl	8004e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b090      	sub	sp, #64	; 0x40
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	e050      	b.n	8005128 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d04c      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005094:	f7fd f910 	bl	80022b8 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d241      	bcs.n	8005128 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	330c      	adds	r3, #12
 80050aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	330c      	adds	r3, #12
 80050c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050c4:	637a      	str	r2, [r7, #52]	; 0x34
 80050c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e5      	bne.n	80050a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3314      	adds	r3, #20
 80050de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	613b      	str	r3, [r7, #16]
   return(result);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f023 0301 	bic.w	r3, r3, #1
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3314      	adds	r3, #20
 80050f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f8:	623a      	str	r2, [r7, #32]
 80050fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	69f9      	ldr	r1, [r7, #28]
 80050fe:	6a3a      	ldr	r2, [r7, #32]
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	61bb      	str	r3, [r7, #24]
   return(result);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e5      	bne.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e00f      	b.n	8005148 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	4013      	ands	r3, r2
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	bf0c      	ite	eq
 8005138:	2301      	moveq	r3, #1
 800513a:	2300      	movne	r3, #0
 800513c:	b2db      	uxtb	r3, r3
 800513e:	461a      	mov	r2, r3
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	429a      	cmp	r2, r3
 8005144:	d09f      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3740      	adds	r7, #64	; 0x40
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b098      	sub	sp, #96	; 0x60
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2222      	movs	r2, #34	; 0x22
 8005174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	4a3e      	ldr	r2, [pc, #248]	; (8005278 <UART_Start_Receive_DMA+0x128>)
 800517e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	4a3d      	ldr	r2, [pc, #244]	; (800527c <UART_Start_Receive_DMA+0x12c>)
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	4a3c      	ldr	r2, [pc, #240]	; (8005280 <UART_Start_Receive_DMA+0x130>)
 800518e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	2200      	movs	r2, #0
 8005196:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005198:	f107 0308 	add.w	r3, r7, #8
 800519c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	88fb      	ldrh	r3, [r7, #6]
 80051b0:	f7fd fa72 	bl	8002698 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051b4:	2300      	movs	r3, #0
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	330c      	adds	r3, #12
 80051f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	657b      	str	r3, [r7, #84]	; 0x54
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005226:	63ba      	str	r2, [r7, #56]	; 0x38
 8005228:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800522c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3314      	adds	r3, #20
 8005240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	617b      	str	r3, [r7, #20]
   return(result);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005250:	653b      	str	r3, [r7, #80]	; 0x50
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	3314      	adds	r3, #20
 8005258:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800525a:	627a      	str	r2, [r7, #36]	; 0x24
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	6a39      	ldr	r1, [r7, #32]
 8005260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	61fb      	str	r3, [r7, #28]
   return(result);
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e5      	bne.n	800523a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3760      	adds	r7, #96	; 0x60
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	08004e85 	.word	0x08004e85
 800527c:	08004fab 	.word	0x08004fab
 8005280:	08004fe1 	.word	0x08004fe1

08005284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	e853 3f00 	ldrex	r3, [r3]
 800529a:	60bb      	str	r3, [r7, #8]
   return(result);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	330c      	adds	r3, #12
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	61ba      	str	r2, [r7, #24]
 80052ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	6979      	ldr	r1, [r7, #20]
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	e841 2300 	strex	r3, r2, [r1]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1e5      	bne.n	800528c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80052c8:	bf00      	nop
 80052ca:	3724      	adds	r7, #36	; 0x24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b095      	sub	sp, #84	; 0x54
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	330c      	adds	r3, #12
 80052fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052fc:	643a      	str	r2, [r7, #64]	; 0x40
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e5      	bne.n	80052dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005330:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	2b01      	cmp	r3, #1
 800534a:	d119      	bne.n	8005380 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60bb      	str	r3, [r7, #8]
   return(result);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f023 0310 	bic.w	r3, r3, #16
 8005362:	647b      	str	r3, [r7, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536c:	61ba      	str	r2, [r7, #24]
 800536e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	613b      	str	r3, [r7, #16]
   return(result);
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e5      	bne.n	800534c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800538e:	bf00      	nop
 8005390:	3754      	adds	r7, #84	; 0x54
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fd4f 	bl	8004e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b21      	cmp	r3, #33	; 0x21
 80053d4:	d13e      	bne.n	8005454 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d114      	bne.n	800540a <UART_Transmit_IT+0x48>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d110      	bne.n	800540a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]
 8005408:	e008      	b.n	800541c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6211      	str	r1, [r2, #32]
 8005414:	781a      	ldrb	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29b      	uxth	r3, r3
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	4619      	mov	r1, r3
 800542a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800543e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800544e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	e000      	b.n	8005456 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005454:	2302      	movs	r3, #2
  }
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005478:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fcca 	bl	8004e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b08c      	sub	sp, #48	; 0x30
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b22      	cmp	r3, #34	; 0x22
 80054a4:	f040 80ab 	bne.w	80055fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b0:	d117      	bne.n	80054e2 <UART_Receive_IT+0x50>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d113      	bne.n	80054e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	1c9a      	adds	r2, r3, #2
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28
 80054e0:	e026      	b.n	8005530 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d007      	beq.n	8005506 <UART_Receive_IT+0x74>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <UART_Receive_IT+0x82>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e008      	b.n	8005526 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005520:	b2da      	uxtb	r2, r3
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4619      	mov	r1, r3
 800553e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005540:	2b00      	cmp	r3, #0
 8005542:	d15a      	bne.n	80055fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0220 	bic.w	r2, r2, #32
 8005552:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695a      	ldr	r2, [r3, #20]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	2b01      	cmp	r3, #1
 8005582:	d135      	bne.n	80055f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	613b      	str	r3, [r7, #16]
   return(result);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	623a      	str	r2, [r7, #32]
 80055ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	69f9      	ldr	r1, [r7, #28]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e5      	bne.n	800558a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d10a      	bne.n	80055e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fc3f 	bl	8004e6c <HAL_UARTEx_RxEventCallback>
 80055ee:	e002      	b.n	80055f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff fc1d 	bl	8004e30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e002      	b.n	8005600 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3730      	adds	r7, #48	; 0x30
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	b09f      	sub	sp, #124	; 0x7c
 800560e:	af00      	add	r7, sp, #0
 8005610:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	68d9      	ldr	r1, [r3, #12]
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	ea40 0301 	orr.w	r3, r0, r1
 8005628:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800562a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	431a      	orrs	r2, r3
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	431a      	orrs	r2, r3
 800563a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	4313      	orrs	r3, r2
 8005640:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800564c:	f021 010c 	bic.w	r1, r1, #12
 8005650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005656:	430b      	orrs	r3, r1
 8005658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800565a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005666:	6999      	ldr	r1, [r3, #24]
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	ea40 0301 	orr.w	r3, r0, r1
 8005670:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	4bc5      	ldr	r3, [pc, #788]	; (800598c <UART_SetConfig+0x384>)
 8005678:	429a      	cmp	r2, r3
 800567a:	d004      	beq.n	8005686 <UART_SetConfig+0x7e>
 800567c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	4bc3      	ldr	r3, [pc, #780]	; (8005990 <UART_SetConfig+0x388>)
 8005682:	429a      	cmp	r2, r3
 8005684:	d103      	bne.n	800568e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005686:	f7fe f9ff 	bl	8003a88 <HAL_RCC_GetPCLK2Freq>
 800568a:	6778      	str	r0, [r7, #116]	; 0x74
 800568c:	e002      	b.n	8005694 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800568e:	f7fe f9e7 	bl	8003a60 <HAL_RCC_GetPCLK1Freq>
 8005692:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569c:	f040 80b6 	bne.w	800580c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a2:	461c      	mov	r4, r3
 80056a4:	f04f 0500 	mov.w	r5, #0
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	1891      	adds	r1, r2, r2
 80056ae:	6439      	str	r1, [r7, #64]	; 0x40
 80056b0:	415b      	adcs	r3, r3
 80056b2:	647b      	str	r3, [r7, #68]	; 0x44
 80056b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056b8:	1912      	adds	r2, r2, r4
 80056ba:	eb45 0303 	adc.w	r3, r5, r3
 80056be:	f04f 0000 	mov.w	r0, #0
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	00d9      	lsls	r1, r3, #3
 80056c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056cc:	00d0      	lsls	r0, r2, #3
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	1911      	adds	r1, r2, r4
 80056d4:	6639      	str	r1, [r7, #96]	; 0x60
 80056d6:	416b      	adcs	r3, r5
 80056d8:	667b      	str	r3, [r7, #100]	; 0x64
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e8:	415b      	adcs	r3, r3
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80056f4:	f7fb fac8 	bl	8000c88 <__aeabi_uldivmod>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4ba5      	ldr	r3, [pc, #660]	; (8005994 <UART_SetConfig+0x38c>)
 80056fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	011e      	lsls	r6, r3, #4
 8005706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005708:	461c      	mov	r4, r3
 800570a:	f04f 0500 	mov.w	r5, #0
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	1891      	adds	r1, r2, r2
 8005714:	6339      	str	r1, [r7, #48]	; 0x30
 8005716:	415b      	adcs	r3, r3
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800571e:	1912      	adds	r2, r2, r4
 8005720:	eb45 0303 	adc.w	r3, r5, r3
 8005724:	f04f 0000 	mov.w	r0, #0
 8005728:	f04f 0100 	mov.w	r1, #0
 800572c:	00d9      	lsls	r1, r3, #3
 800572e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005732:	00d0      	lsls	r0, r2, #3
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	1911      	adds	r1, r2, r4
 800573a:	65b9      	str	r1, [r7, #88]	; 0x58
 800573c:	416b      	adcs	r3, r5
 800573e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	461a      	mov	r2, r3
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	1891      	adds	r1, r2, r2
 800574c:	62b9      	str	r1, [r7, #40]	; 0x28
 800574e:	415b      	adcs	r3, r3
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005756:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800575a:	f7fb fa95 	bl	8000c88 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <UART_SetConfig+0x38c>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	3332      	adds	r3, #50	; 0x32
 8005776:	4a87      	ldr	r2, [pc, #540]	; (8005994 <UART_SetConfig+0x38c>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005784:	441e      	add	r6, r3
 8005786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005788:	4618      	mov	r0, r3
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	1894      	adds	r4, r2, r2
 8005794:	623c      	str	r4, [r7, #32]
 8005796:	415b      	adcs	r3, r3
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800579e:	1812      	adds	r2, r2, r0
 80057a0:	eb41 0303 	adc.w	r3, r1, r3
 80057a4:	f04f 0400 	mov.w	r4, #0
 80057a8:	f04f 0500 	mov.w	r5, #0
 80057ac:	00dd      	lsls	r5, r3, #3
 80057ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057b2:	00d4      	lsls	r4, r2, #3
 80057b4:	4622      	mov	r2, r4
 80057b6:	462b      	mov	r3, r5
 80057b8:	1814      	adds	r4, r2, r0
 80057ba:	653c      	str	r4, [r7, #80]	; 0x50
 80057bc:	414b      	adcs	r3, r1
 80057be:	657b      	str	r3, [r7, #84]	; 0x54
 80057c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	461a      	mov	r2, r3
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	61b9      	str	r1, [r7, #24]
 80057ce:	415b      	adcs	r3, r3
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057da:	f7fb fa55 	bl	8000c88 <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4b6c      	ldr	r3, [pc, #432]	; (8005994 <UART_SetConfig+0x38c>)
 80057e4:	fba3 1302 	umull	r1, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	2164      	movs	r1, #100	; 0x64
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	3332      	adds	r3, #50	; 0x32
 80057f6:	4a67      	ldr	r2, [pc, #412]	; (8005994 <UART_SetConfig+0x38c>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	f003 0207 	and.w	r2, r3, #7
 8005802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4432      	add	r2, r6
 8005808:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800580a:	e0b9      	b.n	8005980 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800580c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580e:	461c      	mov	r4, r3
 8005810:	f04f 0500 	mov.w	r5, #0
 8005814:	4622      	mov	r2, r4
 8005816:	462b      	mov	r3, r5
 8005818:	1891      	adds	r1, r2, r2
 800581a:	6139      	str	r1, [r7, #16]
 800581c:	415b      	adcs	r3, r3
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005824:	1912      	adds	r2, r2, r4
 8005826:	eb45 0303 	adc.w	r3, r5, r3
 800582a:	f04f 0000 	mov.w	r0, #0
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	00d9      	lsls	r1, r3, #3
 8005834:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005838:	00d0      	lsls	r0, r2, #3
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	eb12 0804 	adds.w	r8, r2, r4
 8005842:	eb43 0905 	adc.w	r9, r3, r5
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4618      	mov	r0, r3
 800584c:	f04f 0100 	mov.w	r1, #0
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	008b      	lsls	r3, r1, #2
 800585a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800585e:	0082      	lsls	r2, r0, #2
 8005860:	4640      	mov	r0, r8
 8005862:	4649      	mov	r1, r9
 8005864:	f7fb fa10 	bl	8000c88 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b49      	ldr	r3, [pc, #292]	; (8005994 <UART_SetConfig+0x38c>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011e      	lsls	r6, r3, #4
 8005876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005878:	4618      	mov	r0, r3
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	4602      	mov	r2, r0
 8005880:	460b      	mov	r3, r1
 8005882:	1894      	adds	r4, r2, r2
 8005884:	60bc      	str	r4, [r7, #8]
 8005886:	415b      	adcs	r3, r3
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800588e:	1812      	adds	r2, r2, r0
 8005890:	eb41 0303 	adc.w	r3, r1, r3
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	f04f 0500 	mov.w	r5, #0
 800589c:	00dd      	lsls	r5, r3, #3
 800589e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a2:	00d4      	lsls	r4, r2, #3
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	1814      	adds	r4, r2, r0
 80058aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80058ac:	414b      	adcs	r3, r1
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	f04f 0200 	mov.w	r2, #0
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	008b      	lsls	r3, r1, #2
 80058c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058c8:	0082      	lsls	r2, r0, #2
 80058ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058ce:	f7fb f9db 	bl	8000c88 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b2f      	ldr	r3, [pc, #188]	; (8005994 <UART_SetConfig+0x38c>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	; 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	3332      	adds	r3, #50	; 0x32
 80058ea:	4a2a      	ldr	r2, [pc, #168]	; (8005994 <UART_SetConfig+0x38c>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f6:	441e      	add	r6, r3
 80058f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058fa:	4618      	mov	r0, r3
 80058fc:	f04f 0100 	mov.w	r1, #0
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	1894      	adds	r4, r2, r2
 8005906:	603c      	str	r4, [r7, #0]
 8005908:	415b      	adcs	r3, r3
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005910:	1812      	adds	r2, r2, r0
 8005912:	eb41 0303 	adc.w	r3, r1, r3
 8005916:	f04f 0400 	mov.w	r4, #0
 800591a:	f04f 0500 	mov.w	r5, #0
 800591e:	00dd      	lsls	r5, r3, #3
 8005920:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005924:	00d4      	lsls	r4, r2, #3
 8005926:	4622      	mov	r2, r4
 8005928:	462b      	mov	r3, r5
 800592a:	eb12 0a00 	adds.w	sl, r2, r0
 800592e:	eb43 0b01 	adc.w	fp, r3, r1
 8005932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4618      	mov	r0, r3
 8005938:	f04f 0100 	mov.w	r1, #0
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	008b      	lsls	r3, r1, #2
 8005946:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800594a:	0082      	lsls	r2, r0, #2
 800594c:	4650      	mov	r0, sl
 800594e:	4659      	mov	r1, fp
 8005950:	f7fb f99a 	bl	8000c88 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <UART_SetConfig+0x38c>)
 800595a:	fba3 1302 	umull	r1, r3, r3, r2
 800595e:	095b      	lsrs	r3, r3, #5
 8005960:	2164      	movs	r1, #100	; 0x64
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	3332      	adds	r3, #50	; 0x32
 800596c:	4a09      	ldr	r2, [pc, #36]	; (8005994 <UART_SetConfig+0x38c>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4432      	add	r2, r6
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	377c      	adds	r7, #124	; 0x7c
 8005984:	46bd      	mov	sp, r7
 8005986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598a:	bf00      	nop
 800598c:	40011000 	.word	0x40011000
 8005990:	40011400 	.word	0x40011400
 8005994:	51eb851f 	.word	0x51eb851f

08005998 <__errno>:
 8005998:	4b01      	ldr	r3, [pc, #4]	; (80059a0 <__errno+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000034 	.word	0x20000034

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	4d0d      	ldr	r5, [pc, #52]	; (80059dc <__libc_init_array+0x38>)
 80059a8:	4c0d      	ldr	r4, [pc, #52]	; (80059e0 <__libc_init_array+0x3c>)
 80059aa:	1b64      	subs	r4, r4, r5
 80059ac:	10a4      	asrs	r4, r4, #2
 80059ae:	2600      	movs	r6, #0
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	4d0b      	ldr	r5, [pc, #44]	; (80059e4 <__libc_init_array+0x40>)
 80059b6:	4c0c      	ldr	r4, [pc, #48]	; (80059e8 <__libc_init_array+0x44>)
 80059b8:	f004 fcd0 	bl	800a35c <_init>
 80059bc:	1b64      	subs	r4, r4, r5
 80059be:	10a4      	asrs	r4, r4, #2
 80059c0:	2600      	movs	r6, #0
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	0800a8b4 	.word	0x0800a8b4
 80059e0:	0800a8b4 	.word	0x0800a8b4
 80059e4:	0800a8b4 	.word	0x0800a8b4
 80059e8:	0800a8b8 	.word	0x0800a8b8

080059ec <memset>:
 80059ec:	4402      	add	r2, r0
 80059ee:	4603      	mov	r3, r0
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d100      	bne.n	80059f6 <memset+0xa>
 80059f4:	4770      	bx	lr
 80059f6:	f803 1b01 	strb.w	r1, [r3], #1
 80059fa:	e7f9      	b.n	80059f0 <memset+0x4>

080059fc <__cvt>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	ec55 4b10 	vmov	r4, r5, d0
 8005a04:	2d00      	cmp	r5, #0
 8005a06:	460e      	mov	r6, r1
 8005a08:	4619      	mov	r1, r3
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	bfbb      	ittet	lt
 8005a0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a12:	461d      	movlt	r5, r3
 8005a14:	2300      	movge	r3, #0
 8005a16:	232d      	movlt	r3, #45	; 0x2d
 8005a18:	700b      	strb	r3, [r1, #0]
 8005a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a20:	4691      	mov	r9, r2
 8005a22:	f023 0820 	bic.w	r8, r3, #32
 8005a26:	bfbc      	itt	lt
 8005a28:	4622      	movlt	r2, r4
 8005a2a:	4614      	movlt	r4, r2
 8005a2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a30:	d005      	beq.n	8005a3e <__cvt+0x42>
 8005a32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a36:	d100      	bne.n	8005a3a <__cvt+0x3e>
 8005a38:	3601      	adds	r6, #1
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	e000      	b.n	8005a40 <__cvt+0x44>
 8005a3e:	2103      	movs	r1, #3
 8005a40:	ab03      	add	r3, sp, #12
 8005a42:	9301      	str	r3, [sp, #4]
 8005a44:	ab02      	add	r3, sp, #8
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	ec45 4b10 	vmov	d0, r4, r5
 8005a4c:	4653      	mov	r3, sl
 8005a4e:	4632      	mov	r2, r6
 8005a50:	f001 ff02 	bl	8007858 <_dtoa_r>
 8005a54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a58:	4607      	mov	r7, r0
 8005a5a:	d102      	bne.n	8005a62 <__cvt+0x66>
 8005a5c:	f019 0f01 	tst.w	r9, #1
 8005a60:	d022      	beq.n	8005aa8 <__cvt+0xac>
 8005a62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a66:	eb07 0906 	add.w	r9, r7, r6
 8005a6a:	d110      	bne.n	8005a8e <__cvt+0x92>
 8005a6c:	783b      	ldrb	r3, [r7, #0]
 8005a6e:	2b30      	cmp	r3, #48	; 0x30
 8005a70:	d10a      	bne.n	8005a88 <__cvt+0x8c>
 8005a72:	2200      	movs	r2, #0
 8005a74:	2300      	movs	r3, #0
 8005a76:	4620      	mov	r0, r4
 8005a78:	4629      	mov	r1, r5
 8005a7a:	f7fb f825 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a7e:	b918      	cbnz	r0, 8005a88 <__cvt+0x8c>
 8005a80:	f1c6 0601 	rsb	r6, r6, #1
 8005a84:	f8ca 6000 	str.w	r6, [sl]
 8005a88:	f8da 3000 	ldr.w	r3, [sl]
 8005a8c:	4499      	add	r9, r3
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	f7fb f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a9a:	b108      	cbz	r0, 8005aa0 <__cvt+0xa4>
 8005a9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005aa0:	2230      	movs	r2, #48	; 0x30
 8005aa2:	9b03      	ldr	r3, [sp, #12]
 8005aa4:	454b      	cmp	r3, r9
 8005aa6:	d307      	bcc.n	8005ab8 <__cvt+0xbc>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aac:	1bdb      	subs	r3, r3, r7
 8005aae:	4638      	mov	r0, r7
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	b004      	add	sp, #16
 8005ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab8:	1c59      	adds	r1, r3, #1
 8005aba:	9103      	str	r1, [sp, #12]
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e7f0      	b.n	8005aa2 <__cvt+0xa6>

08005ac0 <__exponent>:
 8005ac0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2900      	cmp	r1, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	4249      	neglt	r1, r1
 8005aca:	f803 2b02 	strb.w	r2, [r3], #2
 8005ace:	bfb4      	ite	lt
 8005ad0:	222d      	movlt	r2, #45	; 0x2d
 8005ad2:	222b      	movge	r2, #43	; 0x2b
 8005ad4:	2909      	cmp	r1, #9
 8005ad6:	7042      	strb	r2, [r0, #1]
 8005ad8:	dd2a      	ble.n	8005b30 <__exponent+0x70>
 8005ada:	f10d 0407 	add.w	r4, sp, #7
 8005ade:	46a4      	mov	ip, r4
 8005ae0:	270a      	movs	r7, #10
 8005ae2:	46a6      	mov	lr, r4
 8005ae4:	460a      	mov	r2, r1
 8005ae6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005aea:	fb07 1516 	mls	r5, r7, r6, r1
 8005aee:	3530      	adds	r5, #48	; 0x30
 8005af0:	2a63      	cmp	r2, #99	; 0x63
 8005af2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005af6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005afa:	4631      	mov	r1, r6
 8005afc:	dcf1      	bgt.n	8005ae2 <__exponent+0x22>
 8005afe:	3130      	adds	r1, #48	; 0x30
 8005b00:	f1ae 0502 	sub.w	r5, lr, #2
 8005b04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b08:	1c44      	adds	r4, r0, #1
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	4561      	cmp	r1, ip
 8005b0e:	d30a      	bcc.n	8005b26 <__exponent+0x66>
 8005b10:	f10d 0209 	add.w	r2, sp, #9
 8005b14:	eba2 020e 	sub.w	r2, r2, lr
 8005b18:	4565      	cmp	r5, ip
 8005b1a:	bf88      	it	hi
 8005b1c:	2200      	movhi	r2, #0
 8005b1e:	4413      	add	r3, r2
 8005b20:	1a18      	subs	r0, r3, r0
 8005b22:	b003      	add	sp, #12
 8005b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b2e:	e7ed      	b.n	8005b0c <__exponent+0x4c>
 8005b30:	2330      	movs	r3, #48	; 0x30
 8005b32:	3130      	adds	r1, #48	; 0x30
 8005b34:	7083      	strb	r3, [r0, #2]
 8005b36:	70c1      	strb	r1, [r0, #3]
 8005b38:	1d03      	adds	r3, r0, #4
 8005b3a:	e7f1      	b.n	8005b20 <__exponent+0x60>

08005b3c <_printf_float>:
 8005b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	ed2d 8b02 	vpush	{d8}
 8005b44:	b08d      	sub	sp, #52	; 0x34
 8005b46:	460c      	mov	r4, r1
 8005b48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b4c:	4616      	mov	r6, r2
 8005b4e:	461f      	mov	r7, r3
 8005b50:	4605      	mov	r5, r0
 8005b52:	f003 f993 	bl	8008e7c <_localeconv_r>
 8005b56:	f8d0 a000 	ldr.w	sl, [r0]
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	f7fa fb38 	bl	80001d0 <strlen>
 8005b60:	2300      	movs	r3, #0
 8005b62:	930a      	str	r3, [sp, #40]	; 0x28
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	9305      	str	r3, [sp, #20]
 8005b68:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b70:	3307      	adds	r3, #7
 8005b72:	f023 0307 	bic.w	r3, r3, #7
 8005b76:	f103 0208 	add.w	r2, r3, #8
 8005b7a:	f8c8 2000 	str.w	r2, [r8]
 8005b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005b86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005b8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005b8e:	9307      	str	r3, [sp, #28]
 8005b90:	f8cd 8018 	str.w	r8, [sp, #24]
 8005b94:	ee08 0a10 	vmov	s16, r0
 8005b98:	4b9f      	ldr	r3, [pc, #636]	; (8005e18 <_printf_float+0x2dc>)
 8005b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba2:	f7fa ffc3 	bl	8000b2c <__aeabi_dcmpun>
 8005ba6:	bb88      	cbnz	r0, 8005c0c <_printf_float+0xd0>
 8005ba8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bac:	4b9a      	ldr	r3, [pc, #616]	; (8005e18 <_printf_float+0x2dc>)
 8005bae:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb2:	f7fa ff9d 	bl	8000af0 <__aeabi_dcmple>
 8005bb6:	bb48      	cbnz	r0, 8005c0c <_printf_float+0xd0>
 8005bb8:	2200      	movs	r2, #0
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	f7fa ff8c 	bl	8000adc <__aeabi_dcmplt>
 8005bc4:	b110      	cbz	r0, 8005bcc <_printf_float+0x90>
 8005bc6:	232d      	movs	r3, #45	; 0x2d
 8005bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bcc:	4b93      	ldr	r3, [pc, #588]	; (8005e1c <_printf_float+0x2e0>)
 8005bce:	4894      	ldr	r0, [pc, #592]	; (8005e20 <_printf_float+0x2e4>)
 8005bd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bd4:	bf94      	ite	ls
 8005bd6:	4698      	movls	r8, r3
 8005bd8:	4680      	movhi	r8, r0
 8005bda:	2303      	movs	r3, #3
 8005bdc:	6123      	str	r3, [r4, #16]
 8005bde:	9b05      	ldr	r3, [sp, #20]
 8005be0:	f023 0204 	bic.w	r2, r3, #4
 8005be4:	6022      	str	r2, [r4, #0]
 8005be6:	f04f 0900 	mov.w	r9, #0
 8005bea:	9700      	str	r7, [sp, #0]
 8005bec:	4633      	mov	r3, r6
 8005bee:	aa0b      	add	r2, sp, #44	; 0x2c
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	f000 f9d8 	bl	8005fa8 <_printf_common>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f040 8090 	bne.w	8005d1e <_printf_float+0x1e2>
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	b00d      	add	sp, #52	; 0x34
 8005c04:	ecbd 8b02 	vpop	{d8}
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4640      	mov	r0, r8
 8005c12:	4649      	mov	r1, r9
 8005c14:	f7fa ff8a 	bl	8000b2c <__aeabi_dcmpun>
 8005c18:	b140      	cbz	r0, 8005c2c <_printf_float+0xf0>
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfbc      	itt	lt
 8005c20:	232d      	movlt	r3, #45	; 0x2d
 8005c22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c26:	487f      	ldr	r0, [pc, #508]	; (8005e24 <_printf_float+0x2e8>)
 8005c28:	4b7f      	ldr	r3, [pc, #508]	; (8005e28 <_printf_float+0x2ec>)
 8005c2a:	e7d1      	b.n	8005bd0 <_printf_float+0x94>
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c32:	9206      	str	r2, [sp, #24]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	d13f      	bne.n	8005cb8 <_printf_float+0x17c>
 8005c38:	2306      	movs	r3, #6
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	9b05      	ldr	r3, [sp, #20]
 8005c3e:	6861      	ldr	r1, [r4, #4]
 8005c40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c44:	2300      	movs	r3, #0
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	ab0a      	add	r3, sp, #40	; 0x28
 8005c4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c4e:	ab09      	add	r3, sp, #36	; 0x24
 8005c50:	ec49 8b10 	vmov	d0, r8, r9
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	6022      	str	r2, [r4, #0]
 8005c58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f7ff fecd 	bl	80059fc <__cvt>
 8005c62:	9b06      	ldr	r3, [sp, #24]
 8005c64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c66:	2b47      	cmp	r3, #71	; 0x47
 8005c68:	4680      	mov	r8, r0
 8005c6a:	d108      	bne.n	8005c7e <_printf_float+0x142>
 8005c6c:	1cc8      	adds	r0, r1, #3
 8005c6e:	db02      	blt.n	8005c76 <_printf_float+0x13a>
 8005c70:	6863      	ldr	r3, [r4, #4]
 8005c72:	4299      	cmp	r1, r3
 8005c74:	dd41      	ble.n	8005cfa <_printf_float+0x1be>
 8005c76:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c7a:	fa5f fb8b 	uxtb.w	fp, fp
 8005c7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c82:	d820      	bhi.n	8005cc6 <_printf_float+0x18a>
 8005c84:	3901      	subs	r1, #1
 8005c86:	465a      	mov	r2, fp
 8005c88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005c8c:	9109      	str	r1, [sp, #36]	; 0x24
 8005c8e:	f7ff ff17 	bl	8005ac0 <__exponent>
 8005c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c94:	1813      	adds	r3, r2, r0
 8005c96:	2a01      	cmp	r2, #1
 8005c98:	4681      	mov	r9, r0
 8005c9a:	6123      	str	r3, [r4, #16]
 8005c9c:	dc02      	bgt.n	8005ca4 <_printf_float+0x168>
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	07d2      	lsls	r2, r2, #31
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_float+0x16c>
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d09c      	beq.n	8005bea <_printf_float+0xae>
 8005cb0:	232d      	movs	r3, #45	; 0x2d
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb6:	e798      	b.n	8005bea <_printf_float+0xae>
 8005cb8:	9a06      	ldr	r2, [sp, #24]
 8005cba:	2a47      	cmp	r2, #71	; 0x47
 8005cbc:	d1be      	bne.n	8005c3c <_printf_float+0x100>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1bc      	bne.n	8005c3c <_printf_float+0x100>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e7b9      	b.n	8005c3a <_printf_float+0xfe>
 8005cc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cca:	d118      	bne.n	8005cfe <_printf_float+0x1c2>
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	dd0b      	ble.n	8005cea <_printf_float+0x1ae>
 8005cd2:	6121      	str	r1, [r4, #16]
 8005cd4:	b913      	cbnz	r3, 8005cdc <_printf_float+0x1a0>
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	07d0      	lsls	r0, r2, #31
 8005cda:	d502      	bpl.n	8005ce2 <_printf_float+0x1a6>
 8005cdc:	3301      	adds	r3, #1
 8005cde:	440b      	add	r3, r1
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ce4:	f04f 0900 	mov.w	r9, #0
 8005ce8:	e7de      	b.n	8005ca8 <_printf_float+0x16c>
 8005cea:	b913      	cbnz	r3, 8005cf2 <_printf_float+0x1b6>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	07d2      	lsls	r2, r2, #31
 8005cf0:	d501      	bpl.n	8005cf6 <_printf_float+0x1ba>
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	e7f4      	b.n	8005ce0 <_printf_float+0x1a4>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e7f2      	b.n	8005ce0 <_printf_float+0x1a4>
 8005cfa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	4299      	cmp	r1, r3
 8005d02:	db05      	blt.n	8005d10 <_printf_float+0x1d4>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	6121      	str	r1, [r4, #16]
 8005d08:	07d8      	lsls	r0, r3, #31
 8005d0a:	d5ea      	bpl.n	8005ce2 <_printf_float+0x1a6>
 8005d0c:	1c4b      	adds	r3, r1, #1
 8005d0e:	e7e7      	b.n	8005ce0 <_printf_float+0x1a4>
 8005d10:	2900      	cmp	r1, #0
 8005d12:	bfd4      	ite	le
 8005d14:	f1c1 0202 	rsble	r2, r1, #2
 8005d18:	2201      	movgt	r2, #1
 8005d1a:	4413      	add	r3, r2
 8005d1c:	e7e0      	b.n	8005ce0 <_printf_float+0x1a4>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	055a      	lsls	r2, r3, #21
 8005d22:	d407      	bmi.n	8005d34 <_printf_float+0x1f8>
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	4642      	mov	r2, r8
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d12c      	bne.n	8005d8c <_printf_float+0x250>
 8005d32:	e764      	b.n	8005bfe <_printf_float+0xc2>
 8005d34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d38:	f240 80e0 	bls.w	8005efc <_printf_float+0x3c0>
 8005d3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d40:	2200      	movs	r2, #0
 8005d42:	2300      	movs	r3, #0
 8005d44:	f7fa fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d034      	beq.n	8005db6 <_printf_float+0x27a>
 8005d4c:	4a37      	ldr	r2, [pc, #220]	; (8005e2c <_printf_float+0x2f0>)
 8005d4e:	2301      	movs	r3, #1
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	f43f af51 	beq.w	8005bfe <_printf_float+0xc2>
 8005d5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d60:	429a      	cmp	r2, r3
 8005d62:	db02      	blt.n	8005d6a <_printf_float+0x22e>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	07d8      	lsls	r0, r3, #31
 8005d68:	d510      	bpl.n	8005d8c <_printf_float+0x250>
 8005d6a:	ee18 3a10 	vmov	r3, s16
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af41 	beq.w	8005bfe <_printf_float+0xc2>
 8005d7c:	f04f 0800 	mov.w	r8, #0
 8005d80:	f104 091a 	add.w	r9, r4, #26
 8005d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d86:	3b01      	subs	r3, #1
 8005d88:	4543      	cmp	r3, r8
 8005d8a:	dc09      	bgt.n	8005da0 <_printf_float+0x264>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	079b      	lsls	r3, r3, #30
 8005d90:	f100 8105 	bmi.w	8005f9e <_printf_float+0x462>
 8005d94:	68e0      	ldr	r0, [r4, #12]
 8005d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d98:	4298      	cmp	r0, r3
 8005d9a:	bfb8      	it	lt
 8005d9c:	4618      	movlt	r0, r3
 8005d9e:	e730      	b.n	8005c02 <_printf_float+0xc6>
 8005da0:	2301      	movs	r3, #1
 8005da2:	464a      	mov	r2, r9
 8005da4:	4631      	mov	r1, r6
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b8      	blx	r7
 8005daa:	3001      	adds	r0, #1
 8005dac:	f43f af27 	beq.w	8005bfe <_printf_float+0xc2>
 8005db0:	f108 0801 	add.w	r8, r8, #1
 8005db4:	e7e6      	b.n	8005d84 <_printf_float+0x248>
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	dc39      	bgt.n	8005e30 <_printf_float+0x2f4>
 8005dbc:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <_printf_float+0x2f0>)
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f43f af19 	beq.w	8005bfe <_printf_float+0xc2>
 8005dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d102      	bne.n	8005dda <_printf_float+0x29e>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	07d9      	lsls	r1, r3, #31
 8005dd8:	d5d8      	bpl.n	8005d8c <_printf_float+0x250>
 8005dda:	ee18 3a10 	vmov	r3, s16
 8005dde:	4652      	mov	r2, sl
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af09 	beq.w	8005bfe <_printf_float+0xc2>
 8005dec:	f04f 0900 	mov.w	r9, #0
 8005df0:	f104 0a1a 	add.w	sl, r4, #26
 8005df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df6:	425b      	negs	r3, r3
 8005df8:	454b      	cmp	r3, r9
 8005dfa:	dc01      	bgt.n	8005e00 <_printf_float+0x2c4>
 8005dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfe:	e792      	b.n	8005d26 <_printf_float+0x1ea>
 8005e00:	2301      	movs	r3, #1
 8005e02:	4652      	mov	r2, sl
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f aef7 	beq.w	8005bfe <_printf_float+0xc2>
 8005e10:	f109 0901 	add.w	r9, r9, #1
 8005e14:	e7ee      	b.n	8005df4 <_printf_float+0x2b8>
 8005e16:	bf00      	nop
 8005e18:	7fefffff 	.word	0x7fefffff
 8005e1c:	0800a3fc 	.word	0x0800a3fc
 8005e20:	0800a400 	.word	0x0800a400
 8005e24:	0800a408 	.word	0x0800a408
 8005e28:	0800a404 	.word	0x0800a404
 8005e2c:	0800a40c 	.word	0x0800a40c
 8005e30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e34:	429a      	cmp	r2, r3
 8005e36:	bfa8      	it	ge
 8005e38:	461a      	movge	r2, r3
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	dc37      	bgt.n	8005eb0 <_printf_float+0x374>
 8005e40:	f04f 0b00 	mov.w	fp, #0
 8005e44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e48:	f104 021a 	add.w	r2, r4, #26
 8005e4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e4e:	9305      	str	r3, [sp, #20]
 8005e50:	eba3 0309 	sub.w	r3, r3, r9
 8005e54:	455b      	cmp	r3, fp
 8005e56:	dc33      	bgt.n	8005ec0 <_printf_float+0x384>
 8005e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	db3b      	blt.n	8005ed8 <_printf_float+0x39c>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	07da      	lsls	r2, r3, #31
 8005e64:	d438      	bmi.n	8005ed8 <_printf_float+0x39c>
 8005e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	eba2 0901 	sub.w	r9, r2, r1
 8005e72:	4599      	cmp	r9, r3
 8005e74:	bfa8      	it	ge
 8005e76:	4699      	movge	r9, r3
 8005e78:	f1b9 0f00 	cmp.w	r9, #0
 8005e7c:	dc35      	bgt.n	8005eea <_printf_float+0x3ae>
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e86:	f104 0a1a 	add.w	sl, r4, #26
 8005e8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	eba3 0309 	sub.w	r3, r3, r9
 8005e94:	4543      	cmp	r3, r8
 8005e96:	f77f af79 	ble.w	8005d8c <_printf_float+0x250>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4652      	mov	r2, sl
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f aeaa 	beq.w	8005bfe <_printf_float+0xc2>
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	e7ec      	b.n	8005e8a <_printf_float+0x34e>
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	47b8      	blx	r7
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d1c0      	bne.n	8005e40 <_printf_float+0x304>
 8005ebe:	e69e      	b.n	8005bfe <_printf_float+0xc2>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	9205      	str	r2, [sp, #20]
 8005ec8:	47b8      	blx	r7
 8005eca:	3001      	adds	r0, #1
 8005ecc:	f43f ae97 	beq.w	8005bfe <_printf_float+0xc2>
 8005ed0:	9a05      	ldr	r2, [sp, #20]
 8005ed2:	f10b 0b01 	add.w	fp, fp, #1
 8005ed6:	e7b9      	b.n	8005e4c <_printf_float+0x310>
 8005ed8:	ee18 3a10 	vmov	r3, s16
 8005edc:	4652      	mov	r2, sl
 8005ede:	4631      	mov	r1, r6
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	47b8      	blx	r7
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d1be      	bne.n	8005e66 <_printf_float+0x32a>
 8005ee8:	e689      	b.n	8005bfe <_printf_float+0xc2>
 8005eea:	9a05      	ldr	r2, [sp, #20]
 8005eec:	464b      	mov	r3, r9
 8005eee:	4442      	add	r2, r8
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d1c1      	bne.n	8005e7e <_printf_float+0x342>
 8005efa:	e680      	b.n	8005bfe <_printf_float+0xc2>
 8005efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005efe:	2a01      	cmp	r2, #1
 8005f00:	dc01      	bgt.n	8005f06 <_printf_float+0x3ca>
 8005f02:	07db      	lsls	r3, r3, #31
 8005f04:	d538      	bpl.n	8005f78 <_printf_float+0x43c>
 8005f06:	2301      	movs	r3, #1
 8005f08:	4642      	mov	r2, r8
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	47b8      	blx	r7
 8005f10:	3001      	adds	r0, #1
 8005f12:	f43f ae74 	beq.w	8005bfe <_printf_float+0xc2>
 8005f16:	ee18 3a10 	vmov	r3, s16
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	47b8      	blx	r7
 8005f22:	3001      	adds	r0, #1
 8005f24:	f43f ae6b 	beq.w	8005bfe <_printf_float+0xc2>
 8005f28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f7fa fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f34:	b9d8      	cbnz	r0, 8005f6e <_printf_float+0x432>
 8005f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f38:	f108 0201 	add.w	r2, r8, #1
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d10e      	bne.n	8005f66 <_printf_float+0x42a>
 8005f48:	e659      	b.n	8005bfe <_printf_float+0xc2>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	4631      	mov	r1, r6
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b8      	blx	r7
 8005f54:	3001      	adds	r0, #1
 8005f56:	f43f ae52 	beq.w	8005bfe <_printf_float+0xc2>
 8005f5a:	f108 0801 	add.w	r8, r8, #1
 8005f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f60:	3b01      	subs	r3, #1
 8005f62:	4543      	cmp	r3, r8
 8005f64:	dcf1      	bgt.n	8005f4a <_printf_float+0x40e>
 8005f66:	464b      	mov	r3, r9
 8005f68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f6c:	e6dc      	b.n	8005d28 <_printf_float+0x1ec>
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	f104 0a1a 	add.w	sl, r4, #26
 8005f76:	e7f2      	b.n	8005f5e <_printf_float+0x422>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	e7df      	b.n	8005f3e <_printf_float+0x402>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	464a      	mov	r2, r9
 8005f82:	4631      	mov	r1, r6
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b8      	blx	r7
 8005f88:	3001      	adds	r0, #1
 8005f8a:	f43f ae38 	beq.w	8005bfe <_printf_float+0xc2>
 8005f8e:	f108 0801 	add.w	r8, r8, #1
 8005f92:	68e3      	ldr	r3, [r4, #12]
 8005f94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f96:	1a5b      	subs	r3, r3, r1
 8005f98:	4543      	cmp	r3, r8
 8005f9a:	dcf0      	bgt.n	8005f7e <_printf_float+0x442>
 8005f9c:	e6fa      	b.n	8005d94 <_printf_float+0x258>
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	f104 0919 	add.w	r9, r4, #25
 8005fa6:	e7f4      	b.n	8005f92 <_printf_float+0x456>

08005fa8 <_printf_common>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	4616      	mov	r6, r2
 8005fae:	4699      	mov	r9, r3
 8005fb0:	688a      	ldr	r2, [r1, #8]
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	bfb8      	it	lt
 8005fbc:	4613      	movlt	r3, r2
 8005fbe:	6033      	str	r3, [r6, #0]
 8005fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fc4:	4607      	mov	r7, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b10a      	cbz	r2, 8005fce <_printf_common+0x26>
 8005fca:	3301      	adds	r3, #1
 8005fcc:	6033      	str	r3, [r6, #0]
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	0699      	lsls	r1, r3, #26
 8005fd2:	bf42      	ittt	mi
 8005fd4:	6833      	ldrmi	r3, [r6, #0]
 8005fd6:	3302      	addmi	r3, #2
 8005fd8:	6033      	strmi	r3, [r6, #0]
 8005fda:	6825      	ldr	r5, [r4, #0]
 8005fdc:	f015 0506 	ands.w	r5, r5, #6
 8005fe0:	d106      	bne.n	8005ff0 <_printf_common+0x48>
 8005fe2:	f104 0a19 	add.w	sl, r4, #25
 8005fe6:	68e3      	ldr	r3, [r4, #12]
 8005fe8:	6832      	ldr	r2, [r6, #0]
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	42ab      	cmp	r3, r5
 8005fee:	dc26      	bgt.n	800603e <_printf_common+0x96>
 8005ff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ff4:	1e13      	subs	r3, r2, #0
 8005ff6:	6822      	ldr	r2, [r4, #0]
 8005ff8:	bf18      	it	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	0692      	lsls	r2, r2, #26
 8005ffe:	d42b      	bmi.n	8006058 <_printf_common+0xb0>
 8006000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006004:	4649      	mov	r1, r9
 8006006:	4638      	mov	r0, r7
 8006008:	47c0      	blx	r8
 800600a:	3001      	adds	r0, #1
 800600c:	d01e      	beq.n	800604c <_printf_common+0xa4>
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	68e5      	ldr	r5, [r4, #12]
 8006012:	6832      	ldr	r2, [r6, #0]
 8006014:	f003 0306 	and.w	r3, r3, #6
 8006018:	2b04      	cmp	r3, #4
 800601a:	bf08      	it	eq
 800601c:	1aad      	subeq	r5, r5, r2
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	6922      	ldr	r2, [r4, #16]
 8006022:	bf0c      	ite	eq
 8006024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006028:	2500      	movne	r5, #0
 800602a:	4293      	cmp	r3, r2
 800602c:	bfc4      	itt	gt
 800602e:	1a9b      	subgt	r3, r3, r2
 8006030:	18ed      	addgt	r5, r5, r3
 8006032:	2600      	movs	r6, #0
 8006034:	341a      	adds	r4, #26
 8006036:	42b5      	cmp	r5, r6
 8006038:	d11a      	bne.n	8006070 <_printf_common+0xc8>
 800603a:	2000      	movs	r0, #0
 800603c:	e008      	b.n	8006050 <_printf_common+0xa8>
 800603e:	2301      	movs	r3, #1
 8006040:	4652      	mov	r2, sl
 8006042:	4649      	mov	r1, r9
 8006044:	4638      	mov	r0, r7
 8006046:	47c0      	blx	r8
 8006048:	3001      	adds	r0, #1
 800604a:	d103      	bne.n	8006054 <_printf_common+0xac>
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006054:	3501      	adds	r5, #1
 8006056:	e7c6      	b.n	8005fe6 <_printf_common+0x3e>
 8006058:	18e1      	adds	r1, r4, r3
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	2030      	movs	r0, #48	; 0x30
 800605e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006062:	4422      	add	r2, r4
 8006064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800606c:	3302      	adds	r3, #2
 800606e:	e7c7      	b.n	8006000 <_printf_common+0x58>
 8006070:	2301      	movs	r3, #1
 8006072:	4622      	mov	r2, r4
 8006074:	4649      	mov	r1, r9
 8006076:	4638      	mov	r0, r7
 8006078:	47c0      	blx	r8
 800607a:	3001      	adds	r0, #1
 800607c:	d0e6      	beq.n	800604c <_printf_common+0xa4>
 800607e:	3601      	adds	r6, #1
 8006080:	e7d9      	b.n	8006036 <_printf_common+0x8e>
	...

08006084 <_printf_i>:
 8006084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	460c      	mov	r4, r1
 800608a:	4691      	mov	r9, r2
 800608c:	7e27      	ldrb	r7, [r4, #24]
 800608e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006090:	2f78      	cmp	r7, #120	; 0x78
 8006092:	4680      	mov	r8, r0
 8006094:	469a      	mov	sl, r3
 8006096:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800609a:	d807      	bhi.n	80060ac <_printf_i+0x28>
 800609c:	2f62      	cmp	r7, #98	; 0x62
 800609e:	d80a      	bhi.n	80060b6 <_printf_i+0x32>
 80060a0:	2f00      	cmp	r7, #0
 80060a2:	f000 80d8 	beq.w	8006256 <_printf_i+0x1d2>
 80060a6:	2f58      	cmp	r7, #88	; 0x58
 80060a8:	f000 80a3 	beq.w	80061f2 <_printf_i+0x16e>
 80060ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060b4:	e03a      	b.n	800612c <_printf_i+0xa8>
 80060b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060ba:	2b15      	cmp	r3, #21
 80060bc:	d8f6      	bhi.n	80060ac <_printf_i+0x28>
 80060be:	a001      	add	r0, pc, #4	; (adr r0, 80060c4 <_printf_i+0x40>)
 80060c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	08006131 	.word	0x08006131
 80060cc:	080060ad 	.word	0x080060ad
 80060d0:	080060ad 	.word	0x080060ad
 80060d4:	080060ad 	.word	0x080060ad
 80060d8:	080060ad 	.word	0x080060ad
 80060dc:	08006131 	.word	0x08006131
 80060e0:	080060ad 	.word	0x080060ad
 80060e4:	080060ad 	.word	0x080060ad
 80060e8:	080060ad 	.word	0x080060ad
 80060ec:	080060ad 	.word	0x080060ad
 80060f0:	0800623d 	.word	0x0800623d
 80060f4:	08006161 	.word	0x08006161
 80060f8:	0800621f 	.word	0x0800621f
 80060fc:	080060ad 	.word	0x080060ad
 8006100:	080060ad 	.word	0x080060ad
 8006104:	0800625f 	.word	0x0800625f
 8006108:	080060ad 	.word	0x080060ad
 800610c:	08006161 	.word	0x08006161
 8006110:	080060ad 	.word	0x080060ad
 8006114:	080060ad 	.word	0x080060ad
 8006118:	08006227 	.word	0x08006227
 800611c:	680b      	ldr	r3, [r1, #0]
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	600a      	str	r2, [r1, #0]
 8006124:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800612c:	2301      	movs	r3, #1
 800612e:	e0a3      	b.n	8006278 <_printf_i+0x1f4>
 8006130:	6825      	ldr	r5, [r4, #0]
 8006132:	6808      	ldr	r0, [r1, #0]
 8006134:	062e      	lsls	r6, r5, #24
 8006136:	f100 0304 	add.w	r3, r0, #4
 800613a:	d50a      	bpl.n	8006152 <_printf_i+0xce>
 800613c:	6805      	ldr	r5, [r0, #0]
 800613e:	600b      	str	r3, [r1, #0]
 8006140:	2d00      	cmp	r5, #0
 8006142:	da03      	bge.n	800614c <_printf_i+0xc8>
 8006144:	232d      	movs	r3, #45	; 0x2d
 8006146:	426d      	negs	r5, r5
 8006148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800614c:	485e      	ldr	r0, [pc, #376]	; (80062c8 <_printf_i+0x244>)
 800614e:	230a      	movs	r3, #10
 8006150:	e019      	b.n	8006186 <_printf_i+0x102>
 8006152:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006156:	6805      	ldr	r5, [r0, #0]
 8006158:	600b      	str	r3, [r1, #0]
 800615a:	bf18      	it	ne
 800615c:	b22d      	sxthne	r5, r5
 800615e:	e7ef      	b.n	8006140 <_printf_i+0xbc>
 8006160:	680b      	ldr	r3, [r1, #0]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	1d18      	adds	r0, r3, #4
 8006166:	6008      	str	r0, [r1, #0]
 8006168:	0628      	lsls	r0, r5, #24
 800616a:	d501      	bpl.n	8006170 <_printf_i+0xec>
 800616c:	681d      	ldr	r5, [r3, #0]
 800616e:	e002      	b.n	8006176 <_printf_i+0xf2>
 8006170:	0669      	lsls	r1, r5, #25
 8006172:	d5fb      	bpl.n	800616c <_printf_i+0xe8>
 8006174:	881d      	ldrh	r5, [r3, #0]
 8006176:	4854      	ldr	r0, [pc, #336]	; (80062c8 <_printf_i+0x244>)
 8006178:	2f6f      	cmp	r7, #111	; 0x6f
 800617a:	bf0c      	ite	eq
 800617c:	2308      	moveq	r3, #8
 800617e:	230a      	movne	r3, #10
 8006180:	2100      	movs	r1, #0
 8006182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006186:	6866      	ldr	r6, [r4, #4]
 8006188:	60a6      	str	r6, [r4, #8]
 800618a:	2e00      	cmp	r6, #0
 800618c:	bfa2      	ittt	ge
 800618e:	6821      	ldrge	r1, [r4, #0]
 8006190:	f021 0104 	bicge.w	r1, r1, #4
 8006194:	6021      	strge	r1, [r4, #0]
 8006196:	b90d      	cbnz	r5, 800619c <_printf_i+0x118>
 8006198:	2e00      	cmp	r6, #0
 800619a:	d04d      	beq.n	8006238 <_printf_i+0x1b4>
 800619c:	4616      	mov	r6, r2
 800619e:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a2:	fb03 5711 	mls	r7, r3, r1, r5
 80061a6:	5dc7      	ldrb	r7, [r0, r7]
 80061a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061ac:	462f      	mov	r7, r5
 80061ae:	42bb      	cmp	r3, r7
 80061b0:	460d      	mov	r5, r1
 80061b2:	d9f4      	bls.n	800619e <_printf_i+0x11a>
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d10b      	bne.n	80061d0 <_printf_i+0x14c>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	07df      	lsls	r7, r3, #31
 80061bc:	d508      	bpl.n	80061d0 <_printf_i+0x14c>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	4299      	cmp	r1, r3
 80061c4:	bfde      	ittt	le
 80061c6:	2330      	movle	r3, #48	; 0x30
 80061c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d0:	1b92      	subs	r2, r2, r6
 80061d2:	6122      	str	r2, [r4, #16]
 80061d4:	f8cd a000 	str.w	sl, [sp]
 80061d8:	464b      	mov	r3, r9
 80061da:	aa03      	add	r2, sp, #12
 80061dc:	4621      	mov	r1, r4
 80061de:	4640      	mov	r0, r8
 80061e0:	f7ff fee2 	bl	8005fa8 <_printf_common>
 80061e4:	3001      	adds	r0, #1
 80061e6:	d14c      	bne.n	8006282 <_printf_i+0x1fe>
 80061e8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ec:	b004      	add	sp, #16
 80061ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f2:	4835      	ldr	r0, [pc, #212]	; (80062c8 <_printf_i+0x244>)
 80061f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	680e      	ldr	r6, [r1, #0]
 80061fc:	061f      	lsls	r7, r3, #24
 80061fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006202:	600e      	str	r6, [r1, #0]
 8006204:	d514      	bpl.n	8006230 <_printf_i+0x1ac>
 8006206:	07d9      	lsls	r1, r3, #31
 8006208:	bf44      	itt	mi
 800620a:	f043 0320 	orrmi.w	r3, r3, #32
 800620e:	6023      	strmi	r3, [r4, #0]
 8006210:	b91d      	cbnz	r5, 800621a <_printf_i+0x196>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	f023 0320 	bic.w	r3, r3, #32
 8006218:	6023      	str	r3, [r4, #0]
 800621a:	2310      	movs	r3, #16
 800621c:	e7b0      	b.n	8006180 <_printf_i+0xfc>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	2378      	movs	r3, #120	; 0x78
 8006228:	4828      	ldr	r0, [pc, #160]	; (80062cc <_printf_i+0x248>)
 800622a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800622e:	e7e3      	b.n	80061f8 <_printf_i+0x174>
 8006230:	065e      	lsls	r6, r3, #25
 8006232:	bf48      	it	mi
 8006234:	b2ad      	uxthmi	r5, r5
 8006236:	e7e6      	b.n	8006206 <_printf_i+0x182>
 8006238:	4616      	mov	r6, r2
 800623a:	e7bb      	b.n	80061b4 <_printf_i+0x130>
 800623c:	680b      	ldr	r3, [r1, #0]
 800623e:	6826      	ldr	r6, [r4, #0]
 8006240:	6960      	ldr	r0, [r4, #20]
 8006242:	1d1d      	adds	r5, r3, #4
 8006244:	600d      	str	r5, [r1, #0]
 8006246:	0635      	lsls	r5, r6, #24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	d501      	bpl.n	8006250 <_printf_i+0x1cc>
 800624c:	6018      	str	r0, [r3, #0]
 800624e:	e002      	b.n	8006256 <_printf_i+0x1d2>
 8006250:	0671      	lsls	r1, r6, #25
 8006252:	d5fb      	bpl.n	800624c <_printf_i+0x1c8>
 8006254:	8018      	strh	r0, [r3, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	4616      	mov	r6, r2
 800625c:	e7ba      	b.n	80061d4 <_printf_i+0x150>
 800625e:	680b      	ldr	r3, [r1, #0]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	600a      	str	r2, [r1, #0]
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	4630      	mov	r0, r6
 800626c:	f7f9 ffb8 	bl	80001e0 <memchr>
 8006270:	b108      	cbz	r0, 8006276 <_printf_i+0x1f2>
 8006272:	1b80      	subs	r0, r0, r6
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	e7a8      	b.n	80061d4 <_printf_i+0x150>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	4632      	mov	r2, r6
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d0ab      	beq.n	80061e8 <_printf_i+0x164>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	d413      	bmi.n	80062be <_printf_i+0x23a>
 8006296:	68e0      	ldr	r0, [r4, #12]
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	4298      	cmp	r0, r3
 800629c:	bfb8      	it	lt
 800629e:	4618      	movlt	r0, r3
 80062a0:	e7a4      	b.n	80061ec <_printf_i+0x168>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d09b      	beq.n	80061e8 <_printf_i+0x164>
 80062b0:	3501      	adds	r5, #1
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	9903      	ldr	r1, [sp, #12]
 80062b6:	1a5b      	subs	r3, r3, r1
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dcf2      	bgt.n	80062a2 <_printf_i+0x21e>
 80062bc:	e7eb      	b.n	8006296 <_printf_i+0x212>
 80062be:	2500      	movs	r5, #0
 80062c0:	f104 0619 	add.w	r6, r4, #25
 80062c4:	e7f5      	b.n	80062b2 <_printf_i+0x22e>
 80062c6:	bf00      	nop
 80062c8:	0800a40e 	.word	0x0800a40e
 80062cc:	0800a41f 	.word	0x0800a41f

080062d0 <_scanf_float>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	b087      	sub	sp, #28
 80062d6:	4617      	mov	r7, r2
 80062d8:	9303      	str	r3, [sp, #12]
 80062da:	688b      	ldr	r3, [r1, #8]
 80062dc:	1e5a      	subs	r2, r3, #1
 80062de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80062e2:	bf83      	ittte	hi
 80062e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80062e8:	195b      	addhi	r3, r3, r5
 80062ea:	9302      	strhi	r3, [sp, #8]
 80062ec:	2300      	movls	r3, #0
 80062ee:	bf86      	itte	hi
 80062f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80062f4:	608b      	strhi	r3, [r1, #8]
 80062f6:	9302      	strls	r3, [sp, #8]
 80062f8:	680b      	ldr	r3, [r1, #0]
 80062fa:	468b      	mov	fp, r1
 80062fc:	2500      	movs	r5, #0
 80062fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006302:	f84b 3b1c 	str.w	r3, [fp], #28
 8006306:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800630a:	4680      	mov	r8, r0
 800630c:	460c      	mov	r4, r1
 800630e:	465e      	mov	r6, fp
 8006310:	46aa      	mov	sl, r5
 8006312:	46a9      	mov	r9, r5
 8006314:	9501      	str	r5, [sp, #4]
 8006316:	68a2      	ldr	r2, [r4, #8]
 8006318:	b152      	cbz	r2, 8006330 <_scanf_float+0x60>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b4e      	cmp	r3, #78	; 0x4e
 8006320:	d864      	bhi.n	80063ec <_scanf_float+0x11c>
 8006322:	2b40      	cmp	r3, #64	; 0x40
 8006324:	d83c      	bhi.n	80063a0 <_scanf_float+0xd0>
 8006326:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800632a:	b2c8      	uxtb	r0, r1
 800632c:	280e      	cmp	r0, #14
 800632e:	d93a      	bls.n	80063a6 <_scanf_float+0xd6>
 8006330:	f1b9 0f00 	cmp.w	r9, #0
 8006334:	d003      	beq.n	800633e <_scanf_float+0x6e>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006342:	f1ba 0f01 	cmp.w	sl, #1
 8006346:	f200 8113 	bhi.w	8006570 <_scanf_float+0x2a0>
 800634a:	455e      	cmp	r6, fp
 800634c:	f200 8105 	bhi.w	800655a <_scanf_float+0x28a>
 8006350:	2501      	movs	r5, #1
 8006352:	4628      	mov	r0, r5
 8006354:	b007      	add	sp, #28
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800635e:	2a0d      	cmp	r2, #13
 8006360:	d8e6      	bhi.n	8006330 <_scanf_float+0x60>
 8006362:	a101      	add	r1, pc, #4	; (adr r1, 8006368 <_scanf_float+0x98>)
 8006364:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006368:	080064a7 	.word	0x080064a7
 800636c:	08006331 	.word	0x08006331
 8006370:	08006331 	.word	0x08006331
 8006374:	08006331 	.word	0x08006331
 8006378:	08006507 	.word	0x08006507
 800637c:	080064df 	.word	0x080064df
 8006380:	08006331 	.word	0x08006331
 8006384:	08006331 	.word	0x08006331
 8006388:	080064b5 	.word	0x080064b5
 800638c:	08006331 	.word	0x08006331
 8006390:	08006331 	.word	0x08006331
 8006394:	08006331 	.word	0x08006331
 8006398:	08006331 	.word	0x08006331
 800639c:	0800646d 	.word	0x0800646d
 80063a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80063a4:	e7db      	b.n	800635e <_scanf_float+0x8e>
 80063a6:	290e      	cmp	r1, #14
 80063a8:	d8c2      	bhi.n	8006330 <_scanf_float+0x60>
 80063aa:	a001      	add	r0, pc, #4	; (adr r0, 80063b0 <_scanf_float+0xe0>)
 80063ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80063b0:	0800645f 	.word	0x0800645f
 80063b4:	08006331 	.word	0x08006331
 80063b8:	0800645f 	.word	0x0800645f
 80063bc:	080064f3 	.word	0x080064f3
 80063c0:	08006331 	.word	0x08006331
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	08006449 	.word	0x08006449
 80063cc:	08006449 	.word	0x08006449
 80063d0:	08006449 	.word	0x08006449
 80063d4:	08006449 	.word	0x08006449
 80063d8:	08006449 	.word	0x08006449
 80063dc:	08006449 	.word	0x08006449
 80063e0:	08006449 	.word	0x08006449
 80063e4:	08006449 	.word	0x08006449
 80063e8:	08006449 	.word	0x08006449
 80063ec:	2b6e      	cmp	r3, #110	; 0x6e
 80063ee:	d809      	bhi.n	8006404 <_scanf_float+0x134>
 80063f0:	2b60      	cmp	r3, #96	; 0x60
 80063f2:	d8b2      	bhi.n	800635a <_scanf_float+0x8a>
 80063f4:	2b54      	cmp	r3, #84	; 0x54
 80063f6:	d077      	beq.n	80064e8 <_scanf_float+0x218>
 80063f8:	2b59      	cmp	r3, #89	; 0x59
 80063fa:	d199      	bne.n	8006330 <_scanf_float+0x60>
 80063fc:	2d07      	cmp	r5, #7
 80063fe:	d197      	bne.n	8006330 <_scanf_float+0x60>
 8006400:	2508      	movs	r5, #8
 8006402:	e029      	b.n	8006458 <_scanf_float+0x188>
 8006404:	2b74      	cmp	r3, #116	; 0x74
 8006406:	d06f      	beq.n	80064e8 <_scanf_float+0x218>
 8006408:	2b79      	cmp	r3, #121	; 0x79
 800640a:	e7f6      	b.n	80063fa <_scanf_float+0x12a>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	05c8      	lsls	r0, r1, #23
 8006410:	d51a      	bpl.n	8006448 <_scanf_float+0x178>
 8006412:	9b02      	ldr	r3, [sp, #8]
 8006414:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006418:	6021      	str	r1, [r4, #0]
 800641a:	f109 0901 	add.w	r9, r9, #1
 800641e:	b11b      	cbz	r3, 8006428 <_scanf_float+0x158>
 8006420:	3b01      	subs	r3, #1
 8006422:	3201      	adds	r2, #1
 8006424:	9302      	str	r3, [sp, #8]
 8006426:	60a2      	str	r2, [r4, #8]
 8006428:	68a3      	ldr	r3, [r4, #8]
 800642a:	3b01      	subs	r3, #1
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	3301      	adds	r3, #1
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3b01      	subs	r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	f340 8084 	ble.w	8006548 <_scanf_float+0x278>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	e766      	b.n	8006316 <_scanf_float+0x46>
 8006448:	eb1a 0f05 	cmn.w	sl, r5
 800644c:	f47f af70 	bne.w	8006330 <_scanf_float+0x60>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006456:	6022      	str	r2, [r4, #0]
 8006458:	f806 3b01 	strb.w	r3, [r6], #1
 800645c:	e7e4      	b.n	8006428 <_scanf_float+0x158>
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	0610      	lsls	r0, r2, #24
 8006462:	f57f af65 	bpl.w	8006330 <_scanf_float+0x60>
 8006466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800646a:	e7f4      	b.n	8006456 <_scanf_float+0x186>
 800646c:	f1ba 0f00 	cmp.w	sl, #0
 8006470:	d10e      	bne.n	8006490 <_scanf_float+0x1c0>
 8006472:	f1b9 0f00 	cmp.w	r9, #0
 8006476:	d10e      	bne.n	8006496 <_scanf_float+0x1c6>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800647e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006482:	d108      	bne.n	8006496 <_scanf_float+0x1c6>
 8006484:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006488:	6022      	str	r2, [r4, #0]
 800648a:	f04f 0a01 	mov.w	sl, #1
 800648e:	e7e3      	b.n	8006458 <_scanf_float+0x188>
 8006490:	f1ba 0f02 	cmp.w	sl, #2
 8006494:	d055      	beq.n	8006542 <_scanf_float+0x272>
 8006496:	2d01      	cmp	r5, #1
 8006498:	d002      	beq.n	80064a0 <_scanf_float+0x1d0>
 800649a:	2d04      	cmp	r5, #4
 800649c:	f47f af48 	bne.w	8006330 <_scanf_float+0x60>
 80064a0:	3501      	adds	r5, #1
 80064a2:	b2ed      	uxtb	r5, r5
 80064a4:	e7d8      	b.n	8006458 <_scanf_float+0x188>
 80064a6:	f1ba 0f01 	cmp.w	sl, #1
 80064aa:	f47f af41 	bne.w	8006330 <_scanf_float+0x60>
 80064ae:	f04f 0a02 	mov.w	sl, #2
 80064b2:	e7d1      	b.n	8006458 <_scanf_float+0x188>
 80064b4:	b97d      	cbnz	r5, 80064d6 <_scanf_float+0x206>
 80064b6:	f1b9 0f00 	cmp.w	r9, #0
 80064ba:	f47f af3c 	bne.w	8006336 <_scanf_float+0x66>
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80064c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80064c8:	f47f af39 	bne.w	800633e <_scanf_float+0x6e>
 80064cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80064d0:	6022      	str	r2, [r4, #0]
 80064d2:	2501      	movs	r5, #1
 80064d4:	e7c0      	b.n	8006458 <_scanf_float+0x188>
 80064d6:	2d03      	cmp	r5, #3
 80064d8:	d0e2      	beq.n	80064a0 <_scanf_float+0x1d0>
 80064da:	2d05      	cmp	r5, #5
 80064dc:	e7de      	b.n	800649c <_scanf_float+0x1cc>
 80064de:	2d02      	cmp	r5, #2
 80064e0:	f47f af26 	bne.w	8006330 <_scanf_float+0x60>
 80064e4:	2503      	movs	r5, #3
 80064e6:	e7b7      	b.n	8006458 <_scanf_float+0x188>
 80064e8:	2d06      	cmp	r5, #6
 80064ea:	f47f af21 	bne.w	8006330 <_scanf_float+0x60>
 80064ee:	2507      	movs	r5, #7
 80064f0:	e7b2      	b.n	8006458 <_scanf_float+0x188>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	0591      	lsls	r1, r2, #22
 80064f6:	f57f af1b 	bpl.w	8006330 <_scanf_float+0x60>
 80064fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	f8cd 9004 	str.w	r9, [sp, #4]
 8006504:	e7a8      	b.n	8006458 <_scanf_float+0x188>
 8006506:	6822      	ldr	r2, [r4, #0]
 8006508:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800650c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006510:	d006      	beq.n	8006520 <_scanf_float+0x250>
 8006512:	0550      	lsls	r0, r2, #21
 8006514:	f57f af0c 	bpl.w	8006330 <_scanf_float+0x60>
 8006518:	f1b9 0f00 	cmp.w	r9, #0
 800651c:	f43f af0f 	beq.w	800633e <_scanf_float+0x6e>
 8006520:	0591      	lsls	r1, r2, #22
 8006522:	bf58      	it	pl
 8006524:	9901      	ldrpl	r1, [sp, #4]
 8006526:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800652a:	bf58      	it	pl
 800652c:	eba9 0101 	subpl.w	r1, r9, r1
 8006530:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006534:	bf58      	it	pl
 8006536:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800653a:	6022      	str	r2, [r4, #0]
 800653c:	f04f 0900 	mov.w	r9, #0
 8006540:	e78a      	b.n	8006458 <_scanf_float+0x188>
 8006542:	f04f 0a03 	mov.w	sl, #3
 8006546:	e787      	b.n	8006458 <_scanf_float+0x188>
 8006548:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800654c:	4639      	mov	r1, r7
 800654e:	4640      	mov	r0, r8
 8006550:	4798      	blx	r3
 8006552:	2800      	cmp	r0, #0
 8006554:	f43f aedf 	beq.w	8006316 <_scanf_float+0x46>
 8006558:	e6ea      	b.n	8006330 <_scanf_float+0x60>
 800655a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800655e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006562:	463a      	mov	r2, r7
 8006564:	4640      	mov	r0, r8
 8006566:	4798      	blx	r3
 8006568:	6923      	ldr	r3, [r4, #16]
 800656a:	3b01      	subs	r3, #1
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	e6ec      	b.n	800634a <_scanf_float+0x7a>
 8006570:	1e6b      	subs	r3, r5, #1
 8006572:	2b06      	cmp	r3, #6
 8006574:	d825      	bhi.n	80065c2 <_scanf_float+0x2f2>
 8006576:	2d02      	cmp	r5, #2
 8006578:	d836      	bhi.n	80065e8 <_scanf_float+0x318>
 800657a:	455e      	cmp	r6, fp
 800657c:	f67f aee8 	bls.w	8006350 <_scanf_float+0x80>
 8006580:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006584:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006588:	463a      	mov	r2, r7
 800658a:	4640      	mov	r0, r8
 800658c:	4798      	blx	r3
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	3b01      	subs	r3, #1
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	e7f1      	b.n	800657a <_scanf_float+0x2aa>
 8006596:	9802      	ldr	r0, [sp, #8]
 8006598:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800659c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80065a0:	9002      	str	r0, [sp, #8]
 80065a2:	463a      	mov	r2, r7
 80065a4:	4640      	mov	r0, r8
 80065a6:	4798      	blx	r3
 80065a8:	6923      	ldr	r3, [r4, #16]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	6123      	str	r3, [r4, #16]
 80065ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065b2:	fa5f fa8a 	uxtb.w	sl, sl
 80065b6:	f1ba 0f02 	cmp.w	sl, #2
 80065ba:	d1ec      	bne.n	8006596 <_scanf_float+0x2c6>
 80065bc:	3d03      	subs	r5, #3
 80065be:	b2ed      	uxtb	r5, r5
 80065c0:	1b76      	subs	r6, r6, r5
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	05da      	lsls	r2, r3, #23
 80065c6:	d52f      	bpl.n	8006628 <_scanf_float+0x358>
 80065c8:	055b      	lsls	r3, r3, #21
 80065ca:	d510      	bpl.n	80065ee <_scanf_float+0x31e>
 80065cc:	455e      	cmp	r6, fp
 80065ce:	f67f aebf 	bls.w	8006350 <_scanf_float+0x80>
 80065d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065da:	463a      	mov	r2, r7
 80065dc:	4640      	mov	r0, r8
 80065de:	4798      	blx	r3
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	6123      	str	r3, [r4, #16]
 80065e6:	e7f1      	b.n	80065cc <_scanf_float+0x2fc>
 80065e8:	46aa      	mov	sl, r5
 80065ea:	9602      	str	r6, [sp, #8]
 80065ec:	e7df      	b.n	80065ae <_scanf_float+0x2de>
 80065ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	2965      	cmp	r1, #101	; 0x65
 80065f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80065fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	d00c      	beq.n	800661c <_scanf_float+0x34c>
 8006602:	2945      	cmp	r1, #69	; 0x45
 8006604:	d00a      	beq.n	800661c <_scanf_float+0x34c>
 8006606:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800660a:	463a      	mov	r2, r7
 800660c:	4640      	mov	r0, r8
 800660e:	4798      	blx	r3
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006616:	3b01      	subs	r3, #1
 8006618:	1eb5      	subs	r5, r6, #2
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006620:	463a      	mov	r2, r7
 8006622:	4640      	mov	r0, r8
 8006624:	4798      	blx	r3
 8006626:	462e      	mov	r6, r5
 8006628:	6825      	ldr	r5, [r4, #0]
 800662a:	f015 0510 	ands.w	r5, r5, #16
 800662e:	d158      	bne.n	80066e2 <_scanf_float+0x412>
 8006630:	7035      	strb	r5, [r6, #0]
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800663c:	d11c      	bne.n	8006678 <_scanf_float+0x3a8>
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	454b      	cmp	r3, r9
 8006642:	eba3 0209 	sub.w	r2, r3, r9
 8006646:	d124      	bne.n	8006692 <_scanf_float+0x3c2>
 8006648:	2200      	movs	r2, #0
 800664a:	4659      	mov	r1, fp
 800664c:	4640      	mov	r0, r8
 800664e:	f000 ff29 	bl	80074a4 <_strtod_r>
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f011 0f02 	tst.w	r1, #2
 800665c:	ec57 6b10 	vmov	r6, r7, d0
 8006660:	f103 0204 	add.w	r2, r3, #4
 8006664:	d020      	beq.n	80066a8 <_scanf_float+0x3d8>
 8006666:	9903      	ldr	r1, [sp, #12]
 8006668:	600a      	str	r2, [r1, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	e9c3 6700 	strd	r6, r7, [r3]
 8006670:	68e3      	ldr	r3, [r4, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60e3      	str	r3, [r4, #12]
 8006676:	e66c      	b.n	8006352 <_scanf_float+0x82>
 8006678:	9b04      	ldr	r3, [sp, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0e4      	beq.n	8006648 <_scanf_float+0x378>
 800667e:	9905      	ldr	r1, [sp, #20]
 8006680:	230a      	movs	r3, #10
 8006682:	462a      	mov	r2, r5
 8006684:	3101      	adds	r1, #1
 8006686:	4640      	mov	r0, r8
 8006688:	f000 ff96 	bl	80075b8 <_strtol_r>
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	9e05      	ldr	r6, [sp, #20]
 8006690:	1ac2      	subs	r2, r0, r3
 8006692:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006696:	429e      	cmp	r6, r3
 8006698:	bf28      	it	cs
 800669a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800669e:	4912      	ldr	r1, [pc, #72]	; (80066e8 <_scanf_float+0x418>)
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f8b9 	bl	8006818 <siprintf>
 80066a6:	e7cf      	b.n	8006648 <_scanf_float+0x378>
 80066a8:	f011 0f04 	tst.w	r1, #4
 80066ac:	9903      	ldr	r1, [sp, #12]
 80066ae:	600a      	str	r2, [r1, #0]
 80066b0:	d1db      	bne.n	800666a <_scanf_float+0x39a>
 80066b2:	f8d3 8000 	ldr.w	r8, [r3]
 80066b6:	ee10 2a10 	vmov	r2, s0
 80066ba:	ee10 0a10 	vmov	r0, s0
 80066be:	463b      	mov	r3, r7
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7fa fa33 	bl	8000b2c <__aeabi_dcmpun>
 80066c6:	b128      	cbz	r0, 80066d4 <_scanf_float+0x404>
 80066c8:	4808      	ldr	r0, [pc, #32]	; (80066ec <_scanf_float+0x41c>)
 80066ca:	f000 f89f 	bl	800680c <nanf>
 80066ce:	ed88 0a00 	vstr	s0, [r8]
 80066d2:	e7cd      	b.n	8006670 <_scanf_float+0x3a0>
 80066d4:	4630      	mov	r0, r6
 80066d6:	4639      	mov	r1, r7
 80066d8:	f7fa fa86 	bl	8000be8 <__aeabi_d2f>
 80066dc:	f8c8 0000 	str.w	r0, [r8]
 80066e0:	e7c6      	b.n	8006670 <_scanf_float+0x3a0>
 80066e2:	2500      	movs	r5, #0
 80066e4:	e635      	b.n	8006352 <_scanf_float+0x82>
 80066e6:	bf00      	nop
 80066e8:	0800a430 	.word	0x0800a430
 80066ec:	0800a8a8 	.word	0x0800a8a8

080066f0 <iprintf>:
 80066f0:	b40f      	push	{r0, r1, r2, r3}
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <iprintf+0x2c>)
 80066f4:	b513      	push	{r0, r1, r4, lr}
 80066f6:	681c      	ldr	r4, [r3, #0]
 80066f8:	b124      	cbz	r4, 8006704 <iprintf+0x14>
 80066fa:	69a3      	ldr	r3, [r4, #24]
 80066fc:	b913      	cbnz	r3, 8006704 <iprintf+0x14>
 80066fe:	4620      	mov	r0, r4
 8006700:	f001 ffb0 	bl	8008664 <__sinit>
 8006704:	ab05      	add	r3, sp, #20
 8006706:	9a04      	ldr	r2, [sp, #16]
 8006708:	68a1      	ldr	r1, [r4, #8]
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	4620      	mov	r0, r4
 800670e:	f003 fb43 	bl	8009d98 <_vfiprintf_r>
 8006712:	b002      	add	sp, #8
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006718:	b004      	add	sp, #16
 800671a:	4770      	bx	lr
 800671c:	20000034 	.word	0x20000034

08006720 <_puts_r>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	460e      	mov	r6, r1
 8006724:	4605      	mov	r5, r0
 8006726:	b118      	cbz	r0, 8006730 <_puts_r+0x10>
 8006728:	6983      	ldr	r3, [r0, #24]
 800672a:	b90b      	cbnz	r3, 8006730 <_puts_r+0x10>
 800672c:	f001 ff9a 	bl	8008664 <__sinit>
 8006730:	69ab      	ldr	r3, [r5, #24]
 8006732:	68ac      	ldr	r4, [r5, #8]
 8006734:	b913      	cbnz	r3, 800673c <_puts_r+0x1c>
 8006736:	4628      	mov	r0, r5
 8006738:	f001 ff94 	bl	8008664 <__sinit>
 800673c:	4b2c      	ldr	r3, [pc, #176]	; (80067f0 <_puts_r+0xd0>)
 800673e:	429c      	cmp	r4, r3
 8006740:	d120      	bne.n	8006784 <_puts_r+0x64>
 8006742:	686c      	ldr	r4, [r5, #4]
 8006744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006746:	07db      	lsls	r3, r3, #31
 8006748:	d405      	bmi.n	8006756 <_puts_r+0x36>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	0598      	lsls	r0, r3, #22
 800674e:	d402      	bmi.n	8006756 <_puts_r+0x36>
 8006750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006752:	f002 fb98 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	0719      	lsls	r1, r3, #28
 800675a:	d51d      	bpl.n	8006798 <_puts_r+0x78>
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	b1db      	cbz	r3, 8006798 <_puts_r+0x78>
 8006760:	3e01      	subs	r6, #1
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006768:	3b01      	subs	r3, #1
 800676a:	60a3      	str	r3, [r4, #8]
 800676c:	bb39      	cbnz	r1, 80067be <_puts_r+0x9e>
 800676e:	2b00      	cmp	r3, #0
 8006770:	da38      	bge.n	80067e4 <_puts_r+0xc4>
 8006772:	4622      	mov	r2, r4
 8006774:	210a      	movs	r1, #10
 8006776:	4628      	mov	r0, r5
 8006778:	f000 ff20 	bl	80075bc <__swbuf_r>
 800677c:	3001      	adds	r0, #1
 800677e:	d011      	beq.n	80067a4 <_puts_r+0x84>
 8006780:	250a      	movs	r5, #10
 8006782:	e011      	b.n	80067a8 <_puts_r+0x88>
 8006784:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <_puts_r+0xd4>)
 8006786:	429c      	cmp	r4, r3
 8006788:	d101      	bne.n	800678e <_puts_r+0x6e>
 800678a:	68ac      	ldr	r4, [r5, #8]
 800678c:	e7da      	b.n	8006744 <_puts_r+0x24>
 800678e:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <_puts_r+0xd8>)
 8006790:	429c      	cmp	r4, r3
 8006792:	bf08      	it	eq
 8006794:	68ec      	ldreq	r4, [r5, #12]
 8006796:	e7d5      	b.n	8006744 <_puts_r+0x24>
 8006798:	4621      	mov	r1, r4
 800679a:	4628      	mov	r0, r5
 800679c:	f000 ff60 	bl	8007660 <__swsetup_r>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d0dd      	beq.n	8006760 <_puts_r+0x40>
 80067a4:	f04f 35ff 	mov.w	r5, #4294967295
 80067a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067aa:	07da      	lsls	r2, r3, #31
 80067ac:	d405      	bmi.n	80067ba <_puts_r+0x9a>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	059b      	lsls	r3, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_puts_r+0x9a>
 80067b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b6:	f002 fb67 	bl	8008e88 <__retarget_lock_release_recursive>
 80067ba:	4628      	mov	r0, r5
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da04      	bge.n	80067cc <_puts_r+0xac>
 80067c2:	69a2      	ldr	r2, [r4, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	dc06      	bgt.n	80067d6 <_puts_r+0xb6>
 80067c8:	290a      	cmp	r1, #10
 80067ca:	d004      	beq.n	80067d6 <_puts_r+0xb6>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	6022      	str	r2, [r4, #0]
 80067d2:	7019      	strb	r1, [r3, #0]
 80067d4:	e7c5      	b.n	8006762 <_puts_r+0x42>
 80067d6:	4622      	mov	r2, r4
 80067d8:	4628      	mov	r0, r5
 80067da:	f000 feef 	bl	80075bc <__swbuf_r>
 80067de:	3001      	adds	r0, #1
 80067e0:	d1bf      	bne.n	8006762 <_puts_r+0x42>
 80067e2:	e7df      	b.n	80067a4 <_puts_r+0x84>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	250a      	movs	r5, #10
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	701d      	strb	r5, [r3, #0]
 80067ee:	e7db      	b.n	80067a8 <_puts_r+0x88>
 80067f0:	0800a640 	.word	0x0800a640
 80067f4:	0800a660 	.word	0x0800a660
 80067f8:	0800a620 	.word	0x0800a620

080067fc <puts>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <puts+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f7ff bf8d 	b.w	8006720 <_puts_r>
 8006806:	bf00      	nop
 8006808:	20000034 	.word	0x20000034

0800680c <nanf>:
 800680c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006814 <nanf+0x8>
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	7fc00000 	.word	0x7fc00000

08006818 <siprintf>:
 8006818:	b40e      	push	{r1, r2, r3}
 800681a:	b500      	push	{lr}
 800681c:	b09c      	sub	sp, #112	; 0x70
 800681e:	ab1d      	add	r3, sp, #116	; 0x74
 8006820:	9002      	str	r0, [sp, #8]
 8006822:	9006      	str	r0, [sp, #24]
 8006824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006828:	4809      	ldr	r0, [pc, #36]	; (8006850 <siprintf+0x38>)
 800682a:	9107      	str	r1, [sp, #28]
 800682c:	9104      	str	r1, [sp, #16]
 800682e:	4909      	ldr	r1, [pc, #36]	; (8006854 <siprintf+0x3c>)
 8006830:	f853 2b04 	ldr.w	r2, [r3], #4
 8006834:	9105      	str	r1, [sp, #20]
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	a902      	add	r1, sp, #8
 800683c:	f003 f982 	bl	8009b44 <_svfiprintf_r>
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	b01c      	add	sp, #112	; 0x70
 8006848:	f85d eb04 	ldr.w	lr, [sp], #4
 800684c:	b003      	add	sp, #12
 800684e:	4770      	bx	lr
 8006850:	20000034 	.word	0x20000034
 8006854:	ffff0208 	.word	0xffff0208

08006858 <sulp>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4604      	mov	r4, r0
 800685c:	460d      	mov	r5, r1
 800685e:	ec45 4b10 	vmov	d0, r4, r5
 8006862:	4616      	mov	r6, r2
 8006864:	f002 ff0a 	bl	800967c <__ulp>
 8006868:	ec51 0b10 	vmov	r0, r1, d0
 800686c:	b17e      	cbz	r6, 800688e <sulp+0x36>
 800686e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006876:	2b00      	cmp	r3, #0
 8006878:	dd09      	ble.n	800688e <sulp+0x36>
 800687a:	051b      	lsls	r3, r3, #20
 800687c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006880:	2400      	movs	r4, #0
 8006882:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006886:	4622      	mov	r2, r4
 8006888:	462b      	mov	r3, r5
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	bd70      	pop	{r4, r5, r6, pc}

08006890 <_strtod_l>:
 8006890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	b0a3      	sub	sp, #140	; 0x8c
 8006896:	461f      	mov	r7, r3
 8006898:	2300      	movs	r3, #0
 800689a:	931e      	str	r3, [sp, #120]	; 0x78
 800689c:	4ba4      	ldr	r3, [pc, #656]	; (8006b30 <_strtod_l+0x2a0>)
 800689e:	9219      	str	r2, [sp, #100]	; 0x64
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	4604      	mov	r4, r0
 80068a6:	4618      	mov	r0, r3
 80068a8:	4688      	mov	r8, r1
 80068aa:	f7f9 fc91 	bl	80001d0 <strlen>
 80068ae:	f04f 0a00 	mov.w	sl, #0
 80068b2:	4605      	mov	r5, r0
 80068b4:	f04f 0b00 	mov.w	fp, #0
 80068b8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80068bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	2a2b      	cmp	r2, #43	; 0x2b
 80068c2:	d04c      	beq.n	800695e <_strtod_l+0xce>
 80068c4:	d839      	bhi.n	800693a <_strtod_l+0xaa>
 80068c6:	2a0d      	cmp	r2, #13
 80068c8:	d832      	bhi.n	8006930 <_strtod_l+0xa0>
 80068ca:	2a08      	cmp	r2, #8
 80068cc:	d832      	bhi.n	8006934 <_strtod_l+0xa4>
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	d03c      	beq.n	800694c <_strtod_l+0xbc>
 80068d2:	2300      	movs	r3, #0
 80068d4:	930e      	str	r3, [sp, #56]	; 0x38
 80068d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80068d8:	7833      	ldrb	r3, [r6, #0]
 80068da:	2b30      	cmp	r3, #48	; 0x30
 80068dc:	f040 80b4 	bne.w	8006a48 <_strtod_l+0x1b8>
 80068e0:	7873      	ldrb	r3, [r6, #1]
 80068e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80068e6:	2b58      	cmp	r3, #88	; 0x58
 80068e8:	d16c      	bne.n	80069c4 <_strtod_l+0x134>
 80068ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	ab1e      	add	r3, sp, #120	; 0x78
 80068f0:	9702      	str	r7, [sp, #8]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4a8f      	ldr	r2, [pc, #572]	; (8006b34 <_strtod_l+0x2a4>)
 80068f6:	ab1f      	add	r3, sp, #124	; 0x7c
 80068f8:	a91d      	add	r1, sp, #116	; 0x74
 80068fa:	4620      	mov	r0, r4
 80068fc:	f001 ffb6 	bl	800886c <__gethex>
 8006900:	f010 0707 	ands.w	r7, r0, #7
 8006904:	4605      	mov	r5, r0
 8006906:	d005      	beq.n	8006914 <_strtod_l+0x84>
 8006908:	2f06      	cmp	r7, #6
 800690a:	d12a      	bne.n	8006962 <_strtod_l+0xd2>
 800690c:	3601      	adds	r6, #1
 800690e:	2300      	movs	r3, #0
 8006910:	961d      	str	r6, [sp, #116]	; 0x74
 8006912:	930e      	str	r3, [sp, #56]	; 0x38
 8006914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006916:	2b00      	cmp	r3, #0
 8006918:	f040 8596 	bne.w	8007448 <_strtod_l+0xbb8>
 800691c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691e:	b1db      	cbz	r3, 8006958 <_strtod_l+0xc8>
 8006920:	4652      	mov	r2, sl
 8006922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006926:	ec43 2b10 	vmov	d0, r2, r3
 800692a:	b023      	add	sp, #140	; 0x8c
 800692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006930:	2a20      	cmp	r2, #32
 8006932:	d1ce      	bne.n	80068d2 <_strtod_l+0x42>
 8006934:	3301      	adds	r3, #1
 8006936:	931d      	str	r3, [sp, #116]	; 0x74
 8006938:	e7c0      	b.n	80068bc <_strtod_l+0x2c>
 800693a:	2a2d      	cmp	r2, #45	; 0x2d
 800693c:	d1c9      	bne.n	80068d2 <_strtod_l+0x42>
 800693e:	2201      	movs	r2, #1
 8006940:	920e      	str	r2, [sp, #56]	; 0x38
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	921d      	str	r2, [sp, #116]	; 0x74
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1c4      	bne.n	80068d6 <_strtod_l+0x46>
 800694c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800694e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8576 	bne.w	8007444 <_strtod_l+0xbb4>
 8006958:	4652      	mov	r2, sl
 800695a:	465b      	mov	r3, fp
 800695c:	e7e3      	b.n	8006926 <_strtod_l+0x96>
 800695e:	2200      	movs	r2, #0
 8006960:	e7ee      	b.n	8006940 <_strtod_l+0xb0>
 8006962:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006964:	b13a      	cbz	r2, 8006976 <_strtod_l+0xe6>
 8006966:	2135      	movs	r1, #53	; 0x35
 8006968:	a820      	add	r0, sp, #128	; 0x80
 800696a:	f002 ff92 	bl	8009892 <__copybits>
 800696e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006970:	4620      	mov	r0, r4
 8006972:	f002 fb57 	bl	8009024 <_Bfree>
 8006976:	3f01      	subs	r7, #1
 8006978:	2f05      	cmp	r7, #5
 800697a:	d807      	bhi.n	800698c <_strtod_l+0xfc>
 800697c:	e8df f007 	tbb	[pc, r7]
 8006980:	1d180b0e 	.word	0x1d180b0e
 8006984:	030e      	.short	0x030e
 8006986:	f04f 0b00 	mov.w	fp, #0
 800698a:	46da      	mov	sl, fp
 800698c:	0728      	lsls	r0, r5, #28
 800698e:	d5c1      	bpl.n	8006914 <_strtod_l+0x84>
 8006990:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006994:	e7be      	b.n	8006914 <_strtod_l+0x84>
 8006996:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800699a:	e7f7      	b.n	800698c <_strtod_l+0xfc>
 800699c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80069a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80069a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80069ae:	e7ed      	b.n	800698c <_strtod_l+0xfc>
 80069b0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006b38 <_strtod_l+0x2a8>
 80069b4:	f04f 0a00 	mov.w	sl, #0
 80069b8:	e7e8      	b.n	800698c <_strtod_l+0xfc>
 80069ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80069be:	f04f 3aff 	mov.w	sl, #4294967295
 80069c2:	e7e3      	b.n	800698c <_strtod_l+0xfc>
 80069c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	921d      	str	r2, [sp, #116]	; 0x74
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	2b30      	cmp	r3, #48	; 0x30
 80069ce:	d0f9      	beq.n	80069c4 <_strtod_l+0x134>
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d09f      	beq.n	8006914 <_strtod_l+0x84>
 80069d4:	2301      	movs	r3, #1
 80069d6:	f04f 0900 	mov.w	r9, #0
 80069da:	9304      	str	r3, [sp, #16]
 80069dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80069de:	930a      	str	r3, [sp, #40]	; 0x28
 80069e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80069e4:	464f      	mov	r7, r9
 80069e6:	220a      	movs	r2, #10
 80069e8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80069ea:	7806      	ldrb	r6, [r0, #0]
 80069ec:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80069f0:	b2d9      	uxtb	r1, r3
 80069f2:	2909      	cmp	r1, #9
 80069f4:	d92a      	bls.n	8006a4c <_strtod_l+0x1bc>
 80069f6:	9907      	ldr	r1, [sp, #28]
 80069f8:	462a      	mov	r2, r5
 80069fa:	f003 fb58 	bl	800a0ae <strncmp>
 80069fe:	b398      	cbz	r0, 8006a68 <_strtod_l+0x1d8>
 8006a00:	2000      	movs	r0, #0
 8006a02:	4633      	mov	r3, r6
 8006a04:	463d      	mov	r5, r7
 8006a06:	9007      	str	r0, [sp, #28]
 8006a08:	4602      	mov	r2, r0
 8006a0a:	2b65      	cmp	r3, #101	; 0x65
 8006a0c:	d001      	beq.n	8006a12 <_strtod_l+0x182>
 8006a0e:	2b45      	cmp	r3, #69	; 0x45
 8006a10:	d118      	bne.n	8006a44 <_strtod_l+0x1b4>
 8006a12:	b91d      	cbnz	r5, 8006a1c <_strtod_l+0x18c>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	4303      	orrs	r3, r0
 8006a18:	d098      	beq.n	800694c <_strtod_l+0xbc>
 8006a1a:	2500      	movs	r5, #0
 8006a1c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006a20:	f108 0301 	add.w	r3, r8, #1
 8006a24:	931d      	str	r3, [sp, #116]	; 0x74
 8006a26:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006a2a:	2b2b      	cmp	r3, #43	; 0x2b
 8006a2c:	d075      	beq.n	8006b1a <_strtod_l+0x28a>
 8006a2e:	2b2d      	cmp	r3, #45	; 0x2d
 8006a30:	d07b      	beq.n	8006b2a <_strtod_l+0x29a>
 8006a32:	f04f 0c00 	mov.w	ip, #0
 8006a36:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006a3a:	2909      	cmp	r1, #9
 8006a3c:	f240 8082 	bls.w	8006b44 <_strtod_l+0x2b4>
 8006a40:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a44:	2600      	movs	r6, #0
 8006a46:	e09d      	b.n	8006b84 <_strtod_l+0x2f4>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	e7c4      	b.n	80069d6 <_strtod_l+0x146>
 8006a4c:	2f08      	cmp	r7, #8
 8006a4e:	bfd8      	it	le
 8006a50:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006a52:	f100 0001 	add.w	r0, r0, #1
 8006a56:	bfda      	itte	le
 8006a58:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a5c:	9309      	strle	r3, [sp, #36]	; 0x24
 8006a5e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006a62:	3701      	adds	r7, #1
 8006a64:	901d      	str	r0, [sp, #116]	; 0x74
 8006a66:	e7bf      	b.n	80069e8 <_strtod_l+0x158>
 8006a68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a6a:	195a      	adds	r2, r3, r5
 8006a6c:	921d      	str	r2, [sp, #116]	; 0x74
 8006a6e:	5d5b      	ldrb	r3, [r3, r5]
 8006a70:	2f00      	cmp	r7, #0
 8006a72:	d037      	beq.n	8006ae4 <_strtod_l+0x254>
 8006a74:	9007      	str	r0, [sp, #28]
 8006a76:	463d      	mov	r5, r7
 8006a78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a7c:	2a09      	cmp	r2, #9
 8006a7e:	d912      	bls.n	8006aa6 <_strtod_l+0x216>
 8006a80:	2201      	movs	r2, #1
 8006a82:	e7c2      	b.n	8006a0a <_strtod_l+0x17a>
 8006a84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	921d      	str	r2, [sp, #116]	; 0x74
 8006a8a:	785b      	ldrb	r3, [r3, #1]
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	2b30      	cmp	r3, #48	; 0x30
 8006a90:	d0f8      	beq.n	8006a84 <_strtod_l+0x1f4>
 8006a92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006a96:	2a08      	cmp	r2, #8
 8006a98:	f200 84db 	bhi.w	8007452 <_strtod_l+0xbc2>
 8006a9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006a9e:	9007      	str	r0, [sp, #28]
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	920a      	str	r2, [sp, #40]	; 0x28
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	3b30      	subs	r3, #48	; 0x30
 8006aa8:	f100 0201 	add.w	r2, r0, #1
 8006aac:	d014      	beq.n	8006ad8 <_strtod_l+0x248>
 8006aae:	9907      	ldr	r1, [sp, #28]
 8006ab0:	4411      	add	r1, r2
 8006ab2:	9107      	str	r1, [sp, #28]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	eb00 0e05 	add.w	lr, r0, r5
 8006aba:	210a      	movs	r1, #10
 8006abc:	4572      	cmp	r2, lr
 8006abe:	d113      	bne.n	8006ae8 <_strtod_l+0x258>
 8006ac0:	182a      	adds	r2, r5, r0
 8006ac2:	2a08      	cmp	r2, #8
 8006ac4:	f105 0501 	add.w	r5, r5, #1
 8006ac8:	4405      	add	r5, r0
 8006aca:	dc1c      	bgt.n	8006b06 <_strtod_l+0x276>
 8006acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ace:	220a      	movs	r2, #10
 8006ad0:	fb02 3301 	mla	r3, r2, r1, r3
 8006ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	911d      	str	r1, [sp, #116]	; 0x74
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	e7c9      	b.n	8006a78 <_strtod_l+0x1e8>
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	e7d2      	b.n	8006a8e <_strtod_l+0x1fe>
 8006ae8:	2a08      	cmp	r2, #8
 8006aea:	dc04      	bgt.n	8006af6 <_strtod_l+0x266>
 8006aec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006aee:	434e      	muls	r6, r1
 8006af0:	9609      	str	r6, [sp, #36]	; 0x24
 8006af2:	3201      	adds	r2, #1
 8006af4:	e7e2      	b.n	8006abc <_strtod_l+0x22c>
 8006af6:	f102 0c01 	add.w	ip, r2, #1
 8006afa:	f1bc 0f10 	cmp.w	ip, #16
 8006afe:	bfd8      	it	le
 8006b00:	fb01 f909 	mulle.w	r9, r1, r9
 8006b04:	e7f5      	b.n	8006af2 <_strtod_l+0x262>
 8006b06:	2d10      	cmp	r5, #16
 8006b08:	bfdc      	itt	le
 8006b0a:	220a      	movle	r2, #10
 8006b0c:	fb02 3909 	mlale	r9, r2, r9, r3
 8006b10:	e7e1      	b.n	8006ad6 <_strtod_l+0x246>
 8006b12:	2300      	movs	r3, #0
 8006b14:	9307      	str	r3, [sp, #28]
 8006b16:	2201      	movs	r2, #1
 8006b18:	e77c      	b.n	8006a14 <_strtod_l+0x184>
 8006b1a:	f04f 0c00 	mov.w	ip, #0
 8006b1e:	f108 0302 	add.w	r3, r8, #2
 8006b22:	931d      	str	r3, [sp, #116]	; 0x74
 8006b24:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006b28:	e785      	b.n	8006a36 <_strtod_l+0x1a6>
 8006b2a:	f04f 0c01 	mov.w	ip, #1
 8006b2e:	e7f6      	b.n	8006b1e <_strtod_l+0x28e>
 8006b30:	0800a6ec 	.word	0x0800a6ec
 8006b34:	0800a438 	.word	0x0800a438
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	911d      	str	r1, [sp, #116]	; 0x74
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b30      	cmp	r3, #48	; 0x30
 8006b46:	d0f9      	beq.n	8006b3c <_strtod_l+0x2ac>
 8006b48:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006b4c:	2908      	cmp	r1, #8
 8006b4e:	f63f af79 	bhi.w	8006a44 <_strtod_l+0x1b4>
 8006b52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006b56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b58:	9308      	str	r3, [sp, #32]
 8006b5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	911d      	str	r1, [sp, #116]	; 0x74
 8006b60:	785b      	ldrb	r3, [r3, #1]
 8006b62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006b66:	2e09      	cmp	r6, #9
 8006b68:	d937      	bls.n	8006bda <_strtod_l+0x34a>
 8006b6a:	9e08      	ldr	r6, [sp, #32]
 8006b6c:	1b89      	subs	r1, r1, r6
 8006b6e:	2908      	cmp	r1, #8
 8006b70:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006b74:	dc02      	bgt.n	8006b7c <_strtod_l+0x2ec>
 8006b76:	4576      	cmp	r6, lr
 8006b78:	bfa8      	it	ge
 8006b7a:	4676      	movge	r6, lr
 8006b7c:	f1bc 0f00 	cmp.w	ip, #0
 8006b80:	d000      	beq.n	8006b84 <_strtod_l+0x2f4>
 8006b82:	4276      	negs	r6, r6
 8006b84:	2d00      	cmp	r5, #0
 8006b86:	d14f      	bne.n	8006c28 <_strtod_l+0x398>
 8006b88:	9904      	ldr	r1, [sp, #16]
 8006b8a:	4301      	orrs	r1, r0
 8006b8c:	f47f aec2 	bne.w	8006914 <_strtod_l+0x84>
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	f47f aedb 	bne.w	800694c <_strtod_l+0xbc>
 8006b96:	2b69      	cmp	r3, #105	; 0x69
 8006b98:	d027      	beq.n	8006bea <_strtod_l+0x35a>
 8006b9a:	dc24      	bgt.n	8006be6 <_strtod_l+0x356>
 8006b9c:	2b49      	cmp	r3, #73	; 0x49
 8006b9e:	d024      	beq.n	8006bea <_strtod_l+0x35a>
 8006ba0:	2b4e      	cmp	r3, #78	; 0x4e
 8006ba2:	f47f aed3 	bne.w	800694c <_strtod_l+0xbc>
 8006ba6:	499e      	ldr	r1, [pc, #632]	; (8006e20 <_strtod_l+0x590>)
 8006ba8:	a81d      	add	r0, sp, #116	; 0x74
 8006baa:	f002 f8b7 	bl	8008d1c <__match>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	f43f aecc 	beq.w	800694c <_strtod_l+0xbc>
 8006bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b28      	cmp	r3, #40	; 0x28
 8006bba:	d12d      	bne.n	8006c18 <_strtod_l+0x388>
 8006bbc:	4999      	ldr	r1, [pc, #612]	; (8006e24 <_strtod_l+0x594>)
 8006bbe:	aa20      	add	r2, sp, #128	; 0x80
 8006bc0:	a81d      	add	r0, sp, #116	; 0x74
 8006bc2:	f002 f8bf 	bl	8008d44 <__hexnan>
 8006bc6:	2805      	cmp	r0, #5
 8006bc8:	d126      	bne.n	8006c18 <_strtod_l+0x388>
 8006bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bcc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006bd0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006bd4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006bd8:	e69c      	b.n	8006914 <_strtod_l+0x84>
 8006bda:	210a      	movs	r1, #10
 8006bdc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006be0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006be4:	e7b9      	b.n	8006b5a <_strtod_l+0x2ca>
 8006be6:	2b6e      	cmp	r3, #110	; 0x6e
 8006be8:	e7db      	b.n	8006ba2 <_strtod_l+0x312>
 8006bea:	498f      	ldr	r1, [pc, #572]	; (8006e28 <_strtod_l+0x598>)
 8006bec:	a81d      	add	r0, sp, #116	; 0x74
 8006bee:	f002 f895 	bl	8008d1c <__match>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f43f aeaa 	beq.w	800694c <_strtod_l+0xbc>
 8006bf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bfa:	498c      	ldr	r1, [pc, #560]	; (8006e2c <_strtod_l+0x59c>)
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	a81d      	add	r0, sp, #116	; 0x74
 8006c00:	931d      	str	r3, [sp, #116]	; 0x74
 8006c02:	f002 f88b 	bl	8008d1c <__match>
 8006c06:	b910      	cbnz	r0, 8006c0e <_strtod_l+0x37e>
 8006c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8006c0e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006e3c <_strtod_l+0x5ac>
 8006c12:	f04f 0a00 	mov.w	sl, #0
 8006c16:	e67d      	b.n	8006914 <_strtod_l+0x84>
 8006c18:	4885      	ldr	r0, [pc, #532]	; (8006e30 <_strtod_l+0x5a0>)
 8006c1a:	f003 f9ed 	bl	8009ff8 <nan>
 8006c1e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006c22:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c26:	e675      	b.n	8006914 <_strtod_l+0x84>
 8006c28:	9b07      	ldr	r3, [sp, #28]
 8006c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c2c:	1af3      	subs	r3, r6, r3
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	bf08      	it	eq
 8006c32:	462f      	moveq	r7, r5
 8006c34:	2d10      	cmp	r5, #16
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	46a8      	mov	r8, r5
 8006c3a:	bfa8      	it	ge
 8006c3c:	f04f 0810 	movge.w	r8, #16
 8006c40:	f7f9 fc60 	bl	8000504 <__aeabi_ui2d>
 8006c44:	2d09      	cmp	r5, #9
 8006c46:	4682      	mov	sl, r0
 8006c48:	468b      	mov	fp, r1
 8006c4a:	dd13      	ble.n	8006c74 <_strtod_l+0x3e4>
 8006c4c:	4b79      	ldr	r3, [pc, #484]	; (8006e34 <_strtod_l+0x5a4>)
 8006c4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006c52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c56:	f7f9 fccf 	bl	80005f8 <__aeabi_dmul>
 8006c5a:	4682      	mov	sl, r0
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	468b      	mov	fp, r1
 8006c60:	f7f9 fc50 	bl	8000504 <__aeabi_ui2d>
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4650      	mov	r0, sl
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	f7f9 fb0e 	bl	800028c <__adddf3>
 8006c70:	4682      	mov	sl, r0
 8006c72:	468b      	mov	fp, r1
 8006c74:	2d0f      	cmp	r5, #15
 8006c76:	dc38      	bgt.n	8006cea <_strtod_l+0x45a>
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f43f ae4a 	beq.w	8006914 <_strtod_l+0x84>
 8006c80:	dd24      	ble.n	8006ccc <_strtod_l+0x43c>
 8006c82:	2b16      	cmp	r3, #22
 8006c84:	dc0b      	bgt.n	8006c9e <_strtod_l+0x40e>
 8006c86:	4d6b      	ldr	r5, [pc, #428]	; (8006e34 <_strtod_l+0x5a4>)
 8006c88:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006c8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006c90:	4652      	mov	r2, sl
 8006c92:	465b      	mov	r3, fp
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4682      	mov	sl, r0
 8006c9a:	468b      	mov	fp, r1
 8006c9c:	e63a      	b.n	8006914 <_strtod_l+0x84>
 8006c9e:	9a08      	ldr	r2, [sp, #32]
 8006ca0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	db20      	blt.n	8006cea <_strtod_l+0x45a>
 8006ca8:	4c62      	ldr	r4, [pc, #392]	; (8006e34 <_strtod_l+0x5a4>)
 8006caa:	f1c5 050f 	rsb	r5, r5, #15
 8006cae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cba:	f7f9 fc9d 	bl	80005f8 <__aeabi_dmul>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	1b5d      	subs	r5, r3, r5
 8006cc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006cca:	e7e3      	b.n	8006c94 <_strtod_l+0x404>
 8006ccc:	9b08      	ldr	r3, [sp, #32]
 8006cce:	3316      	adds	r3, #22
 8006cd0:	db0b      	blt.n	8006cea <_strtod_l+0x45a>
 8006cd2:	9b07      	ldr	r3, [sp, #28]
 8006cd4:	4a57      	ldr	r2, [pc, #348]	; (8006e34 <_strtod_l+0x5a4>)
 8006cd6:	1b9e      	subs	r6, r3, r6
 8006cd8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006cdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ce0:	4650      	mov	r0, sl
 8006ce2:	4659      	mov	r1, fp
 8006ce4:	f7f9 fdb2 	bl	800084c <__aeabi_ddiv>
 8006ce8:	e7d6      	b.n	8006c98 <_strtod_l+0x408>
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	eba5 0808 	sub.w	r8, r5, r8
 8006cf0:	4498      	add	r8, r3
 8006cf2:	f1b8 0f00 	cmp.w	r8, #0
 8006cf6:	dd71      	ble.n	8006ddc <_strtod_l+0x54c>
 8006cf8:	f018 030f 	ands.w	r3, r8, #15
 8006cfc:	d00a      	beq.n	8006d14 <_strtod_l+0x484>
 8006cfe:	494d      	ldr	r1, [pc, #308]	; (8006e34 <_strtod_l+0x5a4>)
 8006d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d04:	4652      	mov	r2, sl
 8006d06:	465b      	mov	r3, fp
 8006d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	4682      	mov	sl, r0
 8006d12:	468b      	mov	fp, r1
 8006d14:	f038 080f 	bics.w	r8, r8, #15
 8006d18:	d04d      	beq.n	8006db6 <_strtod_l+0x526>
 8006d1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006d1e:	dd22      	ble.n	8006d66 <_strtod_l+0x4d6>
 8006d20:	2500      	movs	r5, #0
 8006d22:	462e      	mov	r6, r5
 8006d24:	9509      	str	r5, [sp, #36]	; 0x24
 8006d26:	9507      	str	r5, [sp, #28]
 8006d28:	2322      	movs	r3, #34	; 0x22
 8006d2a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006e3c <_strtod_l+0x5ac>
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	f04f 0a00 	mov.w	sl, #0
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f43f adec 	beq.w	8006914 <_strtod_l+0x84>
 8006d3c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006d3e:	4620      	mov	r0, r4
 8006d40:	f002 f970 	bl	8009024 <_Bfree>
 8006d44:	9907      	ldr	r1, [sp, #28]
 8006d46:	4620      	mov	r0, r4
 8006d48:	f002 f96c 	bl	8009024 <_Bfree>
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f002 f968 	bl	8009024 <_Bfree>
 8006d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d56:	4620      	mov	r0, r4
 8006d58:	f002 f964 	bl	8009024 <_Bfree>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f002 f960 	bl	8009024 <_Bfree>
 8006d64:	e5d6      	b.n	8006914 <_strtod_l+0x84>
 8006d66:	2300      	movs	r3, #0
 8006d68:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006d6c:	4650      	mov	r0, sl
 8006d6e:	4659      	mov	r1, fp
 8006d70:	4699      	mov	r9, r3
 8006d72:	f1b8 0f01 	cmp.w	r8, #1
 8006d76:	dc21      	bgt.n	8006dbc <_strtod_l+0x52c>
 8006d78:	b10b      	cbz	r3, 8006d7e <_strtod_l+0x4ee>
 8006d7a:	4682      	mov	sl, r0
 8006d7c:	468b      	mov	fp, r1
 8006d7e:	4b2e      	ldr	r3, [pc, #184]	; (8006e38 <_strtod_l+0x5a8>)
 8006d80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006d84:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006d88:	4652      	mov	r2, sl
 8006d8a:	465b      	mov	r3, fp
 8006d8c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	4b29      	ldr	r3, [pc, #164]	; (8006e3c <_strtod_l+0x5ac>)
 8006d96:	460a      	mov	r2, r1
 8006d98:	400b      	ands	r3, r1
 8006d9a:	4929      	ldr	r1, [pc, #164]	; (8006e40 <_strtod_l+0x5b0>)
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	4682      	mov	sl, r0
 8006da0:	d8be      	bhi.n	8006d20 <_strtod_l+0x490>
 8006da2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006da6:	428b      	cmp	r3, r1
 8006da8:	bf86      	itte	hi
 8006daa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006e44 <_strtod_l+0x5b4>
 8006dae:	f04f 3aff 	movhi.w	sl, #4294967295
 8006db2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006db6:	2300      	movs	r3, #0
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	e081      	b.n	8006ec0 <_strtod_l+0x630>
 8006dbc:	f018 0f01 	tst.w	r8, #1
 8006dc0:	d007      	beq.n	8006dd2 <_strtod_l+0x542>
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <_strtod_l+0x5a8>)
 8006dc4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	f7f9 fc14 	bl	80005f8 <__aeabi_dmul>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f109 0901 	add.w	r9, r9, #1
 8006dd6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006dda:	e7ca      	b.n	8006d72 <_strtod_l+0x4e2>
 8006ddc:	d0eb      	beq.n	8006db6 <_strtod_l+0x526>
 8006dde:	f1c8 0800 	rsb	r8, r8, #0
 8006de2:	f018 020f 	ands.w	r2, r8, #15
 8006de6:	d00a      	beq.n	8006dfe <_strtod_l+0x56e>
 8006de8:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <_strtod_l+0x5a4>)
 8006dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dee:	4650      	mov	r0, sl
 8006df0:	4659      	mov	r1, fp
 8006df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df6:	f7f9 fd29 	bl	800084c <__aeabi_ddiv>
 8006dfa:	4682      	mov	sl, r0
 8006dfc:	468b      	mov	fp, r1
 8006dfe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006e02:	d0d8      	beq.n	8006db6 <_strtod_l+0x526>
 8006e04:	f1b8 0f1f 	cmp.w	r8, #31
 8006e08:	dd1e      	ble.n	8006e48 <_strtod_l+0x5b8>
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	462e      	mov	r6, r5
 8006e0e:	9509      	str	r5, [sp, #36]	; 0x24
 8006e10:	9507      	str	r5, [sp, #28]
 8006e12:	2322      	movs	r3, #34	; 0x22
 8006e14:	f04f 0a00 	mov.w	sl, #0
 8006e18:	f04f 0b00 	mov.w	fp, #0
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	e789      	b.n	8006d34 <_strtod_l+0x4a4>
 8006e20:	0800a409 	.word	0x0800a409
 8006e24:	0800a44c 	.word	0x0800a44c
 8006e28:	0800a401 	.word	0x0800a401
 8006e2c:	0800a58c 	.word	0x0800a58c
 8006e30:	0800a8a8 	.word	0x0800a8a8
 8006e34:	0800a788 	.word	0x0800a788
 8006e38:	0800a760 	.word	0x0800a760
 8006e3c:	7ff00000 	.word	0x7ff00000
 8006e40:	7ca00000 	.word	0x7ca00000
 8006e44:	7fefffff 	.word	0x7fefffff
 8006e48:	f018 0310 	ands.w	r3, r8, #16
 8006e4c:	bf18      	it	ne
 8006e4e:	236a      	movne	r3, #106	; 0x6a
 8006e50:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007208 <_strtod_l+0x978>
 8006e54:	9304      	str	r3, [sp, #16]
 8006e56:	4650      	mov	r0, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f018 0f01 	tst.w	r8, #1
 8006e60:	d004      	beq.n	8006e6c <_strtod_l+0x5dc>
 8006e62:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006e70:	f109 0908 	add.w	r9, r9, #8
 8006e74:	d1f2      	bne.n	8006e5c <_strtod_l+0x5cc>
 8006e76:	b10b      	cbz	r3, 8006e7c <_strtod_l+0x5ec>
 8006e78:	4682      	mov	sl, r0
 8006e7a:	468b      	mov	fp, r1
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	b1bb      	cbz	r3, 8006eb0 <_strtod_l+0x620>
 8006e80:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006e84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	4659      	mov	r1, fp
 8006e8c:	dd10      	ble.n	8006eb0 <_strtod_l+0x620>
 8006e8e:	2b1f      	cmp	r3, #31
 8006e90:	f340 8128 	ble.w	80070e4 <_strtod_l+0x854>
 8006e94:	2b34      	cmp	r3, #52	; 0x34
 8006e96:	bfde      	ittt	le
 8006e98:	3b20      	suble	r3, #32
 8006e9a:	f04f 32ff 	movle.w	r2, #4294967295
 8006e9e:	fa02 f303 	lslle.w	r3, r2, r3
 8006ea2:	f04f 0a00 	mov.w	sl, #0
 8006ea6:	bfcc      	ite	gt
 8006ea8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006eac:	ea03 0b01 	andle.w	fp, r3, r1
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	f7f9 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d1a4      	bne.n	8006e0a <_strtod_l+0x57a>
 8006ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	463a      	mov	r2, r7
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f002 f916 	bl	80090fc <__s2b>
 8006ed0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	f43f af24 	beq.w	8006d20 <_strtod_l+0x490>
 8006ed8:	9b07      	ldr	r3, [sp, #28]
 8006eda:	1b9e      	subs	r6, r3, r6
 8006edc:	9b08      	ldr	r3, [sp, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bfb4      	ite	lt
 8006ee2:	4633      	movlt	r3, r6
 8006ee4:	2300      	movge	r3, #0
 8006ee6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	2500      	movs	r5, #0
 8006eec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006ef0:	9318      	str	r3, [sp, #96]	; 0x60
 8006ef2:	462e      	mov	r6, r5
 8006ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	6859      	ldr	r1, [r3, #4]
 8006efa:	f002 f853 	bl	8008fa4 <_Balloc>
 8006efe:	9007      	str	r0, [sp, #28]
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f af11 	beq.w	8006d28 <_strtod_l+0x498>
 8006f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	3202      	adds	r2, #2
 8006f0c:	f103 010c 	add.w	r1, r3, #12
 8006f10:	0092      	lsls	r2, r2, #2
 8006f12:	300c      	adds	r0, #12
 8006f14:	f002 f838 	bl	8008f88 <memcpy>
 8006f18:	ec4b ab10 	vmov	d0, sl, fp
 8006f1c:	aa20      	add	r2, sp, #128	; 0x80
 8006f1e:	a91f      	add	r1, sp, #124	; 0x7c
 8006f20:	4620      	mov	r0, r4
 8006f22:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006f26:	f002 fc25 	bl	8009774 <__d2b>
 8006f2a:	901e      	str	r0, [sp, #120]	; 0x78
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	f43f aefb 	beq.w	8006d28 <_strtod_l+0x498>
 8006f32:	2101      	movs	r1, #1
 8006f34:	4620      	mov	r0, r4
 8006f36:	f002 f97b 	bl	8009230 <__i2b>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f43f aef3 	beq.w	8006d28 <_strtod_l+0x498>
 8006f42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f44:	9904      	ldr	r1, [sp, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	bfab      	itete	ge
 8006f4a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006f4c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006f4e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006f50:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006f54:	bfac      	ite	ge
 8006f56:	eb03 0902 	addge.w	r9, r3, r2
 8006f5a:	1ad7      	sublt	r7, r2, r3
 8006f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006f5e:	eba3 0801 	sub.w	r8, r3, r1
 8006f62:	4490      	add	r8, r2
 8006f64:	4ba3      	ldr	r3, [pc, #652]	; (80071f4 <_strtod_l+0x964>)
 8006f66:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f6a:	4598      	cmp	r8, r3
 8006f6c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f70:	f280 80cc 	bge.w	800710c <_strtod_l+0x87c>
 8006f74:	eba3 0308 	sub.w	r3, r3, r8
 8006f78:	2b1f      	cmp	r3, #31
 8006f7a:	eba2 0203 	sub.w	r2, r2, r3
 8006f7e:	f04f 0101 	mov.w	r1, #1
 8006f82:	f300 80b6 	bgt.w	80070f2 <_strtod_l+0x862>
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	9311      	str	r3, [sp, #68]	; 0x44
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006f90:	eb09 0802 	add.w	r8, r9, r2
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	45c1      	cmp	r9, r8
 8006f98:	4417      	add	r7, r2
 8006f9a:	441f      	add	r7, r3
 8006f9c:	464b      	mov	r3, r9
 8006f9e:	bfa8      	it	ge
 8006fa0:	4643      	movge	r3, r8
 8006fa2:	42bb      	cmp	r3, r7
 8006fa4:	bfa8      	it	ge
 8006fa6:	463b      	movge	r3, r7
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bfc2      	ittt	gt
 8006fac:	eba8 0803 	subgt.w	r8, r8, r3
 8006fb0:	1aff      	subgt	r7, r7, r3
 8006fb2:	eba9 0903 	subgt.w	r9, r9, r3
 8006fb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd17      	ble.n	8006fec <_strtod_l+0x75c>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f002 f9f1 	bl	80093a8 <__pow5mult>
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	f43f aead 	beq.w	8006d28 <_strtod_l+0x498>
 8006fce:	4601      	mov	r1, r0
 8006fd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f002 f942 	bl	800925c <__multiply>
 8006fd8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	f43f aea4 	beq.w	8006d28 <_strtod_l+0x498>
 8006fe0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f002 f81e 	bl	8009024 <_Bfree>
 8006fe8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fea:	931e      	str	r3, [sp, #120]	; 0x78
 8006fec:	f1b8 0f00 	cmp.w	r8, #0
 8006ff0:	f300 8091 	bgt.w	8007116 <_strtod_l+0x886>
 8006ff4:	9b08      	ldr	r3, [sp, #32]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd08      	ble.n	800700c <_strtod_l+0x77c>
 8006ffa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ffc:	9907      	ldr	r1, [sp, #28]
 8006ffe:	4620      	mov	r0, r4
 8007000:	f002 f9d2 	bl	80093a8 <__pow5mult>
 8007004:	9007      	str	r0, [sp, #28]
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ae8e 	beq.w	8006d28 <_strtod_l+0x498>
 800700c:	2f00      	cmp	r7, #0
 800700e:	dd08      	ble.n	8007022 <_strtod_l+0x792>
 8007010:	9907      	ldr	r1, [sp, #28]
 8007012:	463a      	mov	r2, r7
 8007014:	4620      	mov	r0, r4
 8007016:	f002 fa21 	bl	800945c <__lshift>
 800701a:	9007      	str	r0, [sp, #28]
 800701c:	2800      	cmp	r0, #0
 800701e:	f43f ae83 	beq.w	8006d28 <_strtod_l+0x498>
 8007022:	f1b9 0f00 	cmp.w	r9, #0
 8007026:	dd08      	ble.n	800703a <_strtod_l+0x7aa>
 8007028:	4631      	mov	r1, r6
 800702a:	464a      	mov	r2, r9
 800702c:	4620      	mov	r0, r4
 800702e:	f002 fa15 	bl	800945c <__lshift>
 8007032:	4606      	mov	r6, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	f43f ae77 	beq.w	8006d28 <_strtod_l+0x498>
 800703a:	9a07      	ldr	r2, [sp, #28]
 800703c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800703e:	4620      	mov	r0, r4
 8007040:	f002 fa94 	bl	800956c <__mdiff>
 8007044:	4605      	mov	r5, r0
 8007046:	2800      	cmp	r0, #0
 8007048:	f43f ae6e 	beq.w	8006d28 <_strtod_l+0x498>
 800704c:	68c3      	ldr	r3, [r0, #12]
 800704e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007050:	2300      	movs	r3, #0
 8007052:	60c3      	str	r3, [r0, #12]
 8007054:	4631      	mov	r1, r6
 8007056:	f002 fa6d 	bl	8009534 <__mcmp>
 800705a:	2800      	cmp	r0, #0
 800705c:	da65      	bge.n	800712a <_strtod_l+0x89a>
 800705e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007060:	ea53 030a 	orrs.w	r3, r3, sl
 8007064:	f040 8087 	bne.w	8007176 <_strtod_l+0x8e6>
 8007068:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800706c:	2b00      	cmp	r3, #0
 800706e:	f040 8082 	bne.w	8007176 <_strtod_l+0x8e6>
 8007072:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007076:	0d1b      	lsrs	r3, r3, #20
 8007078:	051b      	lsls	r3, r3, #20
 800707a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800707e:	d97a      	bls.n	8007176 <_strtod_l+0x8e6>
 8007080:	696b      	ldr	r3, [r5, #20]
 8007082:	b913      	cbnz	r3, 800708a <_strtod_l+0x7fa>
 8007084:	692b      	ldr	r3, [r5, #16]
 8007086:	2b01      	cmp	r3, #1
 8007088:	dd75      	ble.n	8007176 <_strtod_l+0x8e6>
 800708a:	4629      	mov	r1, r5
 800708c:	2201      	movs	r2, #1
 800708e:	4620      	mov	r0, r4
 8007090:	f002 f9e4 	bl	800945c <__lshift>
 8007094:	4631      	mov	r1, r6
 8007096:	4605      	mov	r5, r0
 8007098:	f002 fa4c 	bl	8009534 <__mcmp>
 800709c:	2800      	cmp	r0, #0
 800709e:	dd6a      	ble.n	8007176 <_strtod_l+0x8e6>
 80070a0:	9904      	ldr	r1, [sp, #16]
 80070a2:	4a55      	ldr	r2, [pc, #340]	; (80071f8 <_strtod_l+0x968>)
 80070a4:	465b      	mov	r3, fp
 80070a6:	2900      	cmp	r1, #0
 80070a8:	f000 8085 	beq.w	80071b6 <_strtod_l+0x926>
 80070ac:	ea02 010b 	and.w	r1, r2, fp
 80070b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070b4:	dc7f      	bgt.n	80071b6 <_strtod_l+0x926>
 80070b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070ba:	f77f aeaa 	ble.w	8006e12 <_strtod_l+0x582>
 80070be:	4a4f      	ldr	r2, [pc, #316]	; (80071fc <_strtod_l+0x96c>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80070c6:	4650      	mov	r0, sl
 80070c8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80070cc:	4659      	mov	r1, fp
 80070ce:	f7f9 fa93 	bl	80005f8 <__aeabi_dmul>
 80070d2:	460b      	mov	r3, r1
 80070d4:	4303      	orrs	r3, r0
 80070d6:	bf08      	it	eq
 80070d8:	2322      	moveq	r3, #34	; 0x22
 80070da:	4682      	mov	sl, r0
 80070dc:	468b      	mov	fp, r1
 80070de:	bf08      	it	eq
 80070e0:	6023      	streq	r3, [r4, #0]
 80070e2:	e62b      	b.n	8006d3c <_strtod_l+0x4ac>
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ec:	ea03 0a0a 	and.w	sl, r3, sl
 80070f0:	e6de      	b.n	8006eb0 <_strtod_l+0x620>
 80070f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80070f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80070fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80070fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007102:	fa01 f308 	lsl.w	r3, r1, r8
 8007106:	930c      	str	r3, [sp, #48]	; 0x30
 8007108:	9111      	str	r1, [sp, #68]	; 0x44
 800710a:	e741      	b.n	8006f90 <_strtod_l+0x700>
 800710c:	2300      	movs	r3, #0
 800710e:	930c      	str	r3, [sp, #48]	; 0x30
 8007110:	2301      	movs	r3, #1
 8007112:	9311      	str	r3, [sp, #68]	; 0x44
 8007114:	e73c      	b.n	8006f90 <_strtod_l+0x700>
 8007116:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007118:	4642      	mov	r2, r8
 800711a:	4620      	mov	r0, r4
 800711c:	f002 f99e 	bl	800945c <__lshift>
 8007120:	901e      	str	r0, [sp, #120]	; 0x78
 8007122:	2800      	cmp	r0, #0
 8007124:	f47f af66 	bne.w	8006ff4 <_strtod_l+0x764>
 8007128:	e5fe      	b.n	8006d28 <_strtod_l+0x498>
 800712a:	465f      	mov	r7, fp
 800712c:	d16e      	bne.n	800720c <_strtod_l+0x97c>
 800712e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007134:	b342      	cbz	r2, 8007188 <_strtod_l+0x8f8>
 8007136:	4a32      	ldr	r2, [pc, #200]	; (8007200 <_strtod_l+0x970>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d128      	bne.n	800718e <_strtod_l+0x8fe>
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4650      	mov	r0, sl
 8007140:	b1eb      	cbz	r3, 800717e <_strtod_l+0x8ee>
 8007142:	4a2d      	ldr	r2, [pc, #180]	; (80071f8 <_strtod_l+0x968>)
 8007144:	403a      	ands	r2, r7
 8007146:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800714a:	f04f 31ff 	mov.w	r1, #4294967295
 800714e:	d819      	bhi.n	8007184 <_strtod_l+0x8f4>
 8007150:	0d12      	lsrs	r2, r2, #20
 8007152:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	4298      	cmp	r0, r3
 800715c:	d117      	bne.n	800718e <_strtod_l+0x8fe>
 800715e:	4b29      	ldr	r3, [pc, #164]	; (8007204 <_strtod_l+0x974>)
 8007160:	429f      	cmp	r7, r3
 8007162:	d102      	bne.n	800716a <_strtod_l+0x8da>
 8007164:	3001      	adds	r0, #1
 8007166:	f43f addf 	beq.w	8006d28 <_strtod_l+0x498>
 800716a:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <_strtod_l+0x968>)
 800716c:	403b      	ands	r3, r7
 800716e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007172:	f04f 0a00 	mov.w	sl, #0
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1a0      	bne.n	80070be <_strtod_l+0x82e>
 800717c:	e5de      	b.n	8006d3c <_strtod_l+0x4ac>
 800717e:	f04f 33ff 	mov.w	r3, #4294967295
 8007182:	e7ea      	b.n	800715a <_strtod_l+0x8ca>
 8007184:	460b      	mov	r3, r1
 8007186:	e7e8      	b.n	800715a <_strtod_l+0x8ca>
 8007188:	ea53 030a 	orrs.w	r3, r3, sl
 800718c:	d088      	beq.n	80070a0 <_strtod_l+0x810>
 800718e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007190:	b1db      	cbz	r3, 80071ca <_strtod_l+0x93a>
 8007192:	423b      	tst	r3, r7
 8007194:	d0ef      	beq.n	8007176 <_strtod_l+0x8e6>
 8007196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007198:	9a04      	ldr	r2, [sp, #16]
 800719a:	4650      	mov	r0, sl
 800719c:	4659      	mov	r1, fp
 800719e:	b1c3      	cbz	r3, 80071d2 <_strtod_l+0x942>
 80071a0:	f7ff fb5a 	bl	8006858 <sulp>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071ac:	f7f9 f86e 	bl	800028c <__adddf3>
 80071b0:	4682      	mov	sl, r0
 80071b2:	468b      	mov	fp, r1
 80071b4:	e7df      	b.n	8007176 <_strtod_l+0x8e6>
 80071b6:	4013      	ands	r3, r2
 80071b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80071c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80071c4:	f04f 3aff 	mov.w	sl, #4294967295
 80071c8:	e7d5      	b.n	8007176 <_strtod_l+0x8e6>
 80071ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071cc:	ea13 0f0a 	tst.w	r3, sl
 80071d0:	e7e0      	b.n	8007194 <_strtod_l+0x904>
 80071d2:	f7ff fb41 	bl	8006858 <sulp>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071de:	f7f9 f853 	bl	8000288 <__aeabi_dsub>
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	4682      	mov	sl, r0
 80071e8:	468b      	mov	fp, r1
 80071ea:	f7f9 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d0c1      	beq.n	8007176 <_strtod_l+0x8e6>
 80071f2:	e60e      	b.n	8006e12 <_strtod_l+0x582>
 80071f4:	fffffc02 	.word	0xfffffc02
 80071f8:	7ff00000 	.word	0x7ff00000
 80071fc:	39500000 	.word	0x39500000
 8007200:	000fffff 	.word	0x000fffff
 8007204:	7fefffff 	.word	0x7fefffff
 8007208:	0800a460 	.word	0x0800a460
 800720c:	4631      	mov	r1, r6
 800720e:	4628      	mov	r0, r5
 8007210:	f002 fb0c 	bl	800982c <__ratio>
 8007214:	ec59 8b10 	vmov	r8, r9, d0
 8007218:	ee10 0a10 	vmov	r0, s0
 800721c:	2200      	movs	r2, #0
 800721e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007222:	4649      	mov	r1, r9
 8007224:	f7f9 fc64 	bl	8000af0 <__aeabi_dcmple>
 8007228:	2800      	cmp	r0, #0
 800722a:	d07c      	beq.n	8007326 <_strtod_l+0xa96>
 800722c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d04c      	beq.n	80072cc <_strtod_l+0xa3c>
 8007232:	4b95      	ldr	r3, [pc, #596]	; (8007488 <_strtod_l+0xbf8>)
 8007234:	2200      	movs	r2, #0
 8007236:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800723a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007488 <_strtod_l+0xbf8>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	4b92      	ldr	r3, [pc, #584]	; (800748c <_strtod_l+0xbfc>)
 8007244:	403b      	ands	r3, r7
 8007246:	9311      	str	r3, [sp, #68]	; 0x44
 8007248:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800724a:	4b91      	ldr	r3, [pc, #580]	; (8007490 <_strtod_l+0xc00>)
 800724c:	429a      	cmp	r2, r3
 800724e:	f040 80b2 	bne.w	80073b6 <_strtod_l+0xb26>
 8007252:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800725a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800725e:	ec4b ab10 	vmov	d0, sl, fp
 8007262:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007266:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800726a:	f002 fa07 	bl	800967c <__ulp>
 800726e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007272:	ec53 2b10 	vmov	r2, r3, d0
 8007276:	f7f9 f9bf 	bl	80005f8 <__aeabi_dmul>
 800727a:	4652      	mov	r2, sl
 800727c:	465b      	mov	r3, fp
 800727e:	f7f9 f805 	bl	800028c <__adddf3>
 8007282:	460b      	mov	r3, r1
 8007284:	4981      	ldr	r1, [pc, #516]	; (800748c <_strtod_l+0xbfc>)
 8007286:	4a83      	ldr	r2, [pc, #524]	; (8007494 <_strtod_l+0xc04>)
 8007288:	4019      	ands	r1, r3
 800728a:	4291      	cmp	r1, r2
 800728c:	4682      	mov	sl, r0
 800728e:	d95e      	bls.n	800734e <_strtod_l+0xabe>
 8007290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007292:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007296:	4293      	cmp	r3, r2
 8007298:	d103      	bne.n	80072a2 <_strtod_l+0xa12>
 800729a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729c:	3301      	adds	r3, #1
 800729e:	f43f ad43 	beq.w	8006d28 <_strtod_l+0x498>
 80072a2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80074a0 <_strtod_l+0xc10>
 80072a6:	f04f 3aff 	mov.w	sl, #4294967295
 80072aa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072ac:	4620      	mov	r0, r4
 80072ae:	f001 feb9 	bl	8009024 <_Bfree>
 80072b2:	9907      	ldr	r1, [sp, #28]
 80072b4:	4620      	mov	r0, r4
 80072b6:	f001 feb5 	bl	8009024 <_Bfree>
 80072ba:	4631      	mov	r1, r6
 80072bc:	4620      	mov	r0, r4
 80072be:	f001 feb1 	bl	8009024 <_Bfree>
 80072c2:	4629      	mov	r1, r5
 80072c4:	4620      	mov	r0, r4
 80072c6:	f001 fead 	bl	8009024 <_Bfree>
 80072ca:	e613      	b.n	8006ef4 <_strtod_l+0x664>
 80072cc:	f1ba 0f00 	cmp.w	sl, #0
 80072d0:	d11b      	bne.n	800730a <_strtod_l+0xa7a>
 80072d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072d6:	b9f3      	cbnz	r3, 8007316 <_strtod_l+0xa86>
 80072d8:	4b6b      	ldr	r3, [pc, #428]	; (8007488 <_strtod_l+0xbf8>)
 80072da:	2200      	movs	r2, #0
 80072dc:	4640      	mov	r0, r8
 80072de:	4649      	mov	r1, r9
 80072e0:	f7f9 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80072e4:	b9d0      	cbnz	r0, 800731c <_strtod_l+0xa8c>
 80072e6:	4640      	mov	r0, r8
 80072e8:	4649      	mov	r1, r9
 80072ea:	4b6b      	ldr	r3, [pc, #428]	; (8007498 <_strtod_l+0xc08>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7f9 f983 	bl	80005f8 <__aeabi_dmul>
 80072f2:	4680      	mov	r8, r0
 80072f4:	4689      	mov	r9, r1
 80072f6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072fa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80072fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8007300:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007304:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007308:	e79b      	b.n	8007242 <_strtod_l+0x9b2>
 800730a:	f1ba 0f01 	cmp.w	sl, #1
 800730e:	d102      	bne.n	8007316 <_strtod_l+0xa86>
 8007310:	2f00      	cmp	r7, #0
 8007312:	f43f ad7e 	beq.w	8006e12 <_strtod_l+0x582>
 8007316:	4b61      	ldr	r3, [pc, #388]	; (800749c <_strtod_l+0xc0c>)
 8007318:	2200      	movs	r2, #0
 800731a:	e78c      	b.n	8007236 <_strtod_l+0x9a6>
 800731c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007498 <_strtod_l+0xc08>
 8007320:	f04f 0800 	mov.w	r8, #0
 8007324:	e7e7      	b.n	80072f6 <_strtod_l+0xa66>
 8007326:	4b5c      	ldr	r3, [pc, #368]	; (8007498 <_strtod_l+0xc08>)
 8007328:	4640      	mov	r0, r8
 800732a:	4649      	mov	r1, r9
 800732c:	2200      	movs	r2, #0
 800732e:	f7f9 f963 	bl	80005f8 <__aeabi_dmul>
 8007332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007334:	4680      	mov	r8, r0
 8007336:	4689      	mov	r9, r1
 8007338:	b933      	cbnz	r3, 8007348 <_strtod_l+0xab8>
 800733a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800733e:	9012      	str	r0, [sp, #72]	; 0x48
 8007340:	9313      	str	r3, [sp, #76]	; 0x4c
 8007342:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007346:	e7dd      	b.n	8007304 <_strtod_l+0xa74>
 8007348:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800734c:	e7f9      	b.n	8007342 <_strtod_l+0xab2>
 800734e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1a8      	bne.n	80072aa <_strtod_l+0xa1a>
 8007358:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800735c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	051b      	lsls	r3, r3, #20
 8007362:	429a      	cmp	r2, r3
 8007364:	d1a1      	bne.n	80072aa <_strtod_l+0xa1a>
 8007366:	4640      	mov	r0, r8
 8007368:	4649      	mov	r1, r9
 800736a:	f7f9 fca5 	bl	8000cb8 <__aeabi_d2lz>
 800736e:	f7f9 f915 	bl	800059c <__aeabi_l2d>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f8 ff85 	bl	8000288 <__aeabi_dsub>
 800737e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007384:	ea43 030a 	orr.w	r3, r3, sl
 8007388:	4313      	orrs	r3, r2
 800738a:	4680      	mov	r8, r0
 800738c:	4689      	mov	r9, r1
 800738e:	d053      	beq.n	8007438 <_strtod_l+0xba8>
 8007390:	a335      	add	r3, pc, #212	; (adr r3, 8007468 <_strtod_l+0xbd8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 fba1 	bl	8000adc <__aeabi_dcmplt>
 800739a:	2800      	cmp	r0, #0
 800739c:	f47f acce 	bne.w	8006d3c <_strtod_l+0x4ac>
 80073a0:	a333      	add	r3, pc, #204	; (adr r3, 8007470 <_strtod_l+0xbe0>)
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	4640      	mov	r0, r8
 80073a8:	4649      	mov	r1, r9
 80073aa:	f7f9 fbb5 	bl	8000b18 <__aeabi_dcmpgt>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	f43f af7b 	beq.w	80072aa <_strtod_l+0xa1a>
 80073b4:	e4c2      	b.n	8006d3c <_strtod_l+0x4ac>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	b333      	cbz	r3, 8007408 <_strtod_l+0xb78>
 80073ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073c0:	d822      	bhi.n	8007408 <_strtod_l+0xb78>
 80073c2:	a32d      	add	r3, pc, #180	; (adr r3, 8007478 <_strtod_l+0xbe8>)
 80073c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f9 fb90 	bl	8000af0 <__aeabi_dcmple>
 80073d0:	b1a0      	cbz	r0, 80073fc <_strtod_l+0xb6c>
 80073d2:	4649      	mov	r1, r9
 80073d4:	4640      	mov	r0, r8
 80073d6:	f7f9 fbe7 	bl	8000ba8 <__aeabi_d2uiz>
 80073da:	2801      	cmp	r0, #1
 80073dc:	bf38      	it	cc
 80073de:	2001      	movcc	r0, #1
 80073e0:	f7f9 f890 	bl	8000504 <__aeabi_ui2d>
 80073e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e6:	4680      	mov	r8, r0
 80073e8:	4689      	mov	r9, r1
 80073ea:	bb13      	cbnz	r3, 8007432 <_strtod_l+0xba2>
 80073ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073f0:	9014      	str	r0, [sp, #80]	; 0x50
 80073f2:	9315      	str	r3, [sp, #84]	; 0x54
 80073f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80073f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007400:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	930d      	str	r3, [sp, #52]	; 0x34
 8007408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800740c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007410:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007414:	f002 f932 	bl	800967c <__ulp>
 8007418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800741c:	ec53 2b10 	vmov	r2, r3, d0
 8007420:	f7f9 f8ea 	bl	80005f8 <__aeabi_dmul>
 8007424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007428:	f7f8 ff30 	bl	800028c <__adddf3>
 800742c:	4682      	mov	sl, r0
 800742e:	468b      	mov	fp, r1
 8007430:	e78f      	b.n	8007352 <_strtod_l+0xac2>
 8007432:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007436:	e7dd      	b.n	80073f4 <_strtod_l+0xb64>
 8007438:	a311      	add	r3, pc, #68	; (adr r3, 8007480 <_strtod_l+0xbf0>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 fb4d 	bl	8000adc <__aeabi_dcmplt>
 8007442:	e7b4      	b.n	80073ae <_strtod_l+0xb1e>
 8007444:	2300      	movs	r3, #0
 8007446:	930e      	str	r3, [sp, #56]	; 0x38
 8007448:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800744a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	f7ff ba65 	b.w	800691c <_strtod_l+0x8c>
 8007452:	2b65      	cmp	r3, #101	; 0x65
 8007454:	f43f ab5d 	beq.w	8006b12 <_strtod_l+0x282>
 8007458:	2b45      	cmp	r3, #69	; 0x45
 800745a:	f43f ab5a 	beq.w	8006b12 <_strtod_l+0x282>
 800745e:	2201      	movs	r2, #1
 8007460:	f7ff bb92 	b.w	8006b88 <_strtod_l+0x2f8>
 8007464:	f3af 8000 	nop.w
 8007468:	94a03595 	.word	0x94a03595
 800746c:	3fdfffff 	.word	0x3fdfffff
 8007470:	35afe535 	.word	0x35afe535
 8007474:	3fe00000 	.word	0x3fe00000
 8007478:	ffc00000 	.word	0xffc00000
 800747c:	41dfffff 	.word	0x41dfffff
 8007480:	94a03595 	.word	0x94a03595
 8007484:	3fcfffff 	.word	0x3fcfffff
 8007488:	3ff00000 	.word	0x3ff00000
 800748c:	7ff00000 	.word	0x7ff00000
 8007490:	7fe00000 	.word	0x7fe00000
 8007494:	7c9fffff 	.word	0x7c9fffff
 8007498:	3fe00000 	.word	0x3fe00000
 800749c:	bff00000 	.word	0xbff00000
 80074a0:	7fefffff 	.word	0x7fefffff

080074a4 <_strtod_r>:
 80074a4:	4b01      	ldr	r3, [pc, #4]	; (80074ac <_strtod_r+0x8>)
 80074a6:	f7ff b9f3 	b.w	8006890 <_strtod_l>
 80074aa:	bf00      	nop
 80074ac:	2000009c 	.word	0x2000009c

080074b0 <_strtol_l.isra.0>:
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b6:	d001      	beq.n	80074bc <_strtol_l.isra.0+0xc>
 80074b8:	2b24      	cmp	r3, #36	; 0x24
 80074ba:	d906      	bls.n	80074ca <_strtol_l.isra.0+0x1a>
 80074bc:	f7fe fa6c 	bl	8005998 <__errno>
 80074c0:	2316      	movs	r3, #22
 80074c2:	6003      	str	r3, [r0, #0]
 80074c4:	2000      	movs	r0, #0
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	4f3a      	ldr	r7, [pc, #232]	; (80075b4 <_strtol_l.isra.0+0x104>)
 80074cc:	468e      	mov	lr, r1
 80074ce:	4676      	mov	r6, lr
 80074d0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80074d4:	5de5      	ldrb	r5, [r4, r7]
 80074d6:	f015 0508 	ands.w	r5, r5, #8
 80074da:	d1f8      	bne.n	80074ce <_strtol_l.isra.0+0x1e>
 80074dc:	2c2d      	cmp	r4, #45	; 0x2d
 80074de:	d134      	bne.n	800754a <_strtol_l.isra.0+0x9a>
 80074e0:	f89e 4000 	ldrb.w	r4, [lr]
 80074e4:	f04f 0801 	mov.w	r8, #1
 80074e8:	f106 0e02 	add.w	lr, r6, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05c      	beq.n	80075aa <_strtol_l.isra.0+0xfa>
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d10c      	bne.n	800750e <_strtol_l.isra.0+0x5e>
 80074f4:	2c30      	cmp	r4, #48	; 0x30
 80074f6:	d10a      	bne.n	800750e <_strtol_l.isra.0+0x5e>
 80074f8:	f89e 4000 	ldrb.w	r4, [lr]
 80074fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007500:	2c58      	cmp	r4, #88	; 0x58
 8007502:	d14d      	bne.n	80075a0 <_strtol_l.isra.0+0xf0>
 8007504:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007508:	2310      	movs	r3, #16
 800750a:	f10e 0e02 	add.w	lr, lr, #2
 800750e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007512:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007516:	2600      	movs	r6, #0
 8007518:	fbbc f9f3 	udiv	r9, ip, r3
 800751c:	4635      	mov	r5, r6
 800751e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007522:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007526:	2f09      	cmp	r7, #9
 8007528:	d818      	bhi.n	800755c <_strtol_l.isra.0+0xac>
 800752a:	463c      	mov	r4, r7
 800752c:	42a3      	cmp	r3, r4
 800752e:	dd24      	ble.n	800757a <_strtol_l.isra.0+0xca>
 8007530:	2e00      	cmp	r6, #0
 8007532:	db1f      	blt.n	8007574 <_strtol_l.isra.0+0xc4>
 8007534:	45a9      	cmp	r9, r5
 8007536:	d31d      	bcc.n	8007574 <_strtol_l.isra.0+0xc4>
 8007538:	d101      	bne.n	800753e <_strtol_l.isra.0+0x8e>
 800753a:	45a2      	cmp	sl, r4
 800753c:	db1a      	blt.n	8007574 <_strtol_l.isra.0+0xc4>
 800753e:	fb05 4503 	mla	r5, r5, r3, r4
 8007542:	2601      	movs	r6, #1
 8007544:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007548:	e7eb      	b.n	8007522 <_strtol_l.isra.0+0x72>
 800754a:	2c2b      	cmp	r4, #43	; 0x2b
 800754c:	bf08      	it	eq
 800754e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007552:	46a8      	mov	r8, r5
 8007554:	bf08      	it	eq
 8007556:	f106 0e02 	addeq.w	lr, r6, #2
 800755a:	e7c7      	b.n	80074ec <_strtol_l.isra.0+0x3c>
 800755c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007560:	2f19      	cmp	r7, #25
 8007562:	d801      	bhi.n	8007568 <_strtol_l.isra.0+0xb8>
 8007564:	3c37      	subs	r4, #55	; 0x37
 8007566:	e7e1      	b.n	800752c <_strtol_l.isra.0+0x7c>
 8007568:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800756c:	2f19      	cmp	r7, #25
 800756e:	d804      	bhi.n	800757a <_strtol_l.isra.0+0xca>
 8007570:	3c57      	subs	r4, #87	; 0x57
 8007572:	e7db      	b.n	800752c <_strtol_l.isra.0+0x7c>
 8007574:	f04f 36ff 	mov.w	r6, #4294967295
 8007578:	e7e4      	b.n	8007544 <_strtol_l.isra.0+0x94>
 800757a:	2e00      	cmp	r6, #0
 800757c:	da05      	bge.n	800758a <_strtol_l.isra.0+0xda>
 800757e:	2322      	movs	r3, #34	; 0x22
 8007580:	6003      	str	r3, [r0, #0]
 8007582:	4665      	mov	r5, ip
 8007584:	b942      	cbnz	r2, 8007598 <_strtol_l.isra.0+0xe8>
 8007586:	4628      	mov	r0, r5
 8007588:	e79d      	b.n	80074c6 <_strtol_l.isra.0+0x16>
 800758a:	f1b8 0f00 	cmp.w	r8, #0
 800758e:	d000      	beq.n	8007592 <_strtol_l.isra.0+0xe2>
 8007590:	426d      	negs	r5, r5
 8007592:	2a00      	cmp	r2, #0
 8007594:	d0f7      	beq.n	8007586 <_strtol_l.isra.0+0xd6>
 8007596:	b10e      	cbz	r6, 800759c <_strtol_l.isra.0+0xec>
 8007598:	f10e 31ff 	add.w	r1, lr, #4294967295
 800759c:	6011      	str	r1, [r2, #0]
 800759e:	e7f2      	b.n	8007586 <_strtol_l.isra.0+0xd6>
 80075a0:	2430      	movs	r4, #48	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1b3      	bne.n	800750e <_strtol_l.isra.0+0x5e>
 80075a6:	2308      	movs	r3, #8
 80075a8:	e7b1      	b.n	800750e <_strtol_l.isra.0+0x5e>
 80075aa:	2c30      	cmp	r4, #48	; 0x30
 80075ac:	d0a4      	beq.n	80074f8 <_strtol_l.isra.0+0x48>
 80075ae:	230a      	movs	r3, #10
 80075b0:	e7ad      	b.n	800750e <_strtol_l.isra.0+0x5e>
 80075b2:	bf00      	nop
 80075b4:	0800a489 	.word	0x0800a489

080075b8 <_strtol_r>:
 80075b8:	f7ff bf7a 	b.w	80074b0 <_strtol_l.isra.0>

080075bc <__swbuf_r>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	4605      	mov	r5, r0
 80075c4:	b118      	cbz	r0, 80075ce <__swbuf_r+0x12>
 80075c6:	6983      	ldr	r3, [r0, #24]
 80075c8:	b90b      	cbnz	r3, 80075ce <__swbuf_r+0x12>
 80075ca:	f001 f84b 	bl	8008664 <__sinit>
 80075ce:	4b21      	ldr	r3, [pc, #132]	; (8007654 <__swbuf_r+0x98>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d12b      	bne.n	800762c <__swbuf_r+0x70>
 80075d4:	686c      	ldr	r4, [r5, #4]
 80075d6:	69a3      	ldr	r3, [r4, #24]
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	071a      	lsls	r2, r3, #28
 80075de:	d52f      	bpl.n	8007640 <__swbuf_r+0x84>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	b36b      	cbz	r3, 8007640 <__swbuf_r+0x84>
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	6820      	ldr	r0, [r4, #0]
 80075e8:	1ac0      	subs	r0, r0, r3
 80075ea:	6963      	ldr	r3, [r4, #20]
 80075ec:	b2f6      	uxtb	r6, r6
 80075ee:	4283      	cmp	r3, r0
 80075f0:	4637      	mov	r7, r6
 80075f2:	dc04      	bgt.n	80075fe <__swbuf_r+0x42>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 ffa0 	bl	800853c <_fflush_r>
 80075fc:	bb30      	cbnz	r0, 800764c <__swbuf_r+0x90>
 80075fe:	68a3      	ldr	r3, [r4, #8]
 8007600:	3b01      	subs	r3, #1
 8007602:	60a3      	str	r3, [r4, #8]
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	701e      	strb	r6, [r3, #0]
 800760c:	6963      	ldr	r3, [r4, #20]
 800760e:	3001      	adds	r0, #1
 8007610:	4283      	cmp	r3, r0
 8007612:	d004      	beq.n	800761e <__swbuf_r+0x62>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	07db      	lsls	r3, r3, #31
 8007618:	d506      	bpl.n	8007628 <__swbuf_r+0x6c>
 800761a:	2e0a      	cmp	r6, #10
 800761c:	d104      	bne.n	8007628 <__swbuf_r+0x6c>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 ff8b 	bl	800853c <_fflush_r>
 8007626:	b988      	cbnz	r0, 800764c <__swbuf_r+0x90>
 8007628:	4638      	mov	r0, r7
 800762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <__swbuf_r+0x9c>)
 800762e:	429c      	cmp	r4, r3
 8007630:	d101      	bne.n	8007636 <__swbuf_r+0x7a>
 8007632:	68ac      	ldr	r4, [r5, #8]
 8007634:	e7cf      	b.n	80075d6 <__swbuf_r+0x1a>
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <__swbuf_r+0xa0>)
 8007638:	429c      	cmp	r4, r3
 800763a:	bf08      	it	eq
 800763c:	68ec      	ldreq	r4, [r5, #12]
 800763e:	e7ca      	b.n	80075d6 <__swbuf_r+0x1a>
 8007640:	4621      	mov	r1, r4
 8007642:	4628      	mov	r0, r5
 8007644:	f000 f80c 	bl	8007660 <__swsetup_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	d0cb      	beq.n	80075e4 <__swbuf_r+0x28>
 800764c:	f04f 37ff 	mov.w	r7, #4294967295
 8007650:	e7ea      	b.n	8007628 <__swbuf_r+0x6c>
 8007652:	bf00      	nop
 8007654:	0800a640 	.word	0x0800a640
 8007658:	0800a660 	.word	0x0800a660
 800765c:	0800a620 	.word	0x0800a620

08007660 <__swsetup_r>:
 8007660:	4b32      	ldr	r3, [pc, #200]	; (800772c <__swsetup_r+0xcc>)
 8007662:	b570      	push	{r4, r5, r6, lr}
 8007664:	681d      	ldr	r5, [r3, #0]
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	b125      	cbz	r5, 8007676 <__swsetup_r+0x16>
 800766c:	69ab      	ldr	r3, [r5, #24]
 800766e:	b913      	cbnz	r3, 8007676 <__swsetup_r+0x16>
 8007670:	4628      	mov	r0, r5
 8007672:	f000 fff7 	bl	8008664 <__sinit>
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <__swsetup_r+0xd0>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d10f      	bne.n	800769c <__swsetup_r+0x3c>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007684:	0719      	lsls	r1, r3, #28
 8007686:	d42c      	bmi.n	80076e2 <__swsetup_r+0x82>
 8007688:	06dd      	lsls	r5, r3, #27
 800768a:	d411      	bmi.n	80076b0 <__swsetup_r+0x50>
 800768c:	2309      	movs	r3, #9
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	e03e      	b.n	800771a <__swsetup_r+0xba>
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <__swsetup_r+0xd4>)
 800769e:	429c      	cmp	r4, r3
 80076a0:	d101      	bne.n	80076a6 <__swsetup_r+0x46>
 80076a2:	68ac      	ldr	r4, [r5, #8]
 80076a4:	e7eb      	b.n	800767e <__swsetup_r+0x1e>
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <__swsetup_r+0xd8>)
 80076a8:	429c      	cmp	r4, r3
 80076aa:	bf08      	it	eq
 80076ac:	68ec      	ldreq	r4, [r5, #12]
 80076ae:	e7e6      	b.n	800767e <__swsetup_r+0x1e>
 80076b0:	0758      	lsls	r0, r3, #29
 80076b2:	d512      	bpl.n	80076da <__swsetup_r+0x7a>
 80076b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076b6:	b141      	cbz	r1, 80076ca <__swsetup_r+0x6a>
 80076b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076bc:	4299      	cmp	r1, r3
 80076be:	d002      	beq.n	80076c6 <__swsetup_r+0x66>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f002 f939 	bl	8009938 <_free_r>
 80076c6:	2300      	movs	r3, #0
 80076c8:	6363      	str	r3, [r4, #52]	; 0x34
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076d0:	81a3      	strh	r3, [r4, #12]
 80076d2:	2300      	movs	r3, #0
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	b94b      	cbnz	r3, 80076fa <__swsetup_r+0x9a>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	d003      	beq.n	80076fa <__swsetup_r+0x9a>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4630      	mov	r0, r6
 80076f6:	f001 fbed 	bl	8008ed4 <__smakebuf_r>
 80076fa:	89a0      	ldrh	r0, [r4, #12]
 80076fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007700:	f010 0301 	ands.w	r3, r0, #1
 8007704:	d00a      	beq.n	800771c <__swsetup_r+0xbc>
 8007706:	2300      	movs	r3, #0
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	6963      	ldr	r3, [r4, #20]
 800770c:	425b      	negs	r3, r3
 800770e:	61a3      	str	r3, [r4, #24]
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	b943      	cbnz	r3, 8007726 <__swsetup_r+0xc6>
 8007714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007718:	d1ba      	bne.n	8007690 <__swsetup_r+0x30>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	0781      	lsls	r1, r0, #30
 800771e:	bf58      	it	pl
 8007720:	6963      	ldrpl	r3, [r4, #20]
 8007722:	60a3      	str	r3, [r4, #8]
 8007724:	e7f4      	b.n	8007710 <__swsetup_r+0xb0>
 8007726:	2000      	movs	r0, #0
 8007728:	e7f7      	b.n	800771a <__swsetup_r+0xba>
 800772a:	bf00      	nop
 800772c:	20000034 	.word	0x20000034
 8007730:	0800a640 	.word	0x0800a640
 8007734:	0800a660 	.word	0x0800a660
 8007738:	0800a620 	.word	0x0800a620

0800773c <quorem>:
 800773c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	6903      	ldr	r3, [r0, #16]
 8007742:	690c      	ldr	r4, [r1, #16]
 8007744:	42a3      	cmp	r3, r4
 8007746:	4607      	mov	r7, r0
 8007748:	f2c0 8081 	blt.w	800784e <quorem+0x112>
 800774c:	3c01      	subs	r4, #1
 800774e:	f101 0814 	add.w	r8, r1, #20
 8007752:	f100 0514 	add.w	r5, r0, #20
 8007756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800775a:	9301      	str	r3, [sp, #4]
 800775c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007764:	3301      	adds	r3, #1
 8007766:	429a      	cmp	r2, r3
 8007768:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800776c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007770:	fbb2 f6f3 	udiv	r6, r2, r3
 8007774:	d331      	bcc.n	80077da <quorem+0x9e>
 8007776:	f04f 0e00 	mov.w	lr, #0
 800777a:	4640      	mov	r0, r8
 800777c:	46ac      	mov	ip, r5
 800777e:	46f2      	mov	sl, lr
 8007780:	f850 2b04 	ldr.w	r2, [r0], #4
 8007784:	b293      	uxth	r3, r2
 8007786:	fb06 e303 	mla	r3, r6, r3, lr
 800778a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800778e:	b29b      	uxth	r3, r3
 8007790:	ebaa 0303 	sub.w	r3, sl, r3
 8007794:	0c12      	lsrs	r2, r2, #16
 8007796:	f8dc a000 	ldr.w	sl, [ip]
 800779a:	fb06 e202 	mla	r2, r6, r2, lr
 800779e:	fa13 f38a 	uxtah	r3, r3, sl
 80077a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80077a6:	fa1f fa82 	uxth.w	sl, r2
 80077aa:	f8dc 2000 	ldr.w	r2, [ip]
 80077ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80077b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077bc:	4581      	cmp	r9, r0
 80077be:	f84c 3b04 	str.w	r3, [ip], #4
 80077c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077c6:	d2db      	bcs.n	8007780 <quorem+0x44>
 80077c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80077cc:	b92b      	cbnz	r3, 80077da <quorem+0x9e>
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	429d      	cmp	r5, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	d32e      	bcc.n	8007836 <quorem+0xfa>
 80077d8:	613c      	str	r4, [r7, #16]
 80077da:	4638      	mov	r0, r7
 80077dc:	f001 feaa 	bl	8009534 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	db24      	blt.n	800782e <quorem+0xf2>
 80077e4:	3601      	adds	r6, #1
 80077e6:	4628      	mov	r0, r5
 80077e8:	f04f 0c00 	mov.w	ip, #0
 80077ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80077f0:	f8d0 e000 	ldr.w	lr, [r0]
 80077f4:	b293      	uxth	r3, r2
 80077f6:	ebac 0303 	sub.w	r3, ip, r3
 80077fa:	0c12      	lsrs	r2, r2, #16
 80077fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007800:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800780e:	45c1      	cmp	r9, r8
 8007810:	f840 3b04 	str.w	r3, [r0], #4
 8007814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007818:	d2e8      	bcs.n	80077ec <quorem+0xb0>
 800781a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800781e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007822:	b922      	cbnz	r2, 800782e <quorem+0xf2>
 8007824:	3b04      	subs	r3, #4
 8007826:	429d      	cmp	r5, r3
 8007828:	461a      	mov	r2, r3
 800782a:	d30a      	bcc.n	8007842 <quorem+0x106>
 800782c:	613c      	str	r4, [r7, #16]
 800782e:	4630      	mov	r0, r6
 8007830:	b003      	add	sp, #12
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	3b04      	subs	r3, #4
 800783a:	2a00      	cmp	r2, #0
 800783c:	d1cc      	bne.n	80077d8 <quorem+0x9c>
 800783e:	3c01      	subs	r4, #1
 8007840:	e7c7      	b.n	80077d2 <quorem+0x96>
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	3b04      	subs	r3, #4
 8007846:	2a00      	cmp	r2, #0
 8007848:	d1f0      	bne.n	800782c <quorem+0xf0>
 800784a:	3c01      	subs	r4, #1
 800784c:	e7eb      	b.n	8007826 <quorem+0xea>
 800784e:	2000      	movs	r0, #0
 8007850:	e7ee      	b.n	8007830 <quorem+0xf4>
 8007852:	0000      	movs	r0, r0
 8007854:	0000      	movs	r0, r0
	...

08007858 <_dtoa_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	ed2d 8b02 	vpush	{d8}
 8007860:	ec57 6b10 	vmov	r6, r7, d0
 8007864:	b095      	sub	sp, #84	; 0x54
 8007866:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007868:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007872:	4604      	mov	r4, r0
 8007874:	9209      	str	r2, [sp, #36]	; 0x24
 8007876:	930f      	str	r3, [sp, #60]	; 0x3c
 8007878:	b975      	cbnz	r5, 8007898 <_dtoa_r+0x40>
 800787a:	2010      	movs	r0, #16
 800787c:	f001 fb6a 	bl	8008f54 <malloc>
 8007880:	4602      	mov	r2, r0
 8007882:	6260      	str	r0, [r4, #36]	; 0x24
 8007884:	b920      	cbnz	r0, 8007890 <_dtoa_r+0x38>
 8007886:	4bb2      	ldr	r3, [pc, #712]	; (8007b50 <_dtoa_r+0x2f8>)
 8007888:	21ea      	movs	r1, #234	; 0xea
 800788a:	48b2      	ldr	r0, [pc, #712]	; (8007b54 <_dtoa_r+0x2fc>)
 800788c:	f002 fc40 	bl	800a110 <__assert_func>
 8007890:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007894:	6005      	str	r5, [r0, #0]
 8007896:	60c5      	str	r5, [r0, #12]
 8007898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	b151      	cbz	r1, 80078b4 <_dtoa_r+0x5c>
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	604a      	str	r2, [r1, #4]
 80078a2:	2301      	movs	r3, #1
 80078a4:	4093      	lsls	r3, r2
 80078a6:	608b      	str	r3, [r1, #8]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f001 fbbb 	bl	8009024 <_Bfree>
 80078ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	1e3b      	subs	r3, r7, #0
 80078b6:	bfb9      	ittee	lt
 80078b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80078bc:	9303      	strlt	r3, [sp, #12]
 80078be:	2300      	movge	r3, #0
 80078c0:	f8c8 3000 	strge.w	r3, [r8]
 80078c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80078c8:	4ba3      	ldr	r3, [pc, #652]	; (8007b58 <_dtoa_r+0x300>)
 80078ca:	bfbc      	itt	lt
 80078cc:	2201      	movlt	r2, #1
 80078ce:	f8c8 2000 	strlt.w	r2, [r8]
 80078d2:	ea33 0309 	bics.w	r3, r3, r9
 80078d6:	d11b      	bne.n	8007910 <_dtoa_r+0xb8>
 80078d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078da:	f242 730f 	movw	r3, #9999	; 0x270f
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e4:	4333      	orrs	r3, r6
 80078e6:	f000 857a 	beq.w	80083de <_dtoa_r+0xb86>
 80078ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ec:	b963      	cbnz	r3, 8007908 <_dtoa_r+0xb0>
 80078ee:	4b9b      	ldr	r3, [pc, #620]	; (8007b5c <_dtoa_r+0x304>)
 80078f0:	e024      	b.n	800793c <_dtoa_r+0xe4>
 80078f2:	4b9b      	ldr	r3, [pc, #620]	; (8007b60 <_dtoa_r+0x308>)
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	9800      	ldr	r0, [sp, #0]
 80078fe:	b015      	add	sp, #84	; 0x54
 8007900:	ecbd 8b02 	vpop	{d8}
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	4b94      	ldr	r3, [pc, #592]	; (8007b5c <_dtoa_r+0x304>)
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	3303      	adds	r3, #3
 800790e:	e7f3      	b.n	80078f8 <_dtoa_r+0xa0>
 8007910:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	ec51 0b17 	vmov	r0, r1, d7
 800791a:	2300      	movs	r3, #0
 800791c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007920:	f7f9 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007924:	4680      	mov	r8, r0
 8007926:	b158      	cbz	r0, 8007940 <_dtoa_r+0xe8>
 8007928:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800792a:	2301      	movs	r3, #1
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8551 	beq.w	80083d8 <_dtoa_r+0xb80>
 8007936:	488b      	ldr	r0, [pc, #556]	; (8007b64 <_dtoa_r+0x30c>)
 8007938:	6018      	str	r0, [r3, #0]
 800793a:	1e43      	subs	r3, r0, #1
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	e7dd      	b.n	80078fc <_dtoa_r+0xa4>
 8007940:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007944:	aa12      	add	r2, sp, #72	; 0x48
 8007946:	a913      	add	r1, sp, #76	; 0x4c
 8007948:	4620      	mov	r0, r4
 800794a:	f001 ff13 	bl	8009774 <__d2b>
 800794e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007952:	4683      	mov	fp, r0
 8007954:	2d00      	cmp	r5, #0
 8007956:	d07c      	beq.n	8007a52 <_dtoa_r+0x1fa>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800795e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007962:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007966:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800796a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800796e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007972:	4b7d      	ldr	r3, [pc, #500]	; (8007b68 <_dtoa_r+0x310>)
 8007974:	2200      	movs	r2, #0
 8007976:	4630      	mov	r0, r6
 8007978:	4639      	mov	r1, r7
 800797a:	f7f8 fc85 	bl	8000288 <__aeabi_dsub>
 800797e:	a36e      	add	r3, pc, #440	; (adr r3, 8007b38 <_dtoa_r+0x2e0>)
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f7f8 fe38 	bl	80005f8 <__aeabi_dmul>
 8007988:	a36d      	add	r3, pc, #436	; (adr r3, 8007b40 <_dtoa_r+0x2e8>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	f7f8 fc7d 	bl	800028c <__adddf3>
 8007992:	4606      	mov	r6, r0
 8007994:	4628      	mov	r0, r5
 8007996:	460f      	mov	r7, r1
 8007998:	f7f8 fdc4 	bl	8000524 <__aeabi_i2d>
 800799c:	a36a      	add	r3, pc, #424	; (adr r3, 8007b48 <_dtoa_r+0x2f0>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	f7f8 fe29 	bl	80005f8 <__aeabi_dmul>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	4630      	mov	r0, r6
 80079ac:	4639      	mov	r1, r7
 80079ae:	f7f8 fc6d 	bl	800028c <__adddf3>
 80079b2:	4606      	mov	r6, r0
 80079b4:	460f      	mov	r7, r1
 80079b6:	f7f9 f8cf 	bl	8000b58 <__aeabi_d2iz>
 80079ba:	2200      	movs	r2, #0
 80079bc:	4682      	mov	sl, r0
 80079be:	2300      	movs	r3, #0
 80079c0:	4630      	mov	r0, r6
 80079c2:	4639      	mov	r1, r7
 80079c4:	f7f9 f88a 	bl	8000adc <__aeabi_dcmplt>
 80079c8:	b148      	cbz	r0, 80079de <_dtoa_r+0x186>
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fdaa 	bl	8000524 <__aeabi_i2d>
 80079d0:	4632      	mov	r2, r6
 80079d2:	463b      	mov	r3, r7
 80079d4:	f7f9 f878 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d8:	b908      	cbnz	r0, 80079de <_dtoa_r+0x186>
 80079da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079de:	f1ba 0f16 	cmp.w	sl, #22
 80079e2:	d854      	bhi.n	8007a8e <_dtoa_r+0x236>
 80079e4:	4b61      	ldr	r3, [pc, #388]	; (8007b6c <_dtoa_r+0x314>)
 80079e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d04b      	beq.n	8007a92 <_dtoa_r+0x23a>
 80079fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079fe:	2300      	movs	r3, #0
 8007a00:	930e      	str	r3, [sp, #56]	; 0x38
 8007a02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a04:	1b5d      	subs	r5, r3, r5
 8007a06:	1e6b      	subs	r3, r5, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	bf43      	ittte	mi
 8007a0c:	2300      	movmi	r3, #0
 8007a0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007a12:	9304      	strmi	r3, [sp, #16]
 8007a14:	f04f 0800 	movpl.w	r8, #0
 8007a18:	f1ba 0f00 	cmp.w	sl, #0
 8007a1c:	db3b      	blt.n	8007a96 <_dtoa_r+0x23e>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007a24:	4453      	add	r3, sl
 8007a26:	9304      	str	r3, [sp, #16]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	9306      	str	r3, [sp, #24]
 8007a2c:	9b05      	ldr	r3, [sp, #20]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d869      	bhi.n	8007b06 <_dtoa_r+0x2ae>
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	bfc4      	itt	gt
 8007a36:	3b04      	subgt	r3, #4
 8007a38:	9305      	strgt	r3, [sp, #20]
 8007a3a:	9b05      	ldr	r3, [sp, #20]
 8007a3c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a40:	bfcc      	ite	gt
 8007a42:	2500      	movgt	r5, #0
 8007a44:	2501      	movle	r5, #1
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d869      	bhi.n	8007b1e <_dtoa_r+0x2c6>
 8007a4a:	e8df f003 	tbb	[pc, r3]
 8007a4e:	4e2c      	.short	0x4e2c
 8007a50:	5a4c      	.short	0x5a4c
 8007a52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a56:	441d      	add	r5, r3
 8007a58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a5c:	2b20      	cmp	r3, #32
 8007a5e:	bfc1      	itttt	gt
 8007a60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a68:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a70:	bfda      	itte	le
 8007a72:	f1c3 0320 	rsble	r3, r3, #32
 8007a76:	fa06 f003 	lslle.w	r0, r6, r3
 8007a7a:	4318      	orrgt	r0, r3
 8007a7c:	f7f8 fd42 	bl	8000504 <__aeabi_ui2d>
 8007a80:	2301      	movs	r3, #1
 8007a82:	4606      	mov	r6, r0
 8007a84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a88:	3d01      	subs	r5, #1
 8007a8a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a8c:	e771      	b.n	8007972 <_dtoa_r+0x11a>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7b6      	b.n	8007a00 <_dtoa_r+0x1a8>
 8007a92:	900e      	str	r0, [sp, #56]	; 0x38
 8007a94:	e7b5      	b.n	8007a02 <_dtoa_r+0x1aa>
 8007a96:	f1ca 0300 	rsb	r3, sl, #0
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	eba8 080a 	sub.w	r8, r8, sl
 8007aa2:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa4:	e7c2      	b.n	8007a2c <_dtoa_r+0x1d4>
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9308      	str	r3, [sp, #32]
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dc39      	bgt.n	8007b24 <_dtoa_r+0x2cc>
 8007ab0:	f04f 0901 	mov.w	r9, #1
 8007ab4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007abe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	6042      	str	r2, [r0, #4]
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	f102 0614 	add.w	r6, r2, #20
 8007aca:	429e      	cmp	r6, r3
 8007acc:	6841      	ldr	r1, [r0, #4]
 8007ace:	d92f      	bls.n	8007b30 <_dtoa_r+0x2d8>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	f001 fa67 	bl	8008fa4 <_Balloc>
 8007ad6:	9000      	str	r0, [sp, #0]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d14b      	bne.n	8007b74 <_dtoa_r+0x31c>
 8007adc:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <_dtoa_r+0x318>)
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ae4:	e6d1      	b.n	800788a <_dtoa_r+0x32>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e7de      	b.n	8007aa8 <_dtoa_r+0x250>
 8007aea:	2300      	movs	r3, #0
 8007aec:	9308      	str	r3, [sp, #32]
 8007aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af0:	eb0a 0903 	add.w	r9, sl, r3
 8007af4:	f109 0301 	add.w	r3, r9, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	bfb8      	it	lt
 8007afe:	2301      	movlt	r3, #1
 8007b00:	e7dd      	b.n	8007abe <_dtoa_r+0x266>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e7f2      	b.n	8007aec <_dtoa_r+0x294>
 8007b06:	2501      	movs	r5, #1
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9305      	str	r3, [sp, #20]
 8007b0c:	9508      	str	r5, [sp, #32]
 8007b0e:	f04f 39ff 	mov.w	r9, #4294967295
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b18:	2312      	movs	r3, #18
 8007b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b1c:	e7cf      	b.n	8007abe <_dtoa_r+0x266>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	e7f4      	b.n	8007b0e <_dtoa_r+0x2b6>
 8007b24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007b28:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b2c:	464b      	mov	r3, r9
 8007b2e:	e7c6      	b.n	8007abe <_dtoa_r+0x266>
 8007b30:	3101      	adds	r1, #1
 8007b32:	6041      	str	r1, [r0, #4]
 8007b34:	0052      	lsls	r2, r2, #1
 8007b36:	e7c6      	b.n	8007ac6 <_dtoa_r+0x26e>
 8007b38:	636f4361 	.word	0x636f4361
 8007b3c:	3fd287a7 	.word	0x3fd287a7
 8007b40:	8b60c8b3 	.word	0x8b60c8b3
 8007b44:	3fc68a28 	.word	0x3fc68a28
 8007b48:	509f79fb 	.word	0x509f79fb
 8007b4c:	3fd34413 	.word	0x3fd34413
 8007b50:	0800a596 	.word	0x0800a596
 8007b54:	0800a5ad 	.word	0x0800a5ad
 8007b58:	7ff00000 	.word	0x7ff00000
 8007b5c:	0800a592 	.word	0x0800a592
 8007b60:	0800a589 	.word	0x0800a589
 8007b64:	0800a40d 	.word	0x0800a40d
 8007b68:	3ff80000 	.word	0x3ff80000
 8007b6c:	0800a788 	.word	0x0800a788
 8007b70:	0800a60c 	.word	0x0800a60c
 8007b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b76:	9a00      	ldr	r2, [sp, #0]
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	2b0e      	cmp	r3, #14
 8007b7e:	f200 80ad 	bhi.w	8007cdc <_dtoa_r+0x484>
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	f000 80aa 	beq.w	8007cdc <_dtoa_r+0x484>
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	dd36      	ble.n	8007bfc <_dtoa_r+0x3a4>
 8007b8e:	4ac3      	ldr	r2, [pc, #780]	; (8007e9c <_dtoa_r+0x644>)
 8007b90:	f00a 030f 	and.w	r3, sl, #15
 8007b94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b98:	ed93 7b00 	vldr	d7, [r3]
 8007b9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007ba0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007ba4:	eeb0 8a47 	vmov.f32	s16, s14
 8007ba8:	eef0 8a67 	vmov.f32	s17, s15
 8007bac:	d016      	beq.n	8007bdc <_dtoa_r+0x384>
 8007bae:	4bbc      	ldr	r3, [pc, #752]	; (8007ea0 <_dtoa_r+0x648>)
 8007bb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bb8:	f7f8 fe48 	bl	800084c <__aeabi_ddiv>
 8007bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc0:	f007 070f 	and.w	r7, r7, #15
 8007bc4:	2503      	movs	r5, #3
 8007bc6:	4eb6      	ldr	r6, [pc, #728]	; (8007ea0 <_dtoa_r+0x648>)
 8007bc8:	b957      	cbnz	r7, 8007be0 <_dtoa_r+0x388>
 8007bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bce:	ec53 2b18 	vmov	r2, r3, d8
 8007bd2:	f7f8 fe3b 	bl	800084c <__aeabi_ddiv>
 8007bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bda:	e029      	b.n	8007c30 <_dtoa_r+0x3d8>
 8007bdc:	2502      	movs	r5, #2
 8007bde:	e7f2      	b.n	8007bc6 <_dtoa_r+0x36e>
 8007be0:	07f9      	lsls	r1, r7, #31
 8007be2:	d508      	bpl.n	8007bf6 <_dtoa_r+0x39e>
 8007be4:	ec51 0b18 	vmov	r0, r1, d8
 8007be8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bec:	f7f8 fd04 	bl	80005f8 <__aeabi_dmul>
 8007bf0:	ec41 0b18 	vmov	d8, r0, r1
 8007bf4:	3501      	adds	r5, #1
 8007bf6:	107f      	asrs	r7, r7, #1
 8007bf8:	3608      	adds	r6, #8
 8007bfa:	e7e5      	b.n	8007bc8 <_dtoa_r+0x370>
 8007bfc:	f000 80a6 	beq.w	8007d4c <_dtoa_r+0x4f4>
 8007c00:	f1ca 0600 	rsb	r6, sl, #0
 8007c04:	4ba5      	ldr	r3, [pc, #660]	; (8007e9c <_dtoa_r+0x644>)
 8007c06:	4fa6      	ldr	r7, [pc, #664]	; (8007ea0 <_dtoa_r+0x648>)
 8007c08:	f006 020f 	and.w	r2, r6, #15
 8007c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c18:	f7f8 fcee 	bl	80005f8 <__aeabi_dmul>
 8007c1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c20:	1136      	asrs	r6, r6, #4
 8007c22:	2300      	movs	r3, #0
 8007c24:	2502      	movs	r5, #2
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	f040 8085 	bne.w	8007d36 <_dtoa_r+0x4de>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1d2      	bne.n	8007bd6 <_dtoa_r+0x37e>
 8007c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 808c 	beq.w	8007d50 <_dtoa_r+0x4f8>
 8007c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c3c:	4b99      	ldr	r3, [pc, #612]	; (8007ea4 <_dtoa_r+0x64c>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f000 8081 	beq.w	8007d50 <_dtoa_r+0x4f8>
 8007c4e:	9b01      	ldr	r3, [sp, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d07d      	beq.n	8007d50 <_dtoa_r+0x4f8>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	dd3c      	ble.n	8007cd4 <_dtoa_r+0x47c>
 8007c5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	2200      	movs	r2, #0
 8007c62:	4b91      	ldr	r3, [pc, #580]	; (8007ea8 <_dtoa_r+0x650>)
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c70:	3501      	adds	r5, #1
 8007c72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f7f8 fc52 	bl	8000524 <__aeabi_i2d>
 8007c80:	4632      	mov	r2, r6
 8007c82:	463b      	mov	r3, r7
 8007c84:	f7f8 fcb8 	bl	80005f8 <__aeabi_dmul>
 8007c88:	4b88      	ldr	r3, [pc, #544]	; (8007eac <_dtoa_r+0x654>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f7f8 fafe 	bl	800028c <__adddf3>
 8007c90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c98:	9303      	str	r3, [sp, #12]
 8007c9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d15c      	bne.n	8007d5a <_dtoa_r+0x502>
 8007ca0:	4b83      	ldr	r3, [pc, #524]	; (8007eb0 <_dtoa_r+0x658>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 faee 	bl	8000288 <__aeabi_dsub>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	f7f8 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f040 8296 	bne.w	80081ea <_dtoa_r+0x992>
 8007cbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 ff07 	bl	8000adc <__aeabi_dcmplt>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f040 8288 	bne.w	80081e4 <_dtoa_r+0x98c>
 8007cd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007cd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f2c0 8158 	blt.w	8007f94 <_dtoa_r+0x73c>
 8007ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ce8:	f300 8154 	bgt.w	8007f94 <_dtoa_r+0x73c>
 8007cec:	4b6b      	ldr	r3, [pc, #428]	; (8007e9c <_dtoa_r+0x644>)
 8007cee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f280 80e3 	bge.w	8007ec4 <_dtoa_r+0x66c>
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f300 80df 	bgt.w	8007ec4 <_dtoa_r+0x66c>
 8007d06:	f040 826d 	bne.w	80081e4 <_dtoa_r+0x98c>
 8007d0a:	4b69      	ldr	r3, [pc, #420]	; (8007eb0 <_dtoa_r+0x658>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4640      	mov	r0, r8
 8007d10:	4649      	mov	r1, r9
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d1a:	f7f8 fef3 	bl	8000b04 <__aeabi_dcmpge>
 8007d1e:	9e01      	ldr	r6, [sp, #4]
 8007d20:	4637      	mov	r7, r6
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f040 8243 	bne.w	80081ae <_dtoa_r+0x956>
 8007d28:	9d00      	ldr	r5, [sp, #0]
 8007d2a:	2331      	movs	r3, #49	; 0x31
 8007d2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d30:	f10a 0a01 	add.w	sl, sl, #1
 8007d34:	e23f      	b.n	80081b6 <_dtoa_r+0x95e>
 8007d36:	07f2      	lsls	r2, r6, #31
 8007d38:	d505      	bpl.n	8007d46 <_dtoa_r+0x4ee>
 8007d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d3e:	f7f8 fc5b 	bl	80005f8 <__aeabi_dmul>
 8007d42:	3501      	adds	r5, #1
 8007d44:	2301      	movs	r3, #1
 8007d46:	1076      	asrs	r6, r6, #1
 8007d48:	3708      	adds	r7, #8
 8007d4a:	e76c      	b.n	8007c26 <_dtoa_r+0x3ce>
 8007d4c:	2502      	movs	r5, #2
 8007d4e:	e76f      	b.n	8007c30 <_dtoa_r+0x3d8>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d56:	930c      	str	r3, [sp, #48]	; 0x30
 8007d58:	e78d      	b.n	8007c76 <_dtoa_r+0x41e>
 8007d5a:	9900      	ldr	r1, [sp, #0]
 8007d5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d60:	4b4e      	ldr	r3, [pc, #312]	; (8007e9c <_dtoa_r+0x644>)
 8007d62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d66:	4401      	add	r1, r0
 8007d68:	9102      	str	r1, [sp, #8]
 8007d6a:	9908      	ldr	r1, [sp, #32]
 8007d6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d70:	eef0 8a67 	vmov.f32	s17, s15
 8007d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d045      	beq.n	8007e0c <_dtoa_r+0x5b4>
 8007d80:	494c      	ldr	r1, [pc, #304]	; (8007eb4 <_dtoa_r+0x65c>)
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7f8 fd62 	bl	800084c <__aeabi_ddiv>
 8007d88:	ec53 2b18 	vmov	r2, r3, d8
 8007d8c:	f7f8 fa7c 	bl	8000288 <__aeabi_dsub>
 8007d90:	9d00      	ldr	r5, [sp, #0]
 8007d92:	ec41 0b18 	vmov	d8, r0, r1
 8007d96:	4639      	mov	r1, r7
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7f8 fedd 	bl	8000b58 <__aeabi_d2iz>
 8007d9e:	900c      	str	r0, [sp, #48]	; 0x30
 8007da0:	f7f8 fbc0 	bl	8000524 <__aeabi_i2d>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4630      	mov	r0, r6
 8007daa:	4639      	mov	r1, r7
 8007dac:	f7f8 fa6c 	bl	8000288 <__aeabi_dsub>
 8007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db2:	3330      	adds	r3, #48	; 0x30
 8007db4:	f805 3b01 	strb.w	r3, [r5], #1
 8007db8:	ec53 2b18 	vmov	r2, r3, d8
 8007dbc:	4606      	mov	r6, r0
 8007dbe:	460f      	mov	r7, r1
 8007dc0:	f7f8 fe8c 	bl	8000adc <__aeabi_dcmplt>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d165      	bne.n	8007e94 <_dtoa_r+0x63c>
 8007dc8:	4632      	mov	r2, r6
 8007dca:	463b      	mov	r3, r7
 8007dcc:	4935      	ldr	r1, [pc, #212]	; (8007ea4 <_dtoa_r+0x64c>)
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f7f8 fa5a 	bl	8000288 <__aeabi_dsub>
 8007dd4:	ec53 2b18 	vmov	r2, r3, d8
 8007dd8:	f7f8 fe80 	bl	8000adc <__aeabi_dcmplt>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	f040 80b9 	bne.w	8007f54 <_dtoa_r+0x6fc>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	429d      	cmp	r5, r3
 8007de6:	f43f af75 	beq.w	8007cd4 <_dtoa_r+0x47c>
 8007dea:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <_dtoa_r+0x650>)
 8007dec:	ec51 0b18 	vmov	r0, r1, d8
 8007df0:	2200      	movs	r2, #0
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	4b2c      	ldr	r3, [pc, #176]	; (8007ea8 <_dtoa_r+0x650>)
 8007df8:	ec41 0b18 	vmov	d8, r0, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fbf9 	bl	80005f8 <__aeabi_dmul>
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	e7c4      	b.n	8007d96 <_dtoa_r+0x53e>
 8007e0c:	ec51 0b17 	vmov	r0, r1, d7
 8007e10:	f7f8 fbf2 	bl	80005f8 <__aeabi_dmul>
 8007e14:	9b02      	ldr	r3, [sp, #8]
 8007e16:	9d00      	ldr	r5, [sp, #0]
 8007e18:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1a:	ec41 0b18 	vmov	d8, r0, r1
 8007e1e:	4639      	mov	r1, r7
 8007e20:	4630      	mov	r0, r6
 8007e22:	f7f8 fe99 	bl	8000b58 <__aeabi_d2iz>
 8007e26:	9011      	str	r0, [sp, #68]	; 0x44
 8007e28:	f7f8 fb7c 	bl	8000524 <__aeabi_i2d>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fa28 	bl	8000288 <__aeabi_dsub>
 8007e38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e3a:	3330      	adds	r3, #48	; 0x30
 8007e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	429d      	cmp	r5, r3
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	d134      	bne.n	8007eb8 <_dtoa_r+0x660>
 8007e4e:	4b19      	ldr	r3, [pc, #100]	; (8007eb4 <_dtoa_r+0x65c>)
 8007e50:	ec51 0b18 	vmov	r0, r1, d8
 8007e54:	f7f8 fa1a 	bl	800028c <__adddf3>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f7f8 fe5a 	bl	8000b18 <__aeabi_dcmpgt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d175      	bne.n	8007f54 <_dtoa_r+0x6fc>
 8007e68:	ec53 2b18 	vmov	r2, r3, d8
 8007e6c:	4911      	ldr	r1, [pc, #68]	; (8007eb4 <_dtoa_r+0x65c>)
 8007e6e:	2000      	movs	r0, #0
 8007e70:	f7f8 fa0a 	bl	8000288 <__aeabi_dsub>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 fe2e 	bl	8000adc <__aeabi_dcmplt>
 8007e80:	2800      	cmp	r0, #0
 8007e82:	f43f af27 	beq.w	8007cd4 <_dtoa_r+0x47c>
 8007e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e90:	2b30      	cmp	r3, #48	; 0x30
 8007e92:	d0f8      	beq.n	8007e86 <_dtoa_r+0x62e>
 8007e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e98:	e04a      	b.n	8007f30 <_dtoa_r+0x6d8>
 8007e9a:	bf00      	nop
 8007e9c:	0800a788 	.word	0x0800a788
 8007ea0:	0800a760 	.word	0x0800a760
 8007ea4:	3ff00000 	.word	0x3ff00000
 8007ea8:	40240000 	.word	0x40240000
 8007eac:	401c0000 	.word	0x401c0000
 8007eb0:	40140000 	.word	0x40140000
 8007eb4:	3fe00000 	.word	0x3fe00000
 8007eb8:	4baf      	ldr	r3, [pc, #700]	; (8008178 <_dtoa_r+0x920>)
 8007eba:	f7f8 fb9d 	bl	80005f8 <__aeabi_dmul>
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	e7ac      	b.n	8007e1e <_dtoa_r+0x5c6>
 8007ec4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ec8:	9d00      	ldr	r5, [sp, #0]
 8007eca:	4642      	mov	r2, r8
 8007ecc:	464b      	mov	r3, r9
 8007ece:	4630      	mov	r0, r6
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	f7f8 fcbb 	bl	800084c <__aeabi_ddiv>
 8007ed6:	f7f8 fe3f 	bl	8000b58 <__aeabi_d2iz>
 8007eda:	9002      	str	r0, [sp, #8]
 8007edc:	f7f8 fb22 	bl	8000524 <__aeabi_i2d>
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4630      	mov	r0, r6
 8007eee:	4639      	mov	r1, r7
 8007ef0:	f7f8 f9ca 	bl	8000288 <__aeabi_dsub>
 8007ef4:	9e02      	ldr	r6, [sp, #8]
 8007ef6:	9f01      	ldr	r7, [sp, #4]
 8007ef8:	3630      	adds	r6, #48	; 0x30
 8007efa:	f805 6b01 	strb.w	r6, [r5], #1
 8007efe:	9e00      	ldr	r6, [sp, #0]
 8007f00:	1bae      	subs	r6, r5, r6
 8007f02:	42b7      	cmp	r7, r6
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	d137      	bne.n	8007f7a <_dtoa_r+0x722>
 8007f0a:	f7f8 f9bf 	bl	800028c <__adddf3>
 8007f0e:	4642      	mov	r2, r8
 8007f10:	464b      	mov	r3, r9
 8007f12:	4606      	mov	r6, r0
 8007f14:	460f      	mov	r7, r1
 8007f16:	f7f8 fdff 	bl	8000b18 <__aeabi_dcmpgt>
 8007f1a:	b9c8      	cbnz	r0, 8007f50 <_dtoa_r+0x6f8>
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fdd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f28:	b110      	cbz	r0, 8007f30 <_dtoa_r+0x6d8>
 8007f2a:	9b02      	ldr	r3, [sp, #8]
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d40f      	bmi.n	8007f50 <_dtoa_r+0x6f8>
 8007f30:	4620      	mov	r0, r4
 8007f32:	4659      	mov	r1, fp
 8007f34:	f001 f876 	bl	8009024 <_Bfree>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	702b      	strb	r3, [r5, #0]
 8007f3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f3e:	f10a 0001 	add.w	r0, sl, #1
 8007f42:	6018      	str	r0, [r3, #0]
 8007f44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f43f acd8 	beq.w	80078fc <_dtoa_r+0xa4>
 8007f4c:	601d      	str	r5, [r3, #0]
 8007f4e:	e4d5      	b.n	80078fc <_dtoa_r+0xa4>
 8007f50:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f54:	462b      	mov	r3, r5
 8007f56:	461d      	mov	r5, r3
 8007f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f5c:	2a39      	cmp	r2, #57	; 0x39
 8007f5e:	d108      	bne.n	8007f72 <_dtoa_r+0x71a>
 8007f60:	9a00      	ldr	r2, [sp, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d1f7      	bne.n	8007f56 <_dtoa_r+0x6fe>
 8007f66:	9a07      	ldr	r2, [sp, #28]
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	9207      	str	r2, [sp, #28]
 8007f6e:	2230      	movs	r2, #48	; 0x30
 8007f70:	700a      	strb	r2, [r1, #0]
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	3201      	adds	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	e78c      	b.n	8007e94 <_dtoa_r+0x63c>
 8007f7a:	4b7f      	ldr	r3, [pc, #508]	; (8008178 <_dtoa_r+0x920>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f7f8 fb3b 	bl	80005f8 <__aeabi_dmul>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	f7f8 fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d09b      	beq.n	8007eca <_dtoa_r+0x672>
 8007f92:	e7cd      	b.n	8007f30 <_dtoa_r+0x6d8>
 8007f94:	9a08      	ldr	r2, [sp, #32]
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	f000 80c4 	beq.w	8008124 <_dtoa_r+0x8cc>
 8007f9c:	9a05      	ldr	r2, [sp, #20]
 8007f9e:	2a01      	cmp	r2, #1
 8007fa0:	f300 80a8 	bgt.w	80080f4 <_dtoa_r+0x89c>
 8007fa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fa6:	2a00      	cmp	r2, #0
 8007fa8:	f000 80a0 	beq.w	80080ec <_dtoa_r+0x894>
 8007fac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007fb0:	9e06      	ldr	r6, [sp, #24]
 8007fb2:	4645      	mov	r5, r8
 8007fb4:	9a04      	ldr	r2, [sp, #16]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	441a      	add	r2, r3
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4498      	add	r8, r3
 8007fbe:	9204      	str	r2, [sp, #16]
 8007fc0:	f001 f936 	bl	8009230 <__i2b>
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	2d00      	cmp	r5, #0
 8007fc8:	dd0b      	ble.n	8007fe2 <_dtoa_r+0x78a>
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dd08      	ble.n	8007fe2 <_dtoa_r+0x78a>
 8007fd0:	42ab      	cmp	r3, r5
 8007fd2:	9a04      	ldr	r2, [sp, #16]
 8007fd4:	bfa8      	it	ge
 8007fd6:	462b      	movge	r3, r5
 8007fd8:	eba8 0803 	sub.w	r8, r8, r3
 8007fdc:	1aed      	subs	r5, r5, r3
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	9b06      	ldr	r3, [sp, #24]
 8007fe4:	b1fb      	cbz	r3, 8008026 <_dtoa_r+0x7ce>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 809f 	beq.w	800812c <_dtoa_r+0x8d4>
 8007fee:	2e00      	cmp	r6, #0
 8007ff0:	dd11      	ble.n	8008016 <_dtoa_r+0x7be>
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f001 f9d6 	bl	80093a8 <__pow5mult>
 8007ffc:	465a      	mov	r2, fp
 8007ffe:	4601      	mov	r1, r0
 8008000:	4607      	mov	r7, r0
 8008002:	4620      	mov	r0, r4
 8008004:	f001 f92a 	bl	800925c <__multiply>
 8008008:	4659      	mov	r1, fp
 800800a:	9007      	str	r0, [sp, #28]
 800800c:	4620      	mov	r0, r4
 800800e:	f001 f809 	bl	8009024 <_Bfree>
 8008012:	9b07      	ldr	r3, [sp, #28]
 8008014:	469b      	mov	fp, r3
 8008016:	9b06      	ldr	r3, [sp, #24]
 8008018:	1b9a      	subs	r2, r3, r6
 800801a:	d004      	beq.n	8008026 <_dtoa_r+0x7ce>
 800801c:	4659      	mov	r1, fp
 800801e:	4620      	mov	r0, r4
 8008020:	f001 f9c2 	bl	80093a8 <__pow5mult>
 8008024:	4683      	mov	fp, r0
 8008026:	2101      	movs	r1, #1
 8008028:	4620      	mov	r0, r4
 800802a:	f001 f901 	bl	8009230 <__i2b>
 800802e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008030:	2b00      	cmp	r3, #0
 8008032:	4606      	mov	r6, r0
 8008034:	dd7c      	ble.n	8008130 <_dtoa_r+0x8d8>
 8008036:	461a      	mov	r2, r3
 8008038:	4601      	mov	r1, r0
 800803a:	4620      	mov	r0, r4
 800803c:	f001 f9b4 	bl	80093a8 <__pow5mult>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	2b01      	cmp	r3, #1
 8008044:	4606      	mov	r6, r0
 8008046:	dd76      	ble.n	8008136 <_dtoa_r+0x8de>
 8008048:	2300      	movs	r3, #0
 800804a:	9306      	str	r3, [sp, #24]
 800804c:	6933      	ldr	r3, [r6, #16]
 800804e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008052:	6918      	ldr	r0, [r3, #16]
 8008054:	f001 f89c 	bl	8009190 <__hi0bits>
 8008058:	f1c0 0020 	rsb	r0, r0, #32
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	4418      	add	r0, r3
 8008060:	f010 001f 	ands.w	r0, r0, #31
 8008064:	f000 8086 	beq.w	8008174 <_dtoa_r+0x91c>
 8008068:	f1c0 0320 	rsb	r3, r0, #32
 800806c:	2b04      	cmp	r3, #4
 800806e:	dd7f      	ble.n	8008170 <_dtoa_r+0x918>
 8008070:	f1c0 001c 	rsb	r0, r0, #28
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	4403      	add	r3, r0
 8008078:	4480      	add	r8, r0
 800807a:	4405      	add	r5, r0
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	f1b8 0f00 	cmp.w	r8, #0
 8008082:	dd05      	ble.n	8008090 <_dtoa_r+0x838>
 8008084:	4659      	mov	r1, fp
 8008086:	4642      	mov	r2, r8
 8008088:	4620      	mov	r0, r4
 800808a:	f001 f9e7 	bl	800945c <__lshift>
 800808e:	4683      	mov	fp, r0
 8008090:	9b04      	ldr	r3, [sp, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd05      	ble.n	80080a2 <_dtoa_r+0x84a>
 8008096:	4631      	mov	r1, r6
 8008098:	461a      	mov	r2, r3
 800809a:	4620      	mov	r0, r4
 800809c:	f001 f9de 	bl	800945c <__lshift>
 80080a0:	4606      	mov	r6, r0
 80080a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d069      	beq.n	800817c <_dtoa_r+0x924>
 80080a8:	4631      	mov	r1, r6
 80080aa:	4658      	mov	r0, fp
 80080ac:	f001 fa42 	bl	8009534 <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	da63      	bge.n	800817c <_dtoa_r+0x924>
 80080b4:	2300      	movs	r3, #0
 80080b6:	4659      	mov	r1, fp
 80080b8:	220a      	movs	r2, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f000 ffd4 	bl	8009068 <__multadd>
 80080c0:	9b08      	ldr	r3, [sp, #32]
 80080c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080c6:	4683      	mov	fp, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 818f 	beq.w	80083ec <_dtoa_r+0xb94>
 80080ce:	4639      	mov	r1, r7
 80080d0:	2300      	movs	r3, #0
 80080d2:	220a      	movs	r2, #10
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 ffc7 	bl	8009068 <__multadd>
 80080da:	f1b9 0f00 	cmp.w	r9, #0
 80080de:	4607      	mov	r7, r0
 80080e0:	f300 808e 	bgt.w	8008200 <_dtoa_r+0x9a8>
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	dc50      	bgt.n	800818c <_dtoa_r+0x934>
 80080ea:	e089      	b.n	8008200 <_dtoa_r+0x9a8>
 80080ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080f2:	e75d      	b.n	8007fb0 <_dtoa_r+0x758>
 80080f4:	9b01      	ldr	r3, [sp, #4]
 80080f6:	1e5e      	subs	r6, r3, #1
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	42b3      	cmp	r3, r6
 80080fc:	bfbf      	itttt	lt
 80080fe:	9b06      	ldrlt	r3, [sp, #24]
 8008100:	9606      	strlt	r6, [sp, #24]
 8008102:	1af2      	sublt	r2, r6, r3
 8008104:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008106:	bfb6      	itet	lt
 8008108:	189b      	addlt	r3, r3, r2
 800810a:	1b9e      	subge	r6, r3, r6
 800810c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800810e:	9b01      	ldr	r3, [sp, #4]
 8008110:	bfb8      	it	lt
 8008112:	2600      	movlt	r6, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	bfb5      	itete	lt
 8008118:	eba8 0503 	sublt.w	r5, r8, r3
 800811c:	9b01      	ldrge	r3, [sp, #4]
 800811e:	2300      	movlt	r3, #0
 8008120:	4645      	movge	r5, r8
 8008122:	e747      	b.n	8007fb4 <_dtoa_r+0x75c>
 8008124:	9e06      	ldr	r6, [sp, #24]
 8008126:	9f08      	ldr	r7, [sp, #32]
 8008128:	4645      	mov	r5, r8
 800812a:	e74c      	b.n	8007fc6 <_dtoa_r+0x76e>
 800812c:	9a06      	ldr	r2, [sp, #24]
 800812e:	e775      	b.n	800801c <_dtoa_r+0x7c4>
 8008130:	9b05      	ldr	r3, [sp, #20]
 8008132:	2b01      	cmp	r3, #1
 8008134:	dc18      	bgt.n	8008168 <_dtoa_r+0x910>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	b9b3      	cbnz	r3, 8008168 <_dtoa_r+0x910>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008140:	b9a3      	cbnz	r3, 800816c <_dtoa_r+0x914>
 8008142:	9b03      	ldr	r3, [sp, #12]
 8008144:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008148:	0d1b      	lsrs	r3, r3, #20
 800814a:	051b      	lsls	r3, r3, #20
 800814c:	b12b      	cbz	r3, 800815a <_dtoa_r+0x902>
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	3301      	adds	r3, #1
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	f108 0801 	add.w	r8, r8, #1
 8008158:	2301      	movs	r3, #1
 800815a:	9306      	str	r3, [sp, #24]
 800815c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800815e:	2b00      	cmp	r3, #0
 8008160:	f47f af74 	bne.w	800804c <_dtoa_r+0x7f4>
 8008164:	2001      	movs	r0, #1
 8008166:	e779      	b.n	800805c <_dtoa_r+0x804>
 8008168:	2300      	movs	r3, #0
 800816a:	e7f6      	b.n	800815a <_dtoa_r+0x902>
 800816c:	9b02      	ldr	r3, [sp, #8]
 800816e:	e7f4      	b.n	800815a <_dtoa_r+0x902>
 8008170:	d085      	beq.n	800807e <_dtoa_r+0x826>
 8008172:	4618      	mov	r0, r3
 8008174:	301c      	adds	r0, #28
 8008176:	e77d      	b.n	8008074 <_dtoa_r+0x81c>
 8008178:	40240000 	.word	0x40240000
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	dc38      	bgt.n	80081f4 <_dtoa_r+0x99c>
 8008182:	9b05      	ldr	r3, [sp, #20]
 8008184:	2b02      	cmp	r3, #2
 8008186:	dd35      	ble.n	80081f4 <_dtoa_r+0x99c>
 8008188:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800818c:	f1b9 0f00 	cmp.w	r9, #0
 8008190:	d10d      	bne.n	80081ae <_dtoa_r+0x956>
 8008192:	4631      	mov	r1, r6
 8008194:	464b      	mov	r3, r9
 8008196:	2205      	movs	r2, #5
 8008198:	4620      	mov	r0, r4
 800819a:	f000 ff65 	bl	8009068 <__multadd>
 800819e:	4601      	mov	r1, r0
 80081a0:	4606      	mov	r6, r0
 80081a2:	4658      	mov	r0, fp
 80081a4:	f001 f9c6 	bl	8009534 <__mcmp>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f73f adbd 	bgt.w	8007d28 <_dtoa_r+0x4d0>
 80081ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b0:	9d00      	ldr	r5, [sp, #0]
 80081b2:	ea6f 0a03 	mvn.w	sl, r3
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	4631      	mov	r1, r6
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 ff31 	bl	8009024 <_Bfree>
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	f43f aeb4 	beq.w	8007f30 <_dtoa_r+0x6d8>
 80081c8:	f1b8 0f00 	cmp.w	r8, #0
 80081cc:	d005      	beq.n	80081da <_dtoa_r+0x982>
 80081ce:	45b8      	cmp	r8, r7
 80081d0:	d003      	beq.n	80081da <_dtoa_r+0x982>
 80081d2:	4641      	mov	r1, r8
 80081d4:	4620      	mov	r0, r4
 80081d6:	f000 ff25 	bl	8009024 <_Bfree>
 80081da:	4639      	mov	r1, r7
 80081dc:	4620      	mov	r0, r4
 80081de:	f000 ff21 	bl	8009024 <_Bfree>
 80081e2:	e6a5      	b.n	8007f30 <_dtoa_r+0x6d8>
 80081e4:	2600      	movs	r6, #0
 80081e6:	4637      	mov	r7, r6
 80081e8:	e7e1      	b.n	80081ae <_dtoa_r+0x956>
 80081ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081f0:	4637      	mov	r7, r6
 80081f2:	e599      	b.n	8007d28 <_dtoa_r+0x4d0>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80fd 	beq.w	80083fa <_dtoa_r+0xba2>
 8008200:	2d00      	cmp	r5, #0
 8008202:	dd05      	ble.n	8008210 <_dtoa_r+0x9b8>
 8008204:	4639      	mov	r1, r7
 8008206:	462a      	mov	r2, r5
 8008208:	4620      	mov	r0, r4
 800820a:	f001 f927 	bl	800945c <__lshift>
 800820e:	4607      	mov	r7, r0
 8008210:	9b06      	ldr	r3, [sp, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d05c      	beq.n	80082d0 <_dtoa_r+0xa78>
 8008216:	6879      	ldr	r1, [r7, #4]
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fec3 	bl	8008fa4 <_Balloc>
 800821e:	4605      	mov	r5, r0
 8008220:	b928      	cbnz	r0, 800822e <_dtoa_r+0x9d6>
 8008222:	4b80      	ldr	r3, [pc, #512]	; (8008424 <_dtoa_r+0xbcc>)
 8008224:	4602      	mov	r2, r0
 8008226:	f240 21ea 	movw	r1, #746	; 0x2ea
 800822a:	f7ff bb2e 	b.w	800788a <_dtoa_r+0x32>
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	3202      	adds	r2, #2
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	f107 010c 	add.w	r1, r7, #12
 8008238:	300c      	adds	r0, #12
 800823a:	f000 fea5 	bl	8008f88 <memcpy>
 800823e:	2201      	movs	r2, #1
 8008240:	4629      	mov	r1, r5
 8008242:	4620      	mov	r0, r4
 8008244:	f001 f90a 	bl	800945c <__lshift>
 8008248:	9b00      	ldr	r3, [sp, #0]
 800824a:	3301      	adds	r3, #1
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	9b00      	ldr	r3, [sp, #0]
 8008250:	444b      	add	r3, r9
 8008252:	9307      	str	r3, [sp, #28]
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	46b8      	mov	r8, r7
 800825c:	9306      	str	r3, [sp, #24]
 800825e:	4607      	mov	r7, r0
 8008260:	9b01      	ldr	r3, [sp, #4]
 8008262:	4631      	mov	r1, r6
 8008264:	3b01      	subs	r3, #1
 8008266:	4658      	mov	r0, fp
 8008268:	9302      	str	r3, [sp, #8]
 800826a:	f7ff fa67 	bl	800773c <quorem>
 800826e:	4603      	mov	r3, r0
 8008270:	3330      	adds	r3, #48	; 0x30
 8008272:	9004      	str	r0, [sp, #16]
 8008274:	4641      	mov	r1, r8
 8008276:	4658      	mov	r0, fp
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	f001 f95b 	bl	8009534 <__mcmp>
 800827e:	463a      	mov	r2, r7
 8008280:	4681      	mov	r9, r0
 8008282:	4631      	mov	r1, r6
 8008284:	4620      	mov	r0, r4
 8008286:	f001 f971 	bl	800956c <__mdiff>
 800828a:	68c2      	ldr	r2, [r0, #12]
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	4605      	mov	r5, r0
 8008290:	bb02      	cbnz	r2, 80082d4 <_dtoa_r+0xa7c>
 8008292:	4601      	mov	r1, r0
 8008294:	4658      	mov	r0, fp
 8008296:	f001 f94d 	bl	8009534 <__mcmp>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	4602      	mov	r2, r0
 800829e:	4629      	mov	r1, r5
 80082a0:	4620      	mov	r0, r4
 80082a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80082a6:	f000 febd 	bl	8009024 <_Bfree>
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082ae:	9d01      	ldr	r5, [sp, #4]
 80082b0:	ea43 0102 	orr.w	r1, r3, r2
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	430b      	orrs	r3, r1
 80082b8:	9b08      	ldr	r3, [sp, #32]
 80082ba:	d10d      	bne.n	80082d8 <_dtoa_r+0xa80>
 80082bc:	2b39      	cmp	r3, #57	; 0x39
 80082be:	d029      	beq.n	8008314 <_dtoa_r+0xabc>
 80082c0:	f1b9 0f00 	cmp.w	r9, #0
 80082c4:	dd01      	ble.n	80082ca <_dtoa_r+0xa72>
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	3331      	adds	r3, #49	; 0x31
 80082ca:	9a02      	ldr	r2, [sp, #8]
 80082cc:	7013      	strb	r3, [r2, #0]
 80082ce:	e774      	b.n	80081ba <_dtoa_r+0x962>
 80082d0:	4638      	mov	r0, r7
 80082d2:	e7b9      	b.n	8008248 <_dtoa_r+0x9f0>
 80082d4:	2201      	movs	r2, #1
 80082d6:	e7e2      	b.n	800829e <_dtoa_r+0xa46>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	db06      	blt.n	80082ec <_dtoa_r+0xa94>
 80082de:	9905      	ldr	r1, [sp, #20]
 80082e0:	ea41 0909 	orr.w	r9, r1, r9
 80082e4:	9906      	ldr	r1, [sp, #24]
 80082e6:	ea59 0101 	orrs.w	r1, r9, r1
 80082ea:	d120      	bne.n	800832e <_dtoa_r+0xad6>
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	ddec      	ble.n	80082ca <_dtoa_r+0xa72>
 80082f0:	4659      	mov	r1, fp
 80082f2:	2201      	movs	r2, #1
 80082f4:	4620      	mov	r0, r4
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	f001 f8b0 	bl	800945c <__lshift>
 80082fc:	4631      	mov	r1, r6
 80082fe:	4683      	mov	fp, r0
 8008300:	f001 f918 	bl	8009534 <__mcmp>
 8008304:	2800      	cmp	r0, #0
 8008306:	9b01      	ldr	r3, [sp, #4]
 8008308:	dc02      	bgt.n	8008310 <_dtoa_r+0xab8>
 800830a:	d1de      	bne.n	80082ca <_dtoa_r+0xa72>
 800830c:	07da      	lsls	r2, r3, #31
 800830e:	d5dc      	bpl.n	80082ca <_dtoa_r+0xa72>
 8008310:	2b39      	cmp	r3, #57	; 0x39
 8008312:	d1d8      	bne.n	80082c6 <_dtoa_r+0xa6e>
 8008314:	9a02      	ldr	r2, [sp, #8]
 8008316:	2339      	movs	r3, #57	; 0x39
 8008318:	7013      	strb	r3, [r2, #0]
 800831a:	462b      	mov	r3, r5
 800831c:	461d      	mov	r5, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008324:	2a39      	cmp	r2, #57	; 0x39
 8008326:	d050      	beq.n	80083ca <_dtoa_r+0xb72>
 8008328:	3201      	adds	r2, #1
 800832a:	701a      	strb	r2, [r3, #0]
 800832c:	e745      	b.n	80081ba <_dtoa_r+0x962>
 800832e:	2a00      	cmp	r2, #0
 8008330:	dd03      	ble.n	800833a <_dtoa_r+0xae2>
 8008332:	2b39      	cmp	r3, #57	; 0x39
 8008334:	d0ee      	beq.n	8008314 <_dtoa_r+0xabc>
 8008336:	3301      	adds	r3, #1
 8008338:	e7c7      	b.n	80082ca <_dtoa_r+0xa72>
 800833a:	9a01      	ldr	r2, [sp, #4]
 800833c:	9907      	ldr	r1, [sp, #28]
 800833e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008342:	428a      	cmp	r2, r1
 8008344:	d02a      	beq.n	800839c <_dtoa_r+0xb44>
 8008346:	4659      	mov	r1, fp
 8008348:	2300      	movs	r3, #0
 800834a:	220a      	movs	r2, #10
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fe8b 	bl	8009068 <__multadd>
 8008352:	45b8      	cmp	r8, r7
 8008354:	4683      	mov	fp, r0
 8008356:	f04f 0300 	mov.w	r3, #0
 800835a:	f04f 020a 	mov.w	r2, #10
 800835e:	4641      	mov	r1, r8
 8008360:	4620      	mov	r0, r4
 8008362:	d107      	bne.n	8008374 <_dtoa_r+0xb1c>
 8008364:	f000 fe80 	bl	8009068 <__multadd>
 8008368:	4680      	mov	r8, r0
 800836a:	4607      	mov	r7, r0
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	3301      	adds	r3, #1
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	e775      	b.n	8008260 <_dtoa_r+0xa08>
 8008374:	f000 fe78 	bl	8009068 <__multadd>
 8008378:	4639      	mov	r1, r7
 800837a:	4680      	mov	r8, r0
 800837c:	2300      	movs	r3, #0
 800837e:	220a      	movs	r2, #10
 8008380:	4620      	mov	r0, r4
 8008382:	f000 fe71 	bl	8009068 <__multadd>
 8008386:	4607      	mov	r7, r0
 8008388:	e7f0      	b.n	800836c <_dtoa_r+0xb14>
 800838a:	f1b9 0f00 	cmp.w	r9, #0
 800838e:	9a00      	ldr	r2, [sp, #0]
 8008390:	bfcc      	ite	gt
 8008392:	464d      	movgt	r5, r9
 8008394:	2501      	movle	r5, #1
 8008396:	4415      	add	r5, r2
 8008398:	f04f 0800 	mov.w	r8, #0
 800839c:	4659      	mov	r1, fp
 800839e:	2201      	movs	r2, #1
 80083a0:	4620      	mov	r0, r4
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	f001 f85a 	bl	800945c <__lshift>
 80083a8:	4631      	mov	r1, r6
 80083aa:	4683      	mov	fp, r0
 80083ac:	f001 f8c2 	bl	8009534 <__mcmp>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dcb2      	bgt.n	800831a <_dtoa_r+0xac2>
 80083b4:	d102      	bne.n	80083bc <_dtoa_r+0xb64>
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	07db      	lsls	r3, r3, #31
 80083ba:	d4ae      	bmi.n	800831a <_dtoa_r+0xac2>
 80083bc:	462b      	mov	r3, r5
 80083be:	461d      	mov	r5, r3
 80083c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c4:	2a30      	cmp	r2, #48	; 0x30
 80083c6:	d0fa      	beq.n	80083be <_dtoa_r+0xb66>
 80083c8:	e6f7      	b.n	80081ba <_dtoa_r+0x962>
 80083ca:	9a00      	ldr	r2, [sp, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d1a5      	bne.n	800831c <_dtoa_r+0xac4>
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	2331      	movs	r3, #49	; 0x31
 80083d6:	e779      	b.n	80082cc <_dtoa_r+0xa74>
 80083d8:	4b13      	ldr	r3, [pc, #76]	; (8008428 <_dtoa_r+0xbd0>)
 80083da:	f7ff baaf 	b.w	800793c <_dtoa_r+0xe4>
 80083de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f aa86 	bne.w	80078f2 <_dtoa_r+0x9a>
 80083e6:	4b11      	ldr	r3, [pc, #68]	; (800842c <_dtoa_r+0xbd4>)
 80083e8:	f7ff baa8 	b.w	800793c <_dtoa_r+0xe4>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	dc03      	bgt.n	80083fa <_dtoa_r+0xba2>
 80083f2:	9b05      	ldr	r3, [sp, #20]
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	f73f aec9 	bgt.w	800818c <_dtoa_r+0x934>
 80083fa:	9d00      	ldr	r5, [sp, #0]
 80083fc:	4631      	mov	r1, r6
 80083fe:	4658      	mov	r0, fp
 8008400:	f7ff f99c 	bl	800773c <quorem>
 8008404:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008408:	f805 3b01 	strb.w	r3, [r5], #1
 800840c:	9a00      	ldr	r2, [sp, #0]
 800840e:	1aaa      	subs	r2, r5, r2
 8008410:	4591      	cmp	r9, r2
 8008412:	ddba      	ble.n	800838a <_dtoa_r+0xb32>
 8008414:	4659      	mov	r1, fp
 8008416:	2300      	movs	r3, #0
 8008418:	220a      	movs	r2, #10
 800841a:	4620      	mov	r0, r4
 800841c:	f000 fe24 	bl	8009068 <__multadd>
 8008420:	4683      	mov	fp, r0
 8008422:	e7eb      	b.n	80083fc <_dtoa_r+0xba4>
 8008424:	0800a60c 	.word	0x0800a60c
 8008428:	0800a40c 	.word	0x0800a40c
 800842c:	0800a589 	.word	0x0800a589

08008430 <__sflush_r>:
 8008430:	898a      	ldrh	r2, [r1, #12]
 8008432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008436:	4605      	mov	r5, r0
 8008438:	0710      	lsls	r0, r2, #28
 800843a:	460c      	mov	r4, r1
 800843c:	d458      	bmi.n	80084f0 <__sflush_r+0xc0>
 800843e:	684b      	ldr	r3, [r1, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dc05      	bgt.n	8008450 <__sflush_r+0x20>
 8008444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	dc02      	bgt.n	8008450 <__sflush_r+0x20>
 800844a:	2000      	movs	r0, #0
 800844c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008452:	2e00      	cmp	r6, #0
 8008454:	d0f9      	beq.n	800844a <__sflush_r+0x1a>
 8008456:	2300      	movs	r3, #0
 8008458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800845c:	682f      	ldr	r7, [r5, #0]
 800845e:	602b      	str	r3, [r5, #0]
 8008460:	d032      	beq.n	80084c8 <__sflush_r+0x98>
 8008462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	075a      	lsls	r2, r3, #29
 8008468:	d505      	bpl.n	8008476 <__sflush_r+0x46>
 800846a:	6863      	ldr	r3, [r4, #4]
 800846c:	1ac0      	subs	r0, r0, r3
 800846e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008470:	b10b      	cbz	r3, 8008476 <__sflush_r+0x46>
 8008472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008474:	1ac0      	subs	r0, r0, r3
 8008476:	2300      	movs	r3, #0
 8008478:	4602      	mov	r2, r0
 800847a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800847c:	6a21      	ldr	r1, [r4, #32]
 800847e:	4628      	mov	r0, r5
 8008480:	47b0      	blx	r6
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	d106      	bne.n	8008496 <__sflush_r+0x66>
 8008488:	6829      	ldr	r1, [r5, #0]
 800848a:	291d      	cmp	r1, #29
 800848c:	d82c      	bhi.n	80084e8 <__sflush_r+0xb8>
 800848e:	4a2a      	ldr	r2, [pc, #168]	; (8008538 <__sflush_r+0x108>)
 8008490:	40ca      	lsrs	r2, r1
 8008492:	07d6      	lsls	r6, r2, #31
 8008494:	d528      	bpl.n	80084e8 <__sflush_r+0xb8>
 8008496:	2200      	movs	r2, #0
 8008498:	6062      	str	r2, [r4, #4]
 800849a:	04d9      	lsls	r1, r3, #19
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	6022      	str	r2, [r4, #0]
 80084a0:	d504      	bpl.n	80084ac <__sflush_r+0x7c>
 80084a2:	1c42      	adds	r2, r0, #1
 80084a4:	d101      	bne.n	80084aa <__sflush_r+0x7a>
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	b903      	cbnz	r3, 80084ac <__sflush_r+0x7c>
 80084aa:	6560      	str	r0, [r4, #84]	; 0x54
 80084ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ae:	602f      	str	r7, [r5, #0]
 80084b0:	2900      	cmp	r1, #0
 80084b2:	d0ca      	beq.n	800844a <__sflush_r+0x1a>
 80084b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d002      	beq.n	80084c2 <__sflush_r+0x92>
 80084bc:	4628      	mov	r0, r5
 80084be:	f001 fa3b 	bl	8009938 <_free_r>
 80084c2:	2000      	movs	r0, #0
 80084c4:	6360      	str	r0, [r4, #52]	; 0x34
 80084c6:	e7c1      	b.n	800844c <__sflush_r+0x1c>
 80084c8:	6a21      	ldr	r1, [r4, #32]
 80084ca:	2301      	movs	r3, #1
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b0      	blx	r6
 80084d0:	1c41      	adds	r1, r0, #1
 80084d2:	d1c7      	bne.n	8008464 <__sflush_r+0x34>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0c4      	beq.n	8008464 <__sflush_r+0x34>
 80084da:	2b1d      	cmp	r3, #29
 80084dc:	d001      	beq.n	80084e2 <__sflush_r+0xb2>
 80084de:	2b16      	cmp	r3, #22
 80084e0:	d101      	bne.n	80084e6 <__sflush_r+0xb6>
 80084e2:	602f      	str	r7, [r5, #0]
 80084e4:	e7b1      	b.n	800844a <__sflush_r+0x1a>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	e7ad      	b.n	800844c <__sflush_r+0x1c>
 80084f0:	690f      	ldr	r7, [r1, #16]
 80084f2:	2f00      	cmp	r7, #0
 80084f4:	d0a9      	beq.n	800844a <__sflush_r+0x1a>
 80084f6:	0793      	lsls	r3, r2, #30
 80084f8:	680e      	ldr	r6, [r1, #0]
 80084fa:	bf08      	it	eq
 80084fc:	694b      	ldreq	r3, [r1, #20]
 80084fe:	600f      	str	r7, [r1, #0]
 8008500:	bf18      	it	ne
 8008502:	2300      	movne	r3, #0
 8008504:	eba6 0807 	sub.w	r8, r6, r7
 8008508:	608b      	str	r3, [r1, #8]
 800850a:	f1b8 0f00 	cmp.w	r8, #0
 800850e:	dd9c      	ble.n	800844a <__sflush_r+0x1a>
 8008510:	6a21      	ldr	r1, [r4, #32]
 8008512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008514:	4643      	mov	r3, r8
 8008516:	463a      	mov	r2, r7
 8008518:	4628      	mov	r0, r5
 800851a:	47b0      	blx	r6
 800851c:	2800      	cmp	r0, #0
 800851e:	dc06      	bgt.n	800852e <__sflush_r+0xfe>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008526:	81a3      	strh	r3, [r4, #12]
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	e78e      	b.n	800844c <__sflush_r+0x1c>
 800852e:	4407      	add	r7, r0
 8008530:	eba8 0800 	sub.w	r8, r8, r0
 8008534:	e7e9      	b.n	800850a <__sflush_r+0xda>
 8008536:	bf00      	nop
 8008538:	20400001 	.word	0x20400001

0800853c <_fflush_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	690b      	ldr	r3, [r1, #16]
 8008540:	4605      	mov	r5, r0
 8008542:	460c      	mov	r4, r1
 8008544:	b913      	cbnz	r3, 800854c <_fflush_r+0x10>
 8008546:	2500      	movs	r5, #0
 8008548:	4628      	mov	r0, r5
 800854a:	bd38      	pop	{r3, r4, r5, pc}
 800854c:	b118      	cbz	r0, 8008556 <_fflush_r+0x1a>
 800854e:	6983      	ldr	r3, [r0, #24]
 8008550:	b90b      	cbnz	r3, 8008556 <_fflush_r+0x1a>
 8008552:	f000 f887 	bl	8008664 <__sinit>
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <_fflush_r+0x6c>)
 8008558:	429c      	cmp	r4, r3
 800855a:	d11b      	bne.n	8008594 <_fflush_r+0x58>
 800855c:	686c      	ldr	r4, [r5, #4]
 800855e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0ef      	beq.n	8008546 <_fflush_r+0xa>
 8008566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008568:	07d0      	lsls	r0, r2, #31
 800856a:	d404      	bmi.n	8008576 <_fflush_r+0x3a>
 800856c:	0599      	lsls	r1, r3, #22
 800856e:	d402      	bmi.n	8008576 <_fflush_r+0x3a>
 8008570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008572:	f000 fc88 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8008576:	4628      	mov	r0, r5
 8008578:	4621      	mov	r1, r4
 800857a:	f7ff ff59 	bl	8008430 <__sflush_r>
 800857e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008580:	07da      	lsls	r2, r3, #31
 8008582:	4605      	mov	r5, r0
 8008584:	d4e0      	bmi.n	8008548 <_fflush_r+0xc>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	059b      	lsls	r3, r3, #22
 800858a:	d4dd      	bmi.n	8008548 <_fflush_r+0xc>
 800858c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858e:	f000 fc7b 	bl	8008e88 <__retarget_lock_release_recursive>
 8008592:	e7d9      	b.n	8008548 <_fflush_r+0xc>
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <_fflush_r+0x70>)
 8008596:	429c      	cmp	r4, r3
 8008598:	d101      	bne.n	800859e <_fflush_r+0x62>
 800859a:	68ac      	ldr	r4, [r5, #8]
 800859c:	e7df      	b.n	800855e <_fflush_r+0x22>
 800859e:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <_fflush_r+0x74>)
 80085a0:	429c      	cmp	r4, r3
 80085a2:	bf08      	it	eq
 80085a4:	68ec      	ldreq	r4, [r5, #12]
 80085a6:	e7da      	b.n	800855e <_fflush_r+0x22>
 80085a8:	0800a640 	.word	0x0800a640
 80085ac:	0800a660 	.word	0x0800a660
 80085b0:	0800a620 	.word	0x0800a620

080085b4 <std>:
 80085b4:	2300      	movs	r3, #0
 80085b6:	b510      	push	{r4, lr}
 80085b8:	4604      	mov	r4, r0
 80085ba:	e9c0 3300 	strd	r3, r3, [r0]
 80085be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085c2:	6083      	str	r3, [r0, #8]
 80085c4:	8181      	strh	r1, [r0, #12]
 80085c6:	6643      	str	r3, [r0, #100]	; 0x64
 80085c8:	81c2      	strh	r2, [r0, #14]
 80085ca:	6183      	str	r3, [r0, #24]
 80085cc:	4619      	mov	r1, r3
 80085ce:	2208      	movs	r2, #8
 80085d0:	305c      	adds	r0, #92	; 0x5c
 80085d2:	f7fd fa0b 	bl	80059ec <memset>
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <std+0x38>)
 80085d8:	6263      	str	r3, [r4, #36]	; 0x24
 80085da:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <std+0x3c>)
 80085dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <std+0x40>)
 80085e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085e2:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <std+0x44>)
 80085e4:	6224      	str	r4, [r4, #32]
 80085e6:	6323      	str	r3, [r4, #48]	; 0x30
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	bf00      	nop
 80085ec:	0800a029 	.word	0x0800a029
 80085f0:	0800a04b 	.word	0x0800a04b
 80085f4:	0800a083 	.word	0x0800a083
 80085f8:	0800a0a7 	.word	0x0800a0a7

080085fc <_cleanup_r>:
 80085fc:	4901      	ldr	r1, [pc, #4]	; (8008604 <_cleanup_r+0x8>)
 80085fe:	f000 b8af 	b.w	8008760 <_fwalk_reent>
 8008602:	bf00      	nop
 8008604:	0800853d 	.word	0x0800853d

08008608 <__sfmoreglue>:
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	1e4a      	subs	r2, r1, #1
 800860c:	2568      	movs	r5, #104	; 0x68
 800860e:	4355      	muls	r5, r2
 8008610:	460e      	mov	r6, r1
 8008612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008616:	f001 f9df 	bl	80099d8 <_malloc_r>
 800861a:	4604      	mov	r4, r0
 800861c:	b140      	cbz	r0, 8008630 <__sfmoreglue+0x28>
 800861e:	2100      	movs	r1, #0
 8008620:	e9c0 1600 	strd	r1, r6, [r0]
 8008624:	300c      	adds	r0, #12
 8008626:	60a0      	str	r0, [r4, #8]
 8008628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800862c:	f7fd f9de 	bl	80059ec <memset>
 8008630:	4620      	mov	r0, r4
 8008632:	bd70      	pop	{r4, r5, r6, pc}

08008634 <__sfp_lock_acquire>:
 8008634:	4801      	ldr	r0, [pc, #4]	; (800863c <__sfp_lock_acquire+0x8>)
 8008636:	f000 bc26 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 800863a:	bf00      	nop
 800863c:	200004b4 	.word	0x200004b4

08008640 <__sfp_lock_release>:
 8008640:	4801      	ldr	r0, [pc, #4]	; (8008648 <__sfp_lock_release+0x8>)
 8008642:	f000 bc21 	b.w	8008e88 <__retarget_lock_release_recursive>
 8008646:	bf00      	nop
 8008648:	200004b4 	.word	0x200004b4

0800864c <__sinit_lock_acquire>:
 800864c:	4801      	ldr	r0, [pc, #4]	; (8008654 <__sinit_lock_acquire+0x8>)
 800864e:	f000 bc1a 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 8008652:	bf00      	nop
 8008654:	200004af 	.word	0x200004af

08008658 <__sinit_lock_release>:
 8008658:	4801      	ldr	r0, [pc, #4]	; (8008660 <__sinit_lock_release+0x8>)
 800865a:	f000 bc15 	b.w	8008e88 <__retarget_lock_release_recursive>
 800865e:	bf00      	nop
 8008660:	200004af 	.word	0x200004af

08008664 <__sinit>:
 8008664:	b510      	push	{r4, lr}
 8008666:	4604      	mov	r4, r0
 8008668:	f7ff fff0 	bl	800864c <__sinit_lock_acquire>
 800866c:	69a3      	ldr	r3, [r4, #24]
 800866e:	b11b      	cbz	r3, 8008678 <__sinit+0x14>
 8008670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008674:	f7ff bff0 	b.w	8008658 <__sinit_lock_release>
 8008678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800867c:	6523      	str	r3, [r4, #80]	; 0x50
 800867e:	4b13      	ldr	r3, [pc, #76]	; (80086cc <__sinit+0x68>)
 8008680:	4a13      	ldr	r2, [pc, #76]	; (80086d0 <__sinit+0x6c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	62a2      	str	r2, [r4, #40]	; 0x28
 8008686:	42a3      	cmp	r3, r4
 8008688:	bf04      	itt	eq
 800868a:	2301      	moveq	r3, #1
 800868c:	61a3      	streq	r3, [r4, #24]
 800868e:	4620      	mov	r0, r4
 8008690:	f000 f820 	bl	80086d4 <__sfp>
 8008694:	6060      	str	r0, [r4, #4]
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f81c 	bl	80086d4 <__sfp>
 800869c:	60a0      	str	r0, [r4, #8]
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 f818 	bl	80086d4 <__sfp>
 80086a4:	2200      	movs	r2, #0
 80086a6:	60e0      	str	r0, [r4, #12]
 80086a8:	2104      	movs	r1, #4
 80086aa:	6860      	ldr	r0, [r4, #4]
 80086ac:	f7ff ff82 	bl	80085b4 <std>
 80086b0:	68a0      	ldr	r0, [r4, #8]
 80086b2:	2201      	movs	r2, #1
 80086b4:	2109      	movs	r1, #9
 80086b6:	f7ff ff7d 	bl	80085b4 <std>
 80086ba:	68e0      	ldr	r0, [r4, #12]
 80086bc:	2202      	movs	r2, #2
 80086be:	2112      	movs	r1, #18
 80086c0:	f7ff ff78 	bl	80085b4 <std>
 80086c4:	2301      	movs	r3, #1
 80086c6:	61a3      	str	r3, [r4, #24]
 80086c8:	e7d2      	b.n	8008670 <__sinit+0xc>
 80086ca:	bf00      	nop
 80086cc:	0800a3f8 	.word	0x0800a3f8
 80086d0:	080085fd 	.word	0x080085fd

080086d4 <__sfp>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	4607      	mov	r7, r0
 80086d8:	f7ff ffac 	bl	8008634 <__sfp_lock_acquire>
 80086dc:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <__sfp+0x84>)
 80086de:	681e      	ldr	r6, [r3, #0]
 80086e0:	69b3      	ldr	r3, [r6, #24]
 80086e2:	b913      	cbnz	r3, 80086ea <__sfp+0x16>
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff ffbd 	bl	8008664 <__sinit>
 80086ea:	3648      	adds	r6, #72	; 0x48
 80086ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	d503      	bpl.n	80086fc <__sfp+0x28>
 80086f4:	6833      	ldr	r3, [r6, #0]
 80086f6:	b30b      	cbz	r3, 800873c <__sfp+0x68>
 80086f8:	6836      	ldr	r6, [r6, #0]
 80086fa:	e7f7      	b.n	80086ec <__sfp+0x18>
 80086fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008700:	b9d5      	cbnz	r5, 8008738 <__sfp+0x64>
 8008702:	4b16      	ldr	r3, [pc, #88]	; (800875c <__sfp+0x88>)
 8008704:	60e3      	str	r3, [r4, #12]
 8008706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800870a:	6665      	str	r5, [r4, #100]	; 0x64
 800870c:	f000 fbba 	bl	8008e84 <__retarget_lock_init_recursive>
 8008710:	f7ff ff96 	bl	8008640 <__sfp_lock_release>
 8008714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800871c:	6025      	str	r5, [r4, #0]
 800871e:	61a5      	str	r5, [r4, #24]
 8008720:	2208      	movs	r2, #8
 8008722:	4629      	mov	r1, r5
 8008724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008728:	f7fd f960 	bl	80059ec <memset>
 800872c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008734:	4620      	mov	r0, r4
 8008736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008738:	3468      	adds	r4, #104	; 0x68
 800873a:	e7d9      	b.n	80086f0 <__sfp+0x1c>
 800873c:	2104      	movs	r1, #4
 800873e:	4638      	mov	r0, r7
 8008740:	f7ff ff62 	bl	8008608 <__sfmoreglue>
 8008744:	4604      	mov	r4, r0
 8008746:	6030      	str	r0, [r6, #0]
 8008748:	2800      	cmp	r0, #0
 800874a:	d1d5      	bne.n	80086f8 <__sfp+0x24>
 800874c:	f7ff ff78 	bl	8008640 <__sfp_lock_release>
 8008750:	230c      	movs	r3, #12
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	e7ee      	b.n	8008734 <__sfp+0x60>
 8008756:	bf00      	nop
 8008758:	0800a3f8 	.word	0x0800a3f8
 800875c:	ffff0001 	.word	0xffff0001

08008760 <_fwalk_reent>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	4606      	mov	r6, r0
 8008766:	4688      	mov	r8, r1
 8008768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800876c:	2700      	movs	r7, #0
 800876e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008772:	f1b9 0901 	subs.w	r9, r9, #1
 8008776:	d505      	bpl.n	8008784 <_fwalk_reent+0x24>
 8008778:	6824      	ldr	r4, [r4, #0]
 800877a:	2c00      	cmp	r4, #0
 800877c:	d1f7      	bne.n	800876e <_fwalk_reent+0xe>
 800877e:	4638      	mov	r0, r7
 8008780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008784:	89ab      	ldrh	r3, [r5, #12]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d907      	bls.n	800879a <_fwalk_reent+0x3a>
 800878a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800878e:	3301      	adds	r3, #1
 8008790:	d003      	beq.n	800879a <_fwalk_reent+0x3a>
 8008792:	4629      	mov	r1, r5
 8008794:	4630      	mov	r0, r6
 8008796:	47c0      	blx	r8
 8008798:	4307      	orrs	r7, r0
 800879a:	3568      	adds	r5, #104	; 0x68
 800879c:	e7e9      	b.n	8008772 <_fwalk_reent+0x12>

0800879e <rshift>:
 800879e:	6903      	ldr	r3, [r0, #16]
 80087a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80087a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80087ac:	f100 0414 	add.w	r4, r0, #20
 80087b0:	dd45      	ble.n	800883e <rshift+0xa0>
 80087b2:	f011 011f 	ands.w	r1, r1, #31
 80087b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80087ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80087be:	d10c      	bne.n	80087da <rshift+0x3c>
 80087c0:	f100 0710 	add.w	r7, r0, #16
 80087c4:	4629      	mov	r1, r5
 80087c6:	42b1      	cmp	r1, r6
 80087c8:	d334      	bcc.n	8008834 <rshift+0x96>
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	1eea      	subs	r2, r5, #3
 80087d0:	4296      	cmp	r6, r2
 80087d2:	bf38      	it	cc
 80087d4:	2300      	movcc	r3, #0
 80087d6:	4423      	add	r3, r4
 80087d8:	e015      	b.n	8008806 <rshift+0x68>
 80087da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087de:	f1c1 0820 	rsb	r8, r1, #32
 80087e2:	40cf      	lsrs	r7, r1
 80087e4:	f105 0e04 	add.w	lr, r5, #4
 80087e8:	46a1      	mov	r9, r4
 80087ea:	4576      	cmp	r6, lr
 80087ec:	46f4      	mov	ip, lr
 80087ee:	d815      	bhi.n	800881c <rshift+0x7e>
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009a      	lsls	r2, r3, #2
 80087f4:	3a04      	subs	r2, #4
 80087f6:	3501      	adds	r5, #1
 80087f8:	42ae      	cmp	r6, r5
 80087fa:	bf38      	it	cc
 80087fc:	2200      	movcc	r2, #0
 80087fe:	18a3      	adds	r3, r4, r2
 8008800:	50a7      	str	r7, [r4, r2]
 8008802:	b107      	cbz	r7, 8008806 <rshift+0x68>
 8008804:	3304      	adds	r3, #4
 8008806:	1b1a      	subs	r2, r3, r4
 8008808:	42a3      	cmp	r3, r4
 800880a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800880e:	bf08      	it	eq
 8008810:	2300      	moveq	r3, #0
 8008812:	6102      	str	r2, [r0, #16]
 8008814:	bf08      	it	eq
 8008816:	6143      	streq	r3, [r0, #20]
 8008818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800881c:	f8dc c000 	ldr.w	ip, [ip]
 8008820:	fa0c fc08 	lsl.w	ip, ip, r8
 8008824:	ea4c 0707 	orr.w	r7, ip, r7
 8008828:	f849 7b04 	str.w	r7, [r9], #4
 800882c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008830:	40cf      	lsrs	r7, r1
 8008832:	e7da      	b.n	80087ea <rshift+0x4c>
 8008834:	f851 cb04 	ldr.w	ip, [r1], #4
 8008838:	f847 cf04 	str.w	ip, [r7, #4]!
 800883c:	e7c3      	b.n	80087c6 <rshift+0x28>
 800883e:	4623      	mov	r3, r4
 8008840:	e7e1      	b.n	8008806 <rshift+0x68>

08008842 <__hexdig_fun>:
 8008842:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008846:	2b09      	cmp	r3, #9
 8008848:	d802      	bhi.n	8008850 <__hexdig_fun+0xe>
 800884a:	3820      	subs	r0, #32
 800884c:	b2c0      	uxtb	r0, r0
 800884e:	4770      	bx	lr
 8008850:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008854:	2b05      	cmp	r3, #5
 8008856:	d801      	bhi.n	800885c <__hexdig_fun+0x1a>
 8008858:	3847      	subs	r0, #71	; 0x47
 800885a:	e7f7      	b.n	800884c <__hexdig_fun+0xa>
 800885c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008860:	2b05      	cmp	r3, #5
 8008862:	d801      	bhi.n	8008868 <__hexdig_fun+0x26>
 8008864:	3827      	subs	r0, #39	; 0x27
 8008866:	e7f1      	b.n	800884c <__hexdig_fun+0xa>
 8008868:	2000      	movs	r0, #0
 800886a:	4770      	bx	lr

0800886c <__gethex>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	ed2d 8b02 	vpush	{d8}
 8008874:	b089      	sub	sp, #36	; 0x24
 8008876:	ee08 0a10 	vmov	s16, r0
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	4bbc      	ldr	r3, [pc, #752]	; (8008b70 <__gethex+0x304>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	4618      	mov	r0, r3
 8008884:	468b      	mov	fp, r1
 8008886:	4690      	mov	r8, r2
 8008888:	f7f7 fca2 	bl	80001d0 <strlen>
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	f8db 2000 	ldr.w	r2, [fp]
 8008892:	4403      	add	r3, r0
 8008894:	4682      	mov	sl, r0
 8008896:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	1c93      	adds	r3, r2, #2
 800889e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80088a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80088a6:	32fe      	adds	r2, #254	; 0xfe
 80088a8:	18d1      	adds	r1, r2, r3
 80088aa:	461f      	mov	r7, r3
 80088ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088b0:	9100      	str	r1, [sp, #0]
 80088b2:	2830      	cmp	r0, #48	; 0x30
 80088b4:	d0f8      	beq.n	80088a8 <__gethex+0x3c>
 80088b6:	f7ff ffc4 	bl	8008842 <__hexdig_fun>
 80088ba:	4604      	mov	r4, r0
 80088bc:	2800      	cmp	r0, #0
 80088be:	d13a      	bne.n	8008936 <__gethex+0xca>
 80088c0:	9901      	ldr	r1, [sp, #4]
 80088c2:	4652      	mov	r2, sl
 80088c4:	4638      	mov	r0, r7
 80088c6:	f001 fbf2 	bl	800a0ae <strncmp>
 80088ca:	4605      	mov	r5, r0
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d168      	bne.n	80089a2 <__gethex+0x136>
 80088d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80088d4:	eb07 060a 	add.w	r6, r7, sl
 80088d8:	f7ff ffb3 	bl	8008842 <__hexdig_fun>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d062      	beq.n	80089a6 <__gethex+0x13a>
 80088e0:	4633      	mov	r3, r6
 80088e2:	7818      	ldrb	r0, [r3, #0]
 80088e4:	2830      	cmp	r0, #48	; 0x30
 80088e6:	461f      	mov	r7, r3
 80088e8:	f103 0301 	add.w	r3, r3, #1
 80088ec:	d0f9      	beq.n	80088e2 <__gethex+0x76>
 80088ee:	f7ff ffa8 	bl	8008842 <__hexdig_fun>
 80088f2:	2301      	movs	r3, #1
 80088f4:	fab0 f480 	clz	r4, r0
 80088f8:	0964      	lsrs	r4, r4, #5
 80088fa:	4635      	mov	r5, r6
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	463a      	mov	r2, r7
 8008900:	4616      	mov	r6, r2
 8008902:	3201      	adds	r2, #1
 8008904:	7830      	ldrb	r0, [r6, #0]
 8008906:	f7ff ff9c 	bl	8008842 <__hexdig_fun>
 800890a:	2800      	cmp	r0, #0
 800890c:	d1f8      	bne.n	8008900 <__gethex+0x94>
 800890e:	9901      	ldr	r1, [sp, #4]
 8008910:	4652      	mov	r2, sl
 8008912:	4630      	mov	r0, r6
 8008914:	f001 fbcb 	bl	800a0ae <strncmp>
 8008918:	b980      	cbnz	r0, 800893c <__gethex+0xd0>
 800891a:	b94d      	cbnz	r5, 8008930 <__gethex+0xc4>
 800891c:	eb06 050a 	add.w	r5, r6, sl
 8008920:	462a      	mov	r2, r5
 8008922:	4616      	mov	r6, r2
 8008924:	3201      	adds	r2, #1
 8008926:	7830      	ldrb	r0, [r6, #0]
 8008928:	f7ff ff8b 	bl	8008842 <__hexdig_fun>
 800892c:	2800      	cmp	r0, #0
 800892e:	d1f8      	bne.n	8008922 <__gethex+0xb6>
 8008930:	1bad      	subs	r5, r5, r6
 8008932:	00ad      	lsls	r5, r5, #2
 8008934:	e004      	b.n	8008940 <__gethex+0xd4>
 8008936:	2400      	movs	r4, #0
 8008938:	4625      	mov	r5, r4
 800893a:	e7e0      	b.n	80088fe <__gethex+0x92>
 800893c:	2d00      	cmp	r5, #0
 800893e:	d1f7      	bne.n	8008930 <__gethex+0xc4>
 8008940:	7833      	ldrb	r3, [r6, #0]
 8008942:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008946:	2b50      	cmp	r3, #80	; 0x50
 8008948:	d13b      	bne.n	80089c2 <__gethex+0x156>
 800894a:	7873      	ldrb	r3, [r6, #1]
 800894c:	2b2b      	cmp	r3, #43	; 0x2b
 800894e:	d02c      	beq.n	80089aa <__gethex+0x13e>
 8008950:	2b2d      	cmp	r3, #45	; 0x2d
 8008952:	d02e      	beq.n	80089b2 <__gethex+0x146>
 8008954:	1c71      	adds	r1, r6, #1
 8008956:	f04f 0900 	mov.w	r9, #0
 800895a:	7808      	ldrb	r0, [r1, #0]
 800895c:	f7ff ff71 	bl	8008842 <__hexdig_fun>
 8008960:	1e43      	subs	r3, r0, #1
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b18      	cmp	r3, #24
 8008966:	d82c      	bhi.n	80089c2 <__gethex+0x156>
 8008968:	f1a0 0210 	sub.w	r2, r0, #16
 800896c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008970:	f7ff ff67 	bl	8008842 <__hexdig_fun>
 8008974:	1e43      	subs	r3, r0, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2b18      	cmp	r3, #24
 800897a:	d91d      	bls.n	80089b8 <__gethex+0x14c>
 800897c:	f1b9 0f00 	cmp.w	r9, #0
 8008980:	d000      	beq.n	8008984 <__gethex+0x118>
 8008982:	4252      	negs	r2, r2
 8008984:	4415      	add	r5, r2
 8008986:	f8cb 1000 	str.w	r1, [fp]
 800898a:	b1e4      	cbz	r4, 80089c6 <__gethex+0x15a>
 800898c:	9b00      	ldr	r3, [sp, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	bf14      	ite	ne
 8008992:	2700      	movne	r7, #0
 8008994:	2706      	moveq	r7, #6
 8008996:	4638      	mov	r0, r7
 8008998:	b009      	add	sp, #36	; 0x24
 800899a:	ecbd 8b02 	vpop	{d8}
 800899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a2:	463e      	mov	r6, r7
 80089a4:	4625      	mov	r5, r4
 80089a6:	2401      	movs	r4, #1
 80089a8:	e7ca      	b.n	8008940 <__gethex+0xd4>
 80089aa:	f04f 0900 	mov.w	r9, #0
 80089ae:	1cb1      	adds	r1, r6, #2
 80089b0:	e7d3      	b.n	800895a <__gethex+0xee>
 80089b2:	f04f 0901 	mov.w	r9, #1
 80089b6:	e7fa      	b.n	80089ae <__gethex+0x142>
 80089b8:	230a      	movs	r3, #10
 80089ba:	fb03 0202 	mla	r2, r3, r2, r0
 80089be:	3a10      	subs	r2, #16
 80089c0:	e7d4      	b.n	800896c <__gethex+0x100>
 80089c2:	4631      	mov	r1, r6
 80089c4:	e7df      	b.n	8008986 <__gethex+0x11a>
 80089c6:	1bf3      	subs	r3, r6, r7
 80089c8:	3b01      	subs	r3, #1
 80089ca:	4621      	mov	r1, r4
 80089cc:	2b07      	cmp	r3, #7
 80089ce:	dc0b      	bgt.n	80089e8 <__gethex+0x17c>
 80089d0:	ee18 0a10 	vmov	r0, s16
 80089d4:	f000 fae6 	bl	8008fa4 <_Balloc>
 80089d8:	4604      	mov	r4, r0
 80089da:	b940      	cbnz	r0, 80089ee <__gethex+0x182>
 80089dc:	4b65      	ldr	r3, [pc, #404]	; (8008b74 <__gethex+0x308>)
 80089de:	4602      	mov	r2, r0
 80089e0:	21de      	movs	r1, #222	; 0xde
 80089e2:	4865      	ldr	r0, [pc, #404]	; (8008b78 <__gethex+0x30c>)
 80089e4:	f001 fb94 	bl	800a110 <__assert_func>
 80089e8:	3101      	adds	r1, #1
 80089ea:	105b      	asrs	r3, r3, #1
 80089ec:	e7ee      	b.n	80089cc <__gethex+0x160>
 80089ee:	f100 0914 	add.w	r9, r0, #20
 80089f2:	f04f 0b00 	mov.w	fp, #0
 80089f6:	f1ca 0301 	rsb	r3, sl, #1
 80089fa:	f8cd 9008 	str.w	r9, [sp, #8]
 80089fe:	f8cd b000 	str.w	fp, [sp]
 8008a02:	9306      	str	r3, [sp, #24]
 8008a04:	42b7      	cmp	r7, r6
 8008a06:	d340      	bcc.n	8008a8a <__gethex+0x21e>
 8008a08:	9802      	ldr	r0, [sp, #8]
 8008a0a:	9b00      	ldr	r3, [sp, #0]
 8008a0c:	f840 3b04 	str.w	r3, [r0], #4
 8008a10:	eba0 0009 	sub.w	r0, r0, r9
 8008a14:	1080      	asrs	r0, r0, #2
 8008a16:	0146      	lsls	r6, r0, #5
 8008a18:	6120      	str	r0, [r4, #16]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fbb8 	bl	8009190 <__hi0bits>
 8008a20:	1a30      	subs	r0, r6, r0
 8008a22:	f8d8 6000 	ldr.w	r6, [r8]
 8008a26:	42b0      	cmp	r0, r6
 8008a28:	dd63      	ble.n	8008af2 <__gethex+0x286>
 8008a2a:	1b87      	subs	r7, r0, r6
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f000 ff52 	bl	80098d8 <__any_on>
 8008a34:	4682      	mov	sl, r0
 8008a36:	b1a8      	cbz	r0, 8008a64 <__gethex+0x1f8>
 8008a38:	1e7b      	subs	r3, r7, #1
 8008a3a:	1159      	asrs	r1, r3, #5
 8008a3c:	f003 021f 	and.w	r2, r3, #31
 8008a40:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a44:	f04f 0a01 	mov.w	sl, #1
 8008a48:	fa0a f202 	lsl.w	r2, sl, r2
 8008a4c:	420a      	tst	r2, r1
 8008a4e:	d009      	beq.n	8008a64 <__gethex+0x1f8>
 8008a50:	4553      	cmp	r3, sl
 8008a52:	dd05      	ble.n	8008a60 <__gethex+0x1f4>
 8008a54:	1eb9      	subs	r1, r7, #2
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 ff3e 	bl	80098d8 <__any_on>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d145      	bne.n	8008aec <__gethex+0x280>
 8008a60:	f04f 0a02 	mov.w	sl, #2
 8008a64:	4639      	mov	r1, r7
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fe99 	bl	800879e <rshift>
 8008a6c:	443d      	add	r5, r7
 8008a6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a72:	42ab      	cmp	r3, r5
 8008a74:	da4c      	bge.n	8008b10 <__gethex+0x2a4>
 8008a76:	ee18 0a10 	vmov	r0, s16
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	f000 fad2 	bl	8009024 <_Bfree>
 8008a80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a82:	2300      	movs	r3, #0
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	27a3      	movs	r7, #163	; 0xa3
 8008a88:	e785      	b.n	8008996 <__gethex+0x12a>
 8008a8a:	1e73      	subs	r3, r6, #1
 8008a8c:	9a05      	ldr	r2, [sp, #20]
 8008a8e:	9303      	str	r3, [sp, #12]
 8008a90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d019      	beq.n	8008acc <__gethex+0x260>
 8008a98:	f1bb 0f20 	cmp.w	fp, #32
 8008a9c:	d107      	bne.n	8008aae <__gethex+0x242>
 8008a9e:	9b02      	ldr	r3, [sp, #8]
 8008aa0:	9a00      	ldr	r2, [sp, #0]
 8008aa2:	f843 2b04 	str.w	r2, [r3], #4
 8008aa6:	9302      	str	r3, [sp, #8]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	469b      	mov	fp, r3
 8008aae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ab2:	f7ff fec6 	bl	8008842 <__hexdig_fun>
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	f000 000f 	and.w	r0, r0, #15
 8008abc:	fa00 f00b 	lsl.w	r0, r0, fp
 8008ac0:	4303      	orrs	r3, r0
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	f10b 0b04 	add.w	fp, fp, #4
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	e00d      	b.n	8008ae8 <__gethex+0x27c>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	9a06      	ldr	r2, [sp, #24]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	42bb      	cmp	r3, r7
 8008ad4:	d3e0      	bcc.n	8008a98 <__gethex+0x22c>
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	9901      	ldr	r1, [sp, #4]
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	4652      	mov	r2, sl
 8008ade:	f001 fae6 	bl	800a0ae <strncmp>
 8008ae2:	9b07      	ldr	r3, [sp, #28]
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d1d7      	bne.n	8008a98 <__gethex+0x22c>
 8008ae8:	461e      	mov	r6, r3
 8008aea:	e78b      	b.n	8008a04 <__gethex+0x198>
 8008aec:	f04f 0a03 	mov.w	sl, #3
 8008af0:	e7b8      	b.n	8008a64 <__gethex+0x1f8>
 8008af2:	da0a      	bge.n	8008b0a <__gethex+0x29e>
 8008af4:	1a37      	subs	r7, r6, r0
 8008af6:	4621      	mov	r1, r4
 8008af8:	ee18 0a10 	vmov	r0, s16
 8008afc:	463a      	mov	r2, r7
 8008afe:	f000 fcad 	bl	800945c <__lshift>
 8008b02:	1bed      	subs	r5, r5, r7
 8008b04:	4604      	mov	r4, r0
 8008b06:	f100 0914 	add.w	r9, r0, #20
 8008b0a:	f04f 0a00 	mov.w	sl, #0
 8008b0e:	e7ae      	b.n	8008a6e <__gethex+0x202>
 8008b10:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b14:	42a8      	cmp	r0, r5
 8008b16:	dd72      	ble.n	8008bfe <__gethex+0x392>
 8008b18:	1b45      	subs	r5, r0, r5
 8008b1a:	42ae      	cmp	r6, r5
 8008b1c:	dc36      	bgt.n	8008b8c <__gethex+0x320>
 8008b1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d02a      	beq.n	8008b7c <__gethex+0x310>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	d02c      	beq.n	8008b84 <__gethex+0x318>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d115      	bne.n	8008b5a <__gethex+0x2ee>
 8008b2e:	42ae      	cmp	r6, r5
 8008b30:	d113      	bne.n	8008b5a <__gethex+0x2ee>
 8008b32:	2e01      	cmp	r6, #1
 8008b34:	d10b      	bne.n	8008b4e <__gethex+0x2e2>
 8008b36:	9a04      	ldr	r2, [sp, #16]
 8008b38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b3c:	6013      	str	r3, [r2, #0]
 8008b3e:	2301      	movs	r3, #1
 8008b40:	6123      	str	r3, [r4, #16]
 8008b42:	f8c9 3000 	str.w	r3, [r9]
 8008b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b48:	2762      	movs	r7, #98	; 0x62
 8008b4a:	601c      	str	r4, [r3, #0]
 8008b4c:	e723      	b.n	8008996 <__gethex+0x12a>
 8008b4e:	1e71      	subs	r1, r6, #1
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fec1 	bl	80098d8 <__any_on>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1ed      	bne.n	8008b36 <__gethex+0x2ca>
 8008b5a:	ee18 0a10 	vmov	r0, s16
 8008b5e:	4621      	mov	r1, r4
 8008b60:	f000 fa60 	bl	8009024 <_Bfree>
 8008b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b66:	2300      	movs	r3, #0
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	2750      	movs	r7, #80	; 0x50
 8008b6c:	e713      	b.n	8008996 <__gethex+0x12a>
 8008b6e:	bf00      	nop
 8008b70:	0800a6ec 	.word	0x0800a6ec
 8008b74:	0800a60c 	.word	0x0800a60c
 8008b78:	0800a680 	.word	0x0800a680
 8008b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1eb      	bne.n	8008b5a <__gethex+0x2ee>
 8008b82:	e7d8      	b.n	8008b36 <__gethex+0x2ca>
 8008b84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1d5      	bne.n	8008b36 <__gethex+0x2ca>
 8008b8a:	e7e6      	b.n	8008b5a <__gethex+0x2ee>
 8008b8c:	1e6f      	subs	r7, r5, #1
 8008b8e:	f1ba 0f00 	cmp.w	sl, #0
 8008b92:	d131      	bne.n	8008bf8 <__gethex+0x38c>
 8008b94:	b127      	cbz	r7, 8008ba0 <__gethex+0x334>
 8008b96:	4639      	mov	r1, r7
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fe9d 	bl	80098d8 <__any_on>
 8008b9e:	4682      	mov	sl, r0
 8008ba0:	117b      	asrs	r3, r7, #5
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ba8:	f007 071f 	and.w	r7, r7, #31
 8008bac:	fa01 f707 	lsl.w	r7, r1, r7
 8008bb0:	421f      	tst	r7, r3
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	bf18      	it	ne
 8008bb8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bbc:	1b76      	subs	r6, r6, r5
 8008bbe:	f7ff fdee 	bl	800879e <rshift>
 8008bc2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008bc6:	2702      	movs	r7, #2
 8008bc8:	f1ba 0f00 	cmp.w	sl, #0
 8008bcc:	d048      	beq.n	8008c60 <__gethex+0x3f4>
 8008bce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d015      	beq.n	8008c02 <__gethex+0x396>
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d017      	beq.n	8008c0a <__gethex+0x39e>
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d109      	bne.n	8008bf2 <__gethex+0x386>
 8008bde:	f01a 0f02 	tst.w	sl, #2
 8008be2:	d006      	beq.n	8008bf2 <__gethex+0x386>
 8008be4:	f8d9 0000 	ldr.w	r0, [r9]
 8008be8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008bec:	f01a 0f01 	tst.w	sl, #1
 8008bf0:	d10e      	bne.n	8008c10 <__gethex+0x3a4>
 8008bf2:	f047 0710 	orr.w	r7, r7, #16
 8008bf6:	e033      	b.n	8008c60 <__gethex+0x3f4>
 8008bf8:	f04f 0a01 	mov.w	sl, #1
 8008bfc:	e7d0      	b.n	8008ba0 <__gethex+0x334>
 8008bfe:	2701      	movs	r7, #1
 8008c00:	e7e2      	b.n	8008bc8 <__gethex+0x35c>
 8008c02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c04:	f1c3 0301 	rsb	r3, r3, #1
 8008c08:	9315      	str	r3, [sp, #84]	; 0x54
 8008c0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d0f0      	beq.n	8008bf2 <__gethex+0x386>
 8008c10:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008c14:	f104 0314 	add.w	r3, r4, #20
 8008c18:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008c1c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008c20:	f04f 0c00 	mov.w	ip, #0
 8008c24:	4618      	mov	r0, r3
 8008c26:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c2a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008c2e:	d01c      	beq.n	8008c6a <__gethex+0x3fe>
 8008c30:	3201      	adds	r2, #1
 8008c32:	6002      	str	r2, [r0, #0]
 8008c34:	2f02      	cmp	r7, #2
 8008c36:	f104 0314 	add.w	r3, r4, #20
 8008c3a:	d13f      	bne.n	8008cbc <__gethex+0x450>
 8008c3c:	f8d8 2000 	ldr.w	r2, [r8]
 8008c40:	3a01      	subs	r2, #1
 8008c42:	42b2      	cmp	r2, r6
 8008c44:	d10a      	bne.n	8008c5c <__gethex+0x3f0>
 8008c46:	1171      	asrs	r1, r6, #5
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c4e:	f006 061f 	and.w	r6, r6, #31
 8008c52:	fa02 f606 	lsl.w	r6, r2, r6
 8008c56:	421e      	tst	r6, r3
 8008c58:	bf18      	it	ne
 8008c5a:	4617      	movne	r7, r2
 8008c5c:	f047 0720 	orr.w	r7, r7, #32
 8008c60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c62:	601c      	str	r4, [r3, #0]
 8008c64:	9b04      	ldr	r3, [sp, #16]
 8008c66:	601d      	str	r5, [r3, #0]
 8008c68:	e695      	b.n	8008996 <__gethex+0x12a>
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c70:	d8d8      	bhi.n	8008c24 <__gethex+0x3b8>
 8008c72:	68a3      	ldr	r3, [r4, #8]
 8008c74:	459b      	cmp	fp, r3
 8008c76:	db19      	blt.n	8008cac <__gethex+0x440>
 8008c78:	6861      	ldr	r1, [r4, #4]
 8008c7a:	ee18 0a10 	vmov	r0, s16
 8008c7e:	3101      	adds	r1, #1
 8008c80:	f000 f990 	bl	8008fa4 <_Balloc>
 8008c84:	4681      	mov	r9, r0
 8008c86:	b918      	cbnz	r0, 8008c90 <__gethex+0x424>
 8008c88:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <__gethex+0x488>)
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	2184      	movs	r1, #132	; 0x84
 8008c8e:	e6a8      	b.n	80089e2 <__gethex+0x176>
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	3202      	adds	r2, #2
 8008c94:	f104 010c 	add.w	r1, r4, #12
 8008c98:	0092      	lsls	r2, r2, #2
 8008c9a:	300c      	adds	r0, #12
 8008c9c:	f000 f974 	bl	8008f88 <memcpy>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	ee18 0a10 	vmov	r0, s16
 8008ca6:	f000 f9bd 	bl	8009024 <_Bfree>
 8008caa:	464c      	mov	r4, r9
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cb4:	6122      	str	r2, [r4, #16]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	615a      	str	r2, [r3, #20]
 8008cba:	e7bb      	b.n	8008c34 <__gethex+0x3c8>
 8008cbc:	6922      	ldr	r2, [r4, #16]
 8008cbe:	455a      	cmp	r2, fp
 8008cc0:	dd0b      	ble.n	8008cda <__gethex+0x46e>
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f7ff fd6a 	bl	800879e <rshift>
 8008cca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cce:	3501      	adds	r5, #1
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	f6ff aed0 	blt.w	8008a76 <__gethex+0x20a>
 8008cd6:	2701      	movs	r7, #1
 8008cd8:	e7c0      	b.n	8008c5c <__gethex+0x3f0>
 8008cda:	f016 061f 	ands.w	r6, r6, #31
 8008cde:	d0fa      	beq.n	8008cd6 <__gethex+0x46a>
 8008ce0:	449a      	add	sl, r3
 8008ce2:	f1c6 0620 	rsb	r6, r6, #32
 8008ce6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008cea:	f000 fa51 	bl	8009190 <__hi0bits>
 8008cee:	42b0      	cmp	r0, r6
 8008cf0:	dbe7      	blt.n	8008cc2 <__gethex+0x456>
 8008cf2:	e7f0      	b.n	8008cd6 <__gethex+0x46a>
 8008cf4:	0800a60c 	.word	0x0800a60c

08008cf8 <L_shift>:
 8008cf8:	f1c2 0208 	rsb	r2, r2, #8
 8008cfc:	0092      	lsls	r2, r2, #2
 8008cfe:	b570      	push	{r4, r5, r6, lr}
 8008d00:	f1c2 0620 	rsb	r6, r2, #32
 8008d04:	6843      	ldr	r3, [r0, #4]
 8008d06:	6804      	ldr	r4, [r0, #0]
 8008d08:	fa03 f506 	lsl.w	r5, r3, r6
 8008d0c:	432c      	orrs	r4, r5
 8008d0e:	40d3      	lsrs	r3, r2
 8008d10:	6004      	str	r4, [r0, #0]
 8008d12:	f840 3f04 	str.w	r3, [r0, #4]!
 8008d16:	4288      	cmp	r0, r1
 8008d18:	d3f4      	bcc.n	8008d04 <L_shift+0xc>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}

08008d1c <__match>:
 8008d1c:	b530      	push	{r4, r5, lr}
 8008d1e:	6803      	ldr	r3, [r0, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d26:	b914      	cbnz	r4, 8008d2e <__match+0x12>
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	bd30      	pop	{r4, r5, pc}
 8008d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d36:	2d19      	cmp	r5, #25
 8008d38:	bf98      	it	ls
 8008d3a:	3220      	addls	r2, #32
 8008d3c:	42a2      	cmp	r2, r4
 8008d3e:	d0f0      	beq.n	8008d22 <__match+0x6>
 8008d40:	2000      	movs	r0, #0
 8008d42:	e7f3      	b.n	8008d2c <__match+0x10>

08008d44 <__hexnan>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	680b      	ldr	r3, [r1, #0]
 8008d4a:	6801      	ldr	r1, [r0, #0]
 8008d4c:	115e      	asrs	r6, r3, #5
 8008d4e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008d52:	f013 031f 	ands.w	r3, r3, #31
 8008d56:	b087      	sub	sp, #28
 8008d58:	bf18      	it	ne
 8008d5a:	3604      	addne	r6, #4
 8008d5c:	2500      	movs	r5, #0
 8008d5e:	1f37      	subs	r7, r6, #4
 8008d60:	4682      	mov	sl, r0
 8008d62:	4690      	mov	r8, r2
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	f846 5c04 	str.w	r5, [r6, #-4]
 8008d6a:	46b9      	mov	r9, r7
 8008d6c:	463c      	mov	r4, r7
 8008d6e:	9502      	str	r5, [sp, #8]
 8008d70:	46ab      	mov	fp, r5
 8008d72:	784a      	ldrb	r2, [r1, #1]
 8008d74:	1c4b      	adds	r3, r1, #1
 8008d76:	9303      	str	r3, [sp, #12]
 8008d78:	b342      	cbz	r2, 8008dcc <__hexnan+0x88>
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	9105      	str	r1, [sp, #20]
 8008d7e:	9204      	str	r2, [sp, #16]
 8008d80:	f7ff fd5f 	bl	8008842 <__hexdig_fun>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d14f      	bne.n	8008e28 <__hexnan+0xe4>
 8008d88:	9a04      	ldr	r2, [sp, #16]
 8008d8a:	9905      	ldr	r1, [sp, #20]
 8008d8c:	2a20      	cmp	r2, #32
 8008d8e:	d818      	bhi.n	8008dc2 <__hexnan+0x7e>
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	459b      	cmp	fp, r3
 8008d94:	dd13      	ble.n	8008dbe <__hexnan+0x7a>
 8008d96:	454c      	cmp	r4, r9
 8008d98:	d206      	bcs.n	8008da8 <__hexnan+0x64>
 8008d9a:	2d07      	cmp	r5, #7
 8008d9c:	dc04      	bgt.n	8008da8 <__hexnan+0x64>
 8008d9e:	462a      	mov	r2, r5
 8008da0:	4649      	mov	r1, r9
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff ffa8 	bl	8008cf8 <L_shift>
 8008da8:	4544      	cmp	r4, r8
 8008daa:	d950      	bls.n	8008e4e <__hexnan+0x10a>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f1a4 0904 	sub.w	r9, r4, #4
 8008db2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008db6:	f8cd b008 	str.w	fp, [sp, #8]
 8008dba:	464c      	mov	r4, r9
 8008dbc:	461d      	mov	r5, r3
 8008dbe:	9903      	ldr	r1, [sp, #12]
 8008dc0:	e7d7      	b.n	8008d72 <__hexnan+0x2e>
 8008dc2:	2a29      	cmp	r2, #41	; 0x29
 8008dc4:	d156      	bne.n	8008e74 <__hexnan+0x130>
 8008dc6:	3102      	adds	r1, #2
 8008dc8:	f8ca 1000 	str.w	r1, [sl]
 8008dcc:	f1bb 0f00 	cmp.w	fp, #0
 8008dd0:	d050      	beq.n	8008e74 <__hexnan+0x130>
 8008dd2:	454c      	cmp	r4, r9
 8008dd4:	d206      	bcs.n	8008de4 <__hexnan+0xa0>
 8008dd6:	2d07      	cmp	r5, #7
 8008dd8:	dc04      	bgt.n	8008de4 <__hexnan+0xa0>
 8008dda:	462a      	mov	r2, r5
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff ff8a 	bl	8008cf8 <L_shift>
 8008de4:	4544      	cmp	r4, r8
 8008de6:	d934      	bls.n	8008e52 <__hexnan+0x10e>
 8008de8:	f1a8 0204 	sub.w	r2, r8, #4
 8008dec:	4623      	mov	r3, r4
 8008dee:	f853 1b04 	ldr.w	r1, [r3], #4
 8008df2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008df6:	429f      	cmp	r7, r3
 8008df8:	d2f9      	bcs.n	8008dee <__hexnan+0xaa>
 8008dfa:	1b3b      	subs	r3, r7, r4
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	3304      	adds	r3, #4
 8008e02:	3401      	adds	r4, #1
 8008e04:	3e03      	subs	r6, #3
 8008e06:	42b4      	cmp	r4, r6
 8008e08:	bf88      	it	hi
 8008e0a:	2304      	movhi	r3, #4
 8008e0c:	4443      	add	r3, r8
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f843 2b04 	str.w	r2, [r3], #4
 8008e14:	429f      	cmp	r7, r3
 8008e16:	d2fb      	bcs.n	8008e10 <__hexnan+0xcc>
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	b91b      	cbnz	r3, 8008e24 <__hexnan+0xe0>
 8008e1c:	4547      	cmp	r7, r8
 8008e1e:	d127      	bne.n	8008e70 <__hexnan+0x12c>
 8008e20:	2301      	movs	r3, #1
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	2005      	movs	r0, #5
 8008e26:	e026      	b.n	8008e76 <__hexnan+0x132>
 8008e28:	3501      	adds	r5, #1
 8008e2a:	2d08      	cmp	r5, #8
 8008e2c:	f10b 0b01 	add.w	fp, fp, #1
 8008e30:	dd06      	ble.n	8008e40 <__hexnan+0xfc>
 8008e32:	4544      	cmp	r4, r8
 8008e34:	d9c3      	bls.n	8008dbe <__hexnan+0x7a>
 8008e36:	2300      	movs	r3, #0
 8008e38:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e3c:	2501      	movs	r5, #1
 8008e3e:	3c04      	subs	r4, #4
 8008e40:	6822      	ldr	r2, [r4, #0]
 8008e42:	f000 000f 	and.w	r0, r0, #15
 8008e46:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008e4a:	6022      	str	r2, [r4, #0]
 8008e4c:	e7b7      	b.n	8008dbe <__hexnan+0x7a>
 8008e4e:	2508      	movs	r5, #8
 8008e50:	e7b5      	b.n	8008dbe <__hexnan+0x7a>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0df      	beq.n	8008e18 <__hexnan+0xd4>
 8008e58:	f04f 32ff 	mov.w	r2, #4294967295
 8008e5c:	f1c3 0320 	rsb	r3, r3, #32
 8008e60:	fa22 f303 	lsr.w	r3, r2, r3
 8008e64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008e68:	401a      	ands	r2, r3
 8008e6a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008e6e:	e7d3      	b.n	8008e18 <__hexnan+0xd4>
 8008e70:	3f04      	subs	r7, #4
 8008e72:	e7d1      	b.n	8008e18 <__hexnan+0xd4>
 8008e74:	2004      	movs	r0, #4
 8008e76:	b007      	add	sp, #28
 8008e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e7c <_localeconv_r>:
 8008e7c:	4800      	ldr	r0, [pc, #0]	; (8008e80 <_localeconv_r+0x4>)
 8008e7e:	4770      	bx	lr
 8008e80:	2000018c 	.word	0x2000018c

08008e84 <__retarget_lock_init_recursive>:
 8008e84:	4770      	bx	lr

08008e86 <__retarget_lock_acquire_recursive>:
 8008e86:	4770      	bx	lr

08008e88 <__retarget_lock_release_recursive>:
 8008e88:	4770      	bx	lr

08008e8a <__swhatbuf_r>:
 8008e8a:	b570      	push	{r4, r5, r6, lr}
 8008e8c:	460e      	mov	r6, r1
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	2900      	cmp	r1, #0
 8008e94:	b096      	sub	sp, #88	; 0x58
 8008e96:	4614      	mov	r4, r2
 8008e98:	461d      	mov	r5, r3
 8008e9a:	da07      	bge.n	8008eac <__swhatbuf_r+0x22>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	602b      	str	r3, [r5, #0]
 8008ea0:	89b3      	ldrh	r3, [r6, #12]
 8008ea2:	061a      	lsls	r2, r3, #24
 8008ea4:	d410      	bmi.n	8008ec8 <__swhatbuf_r+0x3e>
 8008ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eaa:	e00e      	b.n	8008eca <__swhatbuf_r+0x40>
 8008eac:	466a      	mov	r2, sp
 8008eae:	f001 f96f 	bl	800a190 <_fstat_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	dbf2      	blt.n	8008e9c <__swhatbuf_r+0x12>
 8008eb6:	9a01      	ldr	r2, [sp, #4]
 8008eb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ec0:	425a      	negs	r2, r3
 8008ec2:	415a      	adcs	r2, r3
 8008ec4:	602a      	str	r2, [r5, #0]
 8008ec6:	e7ee      	b.n	8008ea6 <__swhatbuf_r+0x1c>
 8008ec8:	2340      	movs	r3, #64	; 0x40
 8008eca:	2000      	movs	r0, #0
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	b016      	add	sp, #88	; 0x58
 8008ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ed4 <__smakebuf_r>:
 8008ed4:	898b      	ldrh	r3, [r1, #12]
 8008ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ed8:	079d      	lsls	r5, r3, #30
 8008eda:	4606      	mov	r6, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	d507      	bpl.n	8008ef0 <__smakebuf_r+0x1c>
 8008ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	6123      	str	r3, [r4, #16]
 8008ee8:	2301      	movs	r3, #1
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	b002      	add	sp, #8
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	ab01      	add	r3, sp, #4
 8008ef2:	466a      	mov	r2, sp
 8008ef4:	f7ff ffc9 	bl	8008e8a <__swhatbuf_r>
 8008ef8:	9900      	ldr	r1, [sp, #0]
 8008efa:	4605      	mov	r5, r0
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 fd6b 	bl	80099d8 <_malloc_r>
 8008f02:	b948      	cbnz	r0, 8008f18 <__smakebuf_r+0x44>
 8008f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f08:	059a      	lsls	r2, r3, #22
 8008f0a:	d4ef      	bmi.n	8008eec <__smakebuf_r+0x18>
 8008f0c:	f023 0303 	bic.w	r3, r3, #3
 8008f10:	f043 0302 	orr.w	r3, r3, #2
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e7e3      	b.n	8008ee0 <__smakebuf_r+0xc>
 8008f18:	4b0d      	ldr	r3, [pc, #52]	; (8008f50 <__smakebuf_r+0x7c>)
 8008f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	6020      	str	r0, [r4, #0]
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	9b00      	ldr	r3, [sp, #0]
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	6120      	str	r0, [r4, #16]
 8008f2e:	b15b      	cbz	r3, 8008f48 <__smakebuf_r+0x74>
 8008f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f34:	4630      	mov	r0, r6
 8008f36:	f001 f93d 	bl	800a1b4 <_isatty_r>
 8008f3a:	b128      	cbz	r0, 8008f48 <__smakebuf_r+0x74>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	f043 0301 	orr.w	r3, r3, #1
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	89a0      	ldrh	r0, [r4, #12]
 8008f4a:	4305      	orrs	r5, r0
 8008f4c:	81a5      	strh	r5, [r4, #12]
 8008f4e:	e7cd      	b.n	8008eec <__smakebuf_r+0x18>
 8008f50:	080085fd 	.word	0x080085fd

08008f54 <malloc>:
 8008f54:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <malloc+0xc>)
 8008f56:	4601      	mov	r1, r0
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f000 bd3d 	b.w	80099d8 <_malloc_r>
 8008f5e:	bf00      	nop
 8008f60:	20000034 	.word	0x20000034

08008f64 <__ascii_mbtowc>:
 8008f64:	b082      	sub	sp, #8
 8008f66:	b901      	cbnz	r1, 8008f6a <__ascii_mbtowc+0x6>
 8008f68:	a901      	add	r1, sp, #4
 8008f6a:	b142      	cbz	r2, 8008f7e <__ascii_mbtowc+0x1a>
 8008f6c:	b14b      	cbz	r3, 8008f82 <__ascii_mbtowc+0x1e>
 8008f6e:	7813      	ldrb	r3, [r2, #0]
 8008f70:	600b      	str	r3, [r1, #0]
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	1e10      	subs	r0, r2, #0
 8008f76:	bf18      	it	ne
 8008f78:	2001      	movne	r0, #1
 8008f7a:	b002      	add	sp, #8
 8008f7c:	4770      	bx	lr
 8008f7e:	4610      	mov	r0, r2
 8008f80:	e7fb      	b.n	8008f7a <__ascii_mbtowc+0x16>
 8008f82:	f06f 0001 	mvn.w	r0, #1
 8008f86:	e7f8      	b.n	8008f7a <__ascii_mbtowc+0x16>

08008f88 <memcpy>:
 8008f88:	440a      	add	r2, r1
 8008f8a:	4291      	cmp	r1, r2
 8008f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f90:	d100      	bne.n	8008f94 <memcpy+0xc>
 8008f92:	4770      	bx	lr
 8008f94:	b510      	push	{r4, lr}
 8008f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f9e:	4291      	cmp	r1, r2
 8008fa0:	d1f9      	bne.n	8008f96 <memcpy+0xe>
 8008fa2:	bd10      	pop	{r4, pc}

08008fa4 <_Balloc>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Balloc+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7ff ffd0 	bl	8008f54 <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Balloc+0x20>
 8008fba:	4b18      	ldr	r3, [pc, #96]	; (800901c <_Balloc+0x78>)
 8008fbc:	4818      	ldr	r0, [pc, #96]	; (8009020 <_Balloc+0x7c>)
 8008fbe:	2166      	movs	r1, #102	; 0x66
 8008fc0:	f001 f8a6 	bl	800a110 <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fce:	68f3      	ldr	r3, [r6, #12]
 8008fd0:	b183      	cbz	r3, 8008ff4 <_Balloc+0x50>
 8008fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fda:	b9b8      	cbnz	r0, 800900c <_Balloc+0x68>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe2:	1d72      	adds	r2, r6, #5
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fc97 	bl	800991a <_calloc_r>
 8008fec:	b160      	cbz	r0, 8009008 <_Balloc+0x64>
 8008fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff2:	e00e      	b.n	8009012 <_Balloc+0x6e>
 8008ff4:	2221      	movs	r2, #33	; 0x21
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fc8e 	bl	800991a <_calloc_r>
 8008ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009000:	60f0      	str	r0, [r6, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <_Balloc+0x2e>
 8009008:	2000      	movs	r0, #0
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009012:	2300      	movs	r3, #0
 8009014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009018:	e7f7      	b.n	800900a <_Balloc+0x66>
 800901a:	bf00      	nop
 800901c:	0800a596 	.word	0x0800a596
 8009020:	0800a700 	.word	0x0800a700

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b976      	cbnz	r6, 800904c <_Bfree+0x28>
 800902e:	2010      	movs	r0, #16
 8009030:	f7ff ff90 	bl	8008f54 <malloc>
 8009034:	4602      	mov	r2, r0
 8009036:	6268      	str	r0, [r5, #36]	; 0x24
 8009038:	b920      	cbnz	r0, 8009044 <_Bfree+0x20>
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <_Bfree+0x3c>)
 800903c:	4809      	ldr	r0, [pc, #36]	; (8009064 <_Bfree+0x40>)
 800903e:	218a      	movs	r1, #138	; 0x8a
 8009040:	f001 f866 	bl	800a110 <__assert_func>
 8009044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009048:	6006      	str	r6, [r0, #0]
 800904a:	60c6      	str	r6, [r0, #12]
 800904c:	b13c      	cbz	r4, 800905e <_Bfree+0x3a>
 800904e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009058:	6021      	str	r1, [r4, #0]
 800905a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	0800a596 	.word	0x0800a596
 8009064:	0800a700 	.word	0x0800a700

08009068 <__multadd>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	690e      	ldr	r6, [r1, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	4698      	mov	r8, r3
 8009072:	460c      	mov	r4, r1
 8009074:	f101 0014 	add.w	r0, r1, #20
 8009078:	2300      	movs	r3, #0
 800907a:	6805      	ldr	r5, [r0, #0]
 800907c:	b2a9      	uxth	r1, r5
 800907e:	fb02 8101 	mla	r1, r2, r1, r8
 8009082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009086:	0c2d      	lsrs	r5, r5, #16
 8009088:	fb02 c505 	mla	r5, r2, r5, ip
 800908c:	b289      	uxth	r1, r1
 800908e:	3301      	adds	r3, #1
 8009090:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009094:	429e      	cmp	r6, r3
 8009096:	f840 1b04 	str.w	r1, [r0], #4
 800909a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800909e:	dcec      	bgt.n	800907a <__multadd+0x12>
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d022      	beq.n	80090ec <__multadd+0x84>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x78>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff77 	bl	8008fa4 <_Balloc>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5e>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <__multadd+0x8c>)
 80090be:	480e      	ldr	r0, [pc, #56]	; (80090f8 <__multadd+0x90>)
 80090c0:	21b5      	movs	r1, #181	; 0xb5
 80090c2:	f001 f825 	bl	800a110 <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7ff ff59 	bl	8008f88 <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa3 	bl	8009024 <_Bfree>
 80090de:	462c      	mov	r4, r5
 80090e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090e4:	3601      	adds	r6, #1
 80090e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80090ea:	6126      	str	r6, [r4, #16]
 80090ec:	4620      	mov	r0, r4
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f2:	bf00      	nop
 80090f4:	0800a60c 	.word	0x0800a60c
 80090f8:	0800a700 	.word	0x0800a700

080090fc <__s2b>:
 80090fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009100:	460c      	mov	r4, r1
 8009102:	4615      	mov	r5, r2
 8009104:	461f      	mov	r7, r3
 8009106:	2209      	movs	r2, #9
 8009108:	3308      	adds	r3, #8
 800910a:	4606      	mov	r6, r0
 800910c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009110:	2100      	movs	r1, #0
 8009112:	2201      	movs	r2, #1
 8009114:	429a      	cmp	r2, r3
 8009116:	db09      	blt.n	800912c <__s2b+0x30>
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff ff43 	bl	8008fa4 <_Balloc>
 800911e:	b940      	cbnz	r0, 8009132 <__s2b+0x36>
 8009120:	4602      	mov	r2, r0
 8009122:	4b19      	ldr	r3, [pc, #100]	; (8009188 <__s2b+0x8c>)
 8009124:	4819      	ldr	r0, [pc, #100]	; (800918c <__s2b+0x90>)
 8009126:	21ce      	movs	r1, #206	; 0xce
 8009128:	f000 fff2 	bl	800a110 <__assert_func>
 800912c:	0052      	lsls	r2, r2, #1
 800912e:	3101      	adds	r1, #1
 8009130:	e7f0      	b.n	8009114 <__s2b+0x18>
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	6143      	str	r3, [r0, #20]
 8009136:	2d09      	cmp	r5, #9
 8009138:	f04f 0301 	mov.w	r3, #1
 800913c:	6103      	str	r3, [r0, #16]
 800913e:	dd16      	ble.n	800916e <__s2b+0x72>
 8009140:	f104 0909 	add.w	r9, r4, #9
 8009144:	46c8      	mov	r8, r9
 8009146:	442c      	add	r4, r5
 8009148:	f818 3b01 	ldrb.w	r3, [r8], #1
 800914c:	4601      	mov	r1, r0
 800914e:	3b30      	subs	r3, #48	; 0x30
 8009150:	220a      	movs	r2, #10
 8009152:	4630      	mov	r0, r6
 8009154:	f7ff ff88 	bl	8009068 <__multadd>
 8009158:	45a0      	cmp	r8, r4
 800915a:	d1f5      	bne.n	8009148 <__s2b+0x4c>
 800915c:	f1a5 0408 	sub.w	r4, r5, #8
 8009160:	444c      	add	r4, r9
 8009162:	1b2d      	subs	r5, r5, r4
 8009164:	1963      	adds	r3, r4, r5
 8009166:	42bb      	cmp	r3, r7
 8009168:	db04      	blt.n	8009174 <__s2b+0x78>
 800916a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800916e:	340a      	adds	r4, #10
 8009170:	2509      	movs	r5, #9
 8009172:	e7f6      	b.n	8009162 <__s2b+0x66>
 8009174:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009178:	4601      	mov	r1, r0
 800917a:	3b30      	subs	r3, #48	; 0x30
 800917c:	220a      	movs	r2, #10
 800917e:	4630      	mov	r0, r6
 8009180:	f7ff ff72 	bl	8009068 <__multadd>
 8009184:	e7ee      	b.n	8009164 <__s2b+0x68>
 8009186:	bf00      	nop
 8009188:	0800a60c 	.word	0x0800a60c
 800918c:	0800a700 	.word	0x0800a700

08009190 <__hi0bits>:
 8009190:	0c03      	lsrs	r3, r0, #16
 8009192:	041b      	lsls	r3, r3, #16
 8009194:	b9d3      	cbnz	r3, 80091cc <__hi0bits+0x3c>
 8009196:	0400      	lsls	r0, r0, #16
 8009198:	2310      	movs	r3, #16
 800919a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800919e:	bf04      	itt	eq
 80091a0:	0200      	lsleq	r0, r0, #8
 80091a2:	3308      	addeq	r3, #8
 80091a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091a8:	bf04      	itt	eq
 80091aa:	0100      	lsleq	r0, r0, #4
 80091ac:	3304      	addeq	r3, #4
 80091ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091b2:	bf04      	itt	eq
 80091b4:	0080      	lsleq	r0, r0, #2
 80091b6:	3302      	addeq	r3, #2
 80091b8:	2800      	cmp	r0, #0
 80091ba:	db05      	blt.n	80091c8 <__hi0bits+0x38>
 80091bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091c0:	f103 0301 	add.w	r3, r3, #1
 80091c4:	bf08      	it	eq
 80091c6:	2320      	moveq	r3, #32
 80091c8:	4618      	mov	r0, r3
 80091ca:	4770      	bx	lr
 80091cc:	2300      	movs	r3, #0
 80091ce:	e7e4      	b.n	800919a <__hi0bits+0xa>

080091d0 <__lo0bits>:
 80091d0:	6803      	ldr	r3, [r0, #0]
 80091d2:	f013 0207 	ands.w	r2, r3, #7
 80091d6:	4601      	mov	r1, r0
 80091d8:	d00b      	beq.n	80091f2 <__lo0bits+0x22>
 80091da:	07da      	lsls	r2, r3, #31
 80091dc:	d424      	bmi.n	8009228 <__lo0bits+0x58>
 80091de:	0798      	lsls	r0, r3, #30
 80091e0:	bf49      	itett	mi
 80091e2:	085b      	lsrmi	r3, r3, #1
 80091e4:	089b      	lsrpl	r3, r3, #2
 80091e6:	2001      	movmi	r0, #1
 80091e8:	600b      	strmi	r3, [r1, #0]
 80091ea:	bf5c      	itt	pl
 80091ec:	600b      	strpl	r3, [r1, #0]
 80091ee:	2002      	movpl	r0, #2
 80091f0:	4770      	bx	lr
 80091f2:	b298      	uxth	r0, r3
 80091f4:	b9b0      	cbnz	r0, 8009224 <__lo0bits+0x54>
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	2010      	movs	r0, #16
 80091fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091fe:	bf04      	itt	eq
 8009200:	0a1b      	lsreq	r3, r3, #8
 8009202:	3008      	addeq	r0, #8
 8009204:	071a      	lsls	r2, r3, #28
 8009206:	bf04      	itt	eq
 8009208:	091b      	lsreq	r3, r3, #4
 800920a:	3004      	addeq	r0, #4
 800920c:	079a      	lsls	r2, r3, #30
 800920e:	bf04      	itt	eq
 8009210:	089b      	lsreq	r3, r3, #2
 8009212:	3002      	addeq	r0, #2
 8009214:	07da      	lsls	r2, r3, #31
 8009216:	d403      	bmi.n	8009220 <__lo0bits+0x50>
 8009218:	085b      	lsrs	r3, r3, #1
 800921a:	f100 0001 	add.w	r0, r0, #1
 800921e:	d005      	beq.n	800922c <__lo0bits+0x5c>
 8009220:	600b      	str	r3, [r1, #0]
 8009222:	4770      	bx	lr
 8009224:	4610      	mov	r0, r2
 8009226:	e7e8      	b.n	80091fa <__lo0bits+0x2a>
 8009228:	2000      	movs	r0, #0
 800922a:	4770      	bx	lr
 800922c:	2020      	movs	r0, #32
 800922e:	4770      	bx	lr

08009230 <__i2b>:
 8009230:	b510      	push	{r4, lr}
 8009232:	460c      	mov	r4, r1
 8009234:	2101      	movs	r1, #1
 8009236:	f7ff feb5 	bl	8008fa4 <_Balloc>
 800923a:	4602      	mov	r2, r0
 800923c:	b928      	cbnz	r0, 800924a <__i2b+0x1a>
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <__i2b+0x24>)
 8009240:	4805      	ldr	r0, [pc, #20]	; (8009258 <__i2b+0x28>)
 8009242:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009246:	f000 ff63 	bl	800a110 <__assert_func>
 800924a:	2301      	movs	r3, #1
 800924c:	6144      	str	r4, [r0, #20]
 800924e:	6103      	str	r3, [r0, #16]
 8009250:	bd10      	pop	{r4, pc}
 8009252:	bf00      	nop
 8009254:	0800a60c 	.word	0x0800a60c
 8009258:	0800a700 	.word	0x0800a700

0800925c <__multiply>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	4614      	mov	r4, r2
 8009262:	690a      	ldr	r2, [r1, #16]
 8009264:	6923      	ldr	r3, [r4, #16]
 8009266:	429a      	cmp	r2, r3
 8009268:	bfb8      	it	lt
 800926a:	460b      	movlt	r3, r1
 800926c:	460d      	mov	r5, r1
 800926e:	bfbc      	itt	lt
 8009270:	4625      	movlt	r5, r4
 8009272:	461c      	movlt	r4, r3
 8009274:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009278:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800927c:	68ab      	ldr	r3, [r5, #8]
 800927e:	6869      	ldr	r1, [r5, #4]
 8009280:	eb0a 0709 	add.w	r7, sl, r9
 8009284:	42bb      	cmp	r3, r7
 8009286:	b085      	sub	sp, #20
 8009288:	bfb8      	it	lt
 800928a:	3101      	addlt	r1, #1
 800928c:	f7ff fe8a 	bl	8008fa4 <_Balloc>
 8009290:	b930      	cbnz	r0, 80092a0 <__multiply+0x44>
 8009292:	4602      	mov	r2, r0
 8009294:	4b42      	ldr	r3, [pc, #264]	; (80093a0 <__multiply+0x144>)
 8009296:	4843      	ldr	r0, [pc, #268]	; (80093a4 <__multiply+0x148>)
 8009298:	f240 115d 	movw	r1, #349	; 0x15d
 800929c:	f000 ff38 	bl	800a110 <__assert_func>
 80092a0:	f100 0614 	add.w	r6, r0, #20
 80092a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80092a8:	4633      	mov	r3, r6
 80092aa:	2200      	movs	r2, #0
 80092ac:	4543      	cmp	r3, r8
 80092ae:	d31e      	bcc.n	80092ee <__multiply+0x92>
 80092b0:	f105 0c14 	add.w	ip, r5, #20
 80092b4:	f104 0314 	add.w	r3, r4, #20
 80092b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80092bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80092c0:	9202      	str	r2, [sp, #8]
 80092c2:	ebac 0205 	sub.w	r2, ip, r5
 80092c6:	3a15      	subs	r2, #21
 80092c8:	f022 0203 	bic.w	r2, r2, #3
 80092cc:	3204      	adds	r2, #4
 80092ce:	f105 0115 	add.w	r1, r5, #21
 80092d2:	458c      	cmp	ip, r1
 80092d4:	bf38      	it	cc
 80092d6:	2204      	movcc	r2, #4
 80092d8:	9201      	str	r2, [sp, #4]
 80092da:	9a02      	ldr	r2, [sp, #8]
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d808      	bhi.n	80092f4 <__multiply+0x98>
 80092e2:	2f00      	cmp	r7, #0
 80092e4:	dc55      	bgt.n	8009392 <__multiply+0x136>
 80092e6:	6107      	str	r7, [r0, #16]
 80092e8:	b005      	add	sp, #20
 80092ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ee:	f843 2b04 	str.w	r2, [r3], #4
 80092f2:	e7db      	b.n	80092ac <__multiply+0x50>
 80092f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80092f8:	f1ba 0f00 	cmp.w	sl, #0
 80092fc:	d020      	beq.n	8009340 <__multiply+0xe4>
 80092fe:	f105 0e14 	add.w	lr, r5, #20
 8009302:	46b1      	mov	r9, r6
 8009304:	2200      	movs	r2, #0
 8009306:	f85e 4b04 	ldr.w	r4, [lr], #4
 800930a:	f8d9 b000 	ldr.w	fp, [r9]
 800930e:	b2a1      	uxth	r1, r4
 8009310:	fa1f fb8b 	uxth.w	fp, fp
 8009314:	fb0a b101 	mla	r1, sl, r1, fp
 8009318:	4411      	add	r1, r2
 800931a:	f8d9 2000 	ldr.w	r2, [r9]
 800931e:	0c24      	lsrs	r4, r4, #16
 8009320:	0c12      	lsrs	r2, r2, #16
 8009322:	fb0a 2404 	mla	r4, sl, r4, r2
 8009326:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800932a:	b289      	uxth	r1, r1
 800932c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009330:	45f4      	cmp	ip, lr
 8009332:	f849 1b04 	str.w	r1, [r9], #4
 8009336:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800933a:	d8e4      	bhi.n	8009306 <__multiply+0xaa>
 800933c:	9901      	ldr	r1, [sp, #4]
 800933e:	5072      	str	r2, [r6, r1]
 8009340:	9a03      	ldr	r2, [sp, #12]
 8009342:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009346:	3304      	adds	r3, #4
 8009348:	f1b9 0f00 	cmp.w	r9, #0
 800934c:	d01f      	beq.n	800938e <__multiply+0x132>
 800934e:	6834      	ldr	r4, [r6, #0]
 8009350:	f105 0114 	add.w	r1, r5, #20
 8009354:	46b6      	mov	lr, r6
 8009356:	f04f 0a00 	mov.w	sl, #0
 800935a:	880a      	ldrh	r2, [r1, #0]
 800935c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009360:	fb09 b202 	mla	r2, r9, r2, fp
 8009364:	4492      	add	sl, r2
 8009366:	b2a4      	uxth	r4, r4
 8009368:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800936c:	f84e 4b04 	str.w	r4, [lr], #4
 8009370:	f851 4b04 	ldr.w	r4, [r1], #4
 8009374:	f8be 2000 	ldrh.w	r2, [lr]
 8009378:	0c24      	lsrs	r4, r4, #16
 800937a:	fb09 2404 	mla	r4, r9, r4, r2
 800937e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009382:	458c      	cmp	ip, r1
 8009384:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009388:	d8e7      	bhi.n	800935a <__multiply+0xfe>
 800938a:	9a01      	ldr	r2, [sp, #4]
 800938c:	50b4      	str	r4, [r6, r2]
 800938e:	3604      	adds	r6, #4
 8009390:	e7a3      	b.n	80092da <__multiply+0x7e>
 8009392:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1a5      	bne.n	80092e6 <__multiply+0x8a>
 800939a:	3f01      	subs	r7, #1
 800939c:	e7a1      	b.n	80092e2 <__multiply+0x86>
 800939e:	bf00      	nop
 80093a0:	0800a60c 	.word	0x0800a60c
 80093a4:	0800a700 	.word	0x0800a700

080093a8 <__pow5mult>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	4615      	mov	r5, r2
 80093ae:	f012 0203 	ands.w	r2, r2, #3
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	d007      	beq.n	80093c8 <__pow5mult+0x20>
 80093b8:	4c25      	ldr	r4, [pc, #148]	; (8009450 <__pow5mult+0xa8>)
 80093ba:	3a01      	subs	r2, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c2:	f7ff fe51 	bl	8009068 <__multadd>
 80093c6:	4607      	mov	r7, r0
 80093c8:	10ad      	asrs	r5, r5, #2
 80093ca:	d03d      	beq.n	8009448 <__pow5mult+0xa0>
 80093cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ce:	b97c      	cbnz	r4, 80093f0 <__pow5mult+0x48>
 80093d0:	2010      	movs	r0, #16
 80093d2:	f7ff fdbf 	bl	8008f54 <malloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	6270      	str	r0, [r6, #36]	; 0x24
 80093da:	b928      	cbnz	r0, 80093e8 <__pow5mult+0x40>
 80093dc:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <__pow5mult+0xac>)
 80093de:	481e      	ldr	r0, [pc, #120]	; (8009458 <__pow5mult+0xb0>)
 80093e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093e4:	f000 fe94 	bl	800a110 <__assert_func>
 80093e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ec:	6004      	str	r4, [r0, #0]
 80093ee:	60c4      	str	r4, [r0, #12]
 80093f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f8:	b94c      	cbnz	r4, 800940e <__pow5mult+0x66>
 80093fa:	f240 2171 	movw	r1, #625	; 0x271
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ff16 	bl	8009230 <__i2b>
 8009404:	2300      	movs	r3, #0
 8009406:	f8c8 0008 	str.w	r0, [r8, #8]
 800940a:	4604      	mov	r4, r0
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	f04f 0900 	mov.w	r9, #0
 8009412:	07eb      	lsls	r3, r5, #31
 8009414:	d50a      	bpl.n	800942c <__pow5mult+0x84>
 8009416:	4639      	mov	r1, r7
 8009418:	4622      	mov	r2, r4
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ff1e 	bl	800925c <__multiply>
 8009420:	4639      	mov	r1, r7
 8009422:	4680      	mov	r8, r0
 8009424:	4630      	mov	r0, r6
 8009426:	f7ff fdfd 	bl	8009024 <_Bfree>
 800942a:	4647      	mov	r7, r8
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	d00b      	beq.n	8009448 <__pow5mult+0xa0>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	b938      	cbnz	r0, 8009444 <__pow5mult+0x9c>
 8009434:	4622      	mov	r2, r4
 8009436:	4621      	mov	r1, r4
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff ff0f 	bl	800925c <__multiply>
 800943e:	6020      	str	r0, [r4, #0]
 8009440:	f8c0 9000 	str.w	r9, [r0]
 8009444:	4604      	mov	r4, r0
 8009446:	e7e4      	b.n	8009412 <__pow5mult+0x6a>
 8009448:	4638      	mov	r0, r7
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	bf00      	nop
 8009450:	0800a850 	.word	0x0800a850
 8009454:	0800a596 	.word	0x0800a596
 8009458:	0800a700 	.word	0x0800a700

0800945c <__lshift>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	6849      	ldr	r1, [r1, #4]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	4607      	mov	r7, r0
 800946e:	4691      	mov	r9, r2
 8009470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009474:	f108 0601 	add.w	r6, r8, #1
 8009478:	42b3      	cmp	r3, r6
 800947a:	db0b      	blt.n	8009494 <__lshift+0x38>
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fd91 	bl	8008fa4 <_Balloc>
 8009482:	4605      	mov	r5, r0
 8009484:	b948      	cbnz	r0, 800949a <__lshift+0x3e>
 8009486:	4602      	mov	r2, r0
 8009488:	4b28      	ldr	r3, [pc, #160]	; (800952c <__lshift+0xd0>)
 800948a:	4829      	ldr	r0, [pc, #164]	; (8009530 <__lshift+0xd4>)
 800948c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009490:	f000 fe3e 	bl	800a110 <__assert_func>
 8009494:	3101      	adds	r1, #1
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	e7ee      	b.n	8009478 <__lshift+0x1c>
 800949a:	2300      	movs	r3, #0
 800949c:	f100 0114 	add.w	r1, r0, #20
 80094a0:	f100 0210 	add.w	r2, r0, #16
 80094a4:	4618      	mov	r0, r3
 80094a6:	4553      	cmp	r3, sl
 80094a8:	db33      	blt.n	8009512 <__lshift+0xb6>
 80094aa:	6920      	ldr	r0, [r4, #16]
 80094ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b0:	f104 0314 	add.w	r3, r4, #20
 80094b4:	f019 091f 	ands.w	r9, r9, #31
 80094b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094c0:	d02b      	beq.n	800951a <__lshift+0xbe>
 80094c2:	f1c9 0e20 	rsb	lr, r9, #32
 80094c6:	468a      	mov	sl, r1
 80094c8:	2200      	movs	r2, #0
 80094ca:	6818      	ldr	r0, [r3, #0]
 80094cc:	fa00 f009 	lsl.w	r0, r0, r9
 80094d0:	4302      	orrs	r2, r0
 80094d2:	f84a 2b04 	str.w	r2, [sl], #4
 80094d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80094da:	459c      	cmp	ip, r3
 80094dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80094e0:	d8f3      	bhi.n	80094ca <__lshift+0x6e>
 80094e2:	ebac 0304 	sub.w	r3, ip, r4
 80094e6:	3b15      	subs	r3, #21
 80094e8:	f023 0303 	bic.w	r3, r3, #3
 80094ec:	3304      	adds	r3, #4
 80094ee:	f104 0015 	add.w	r0, r4, #21
 80094f2:	4584      	cmp	ip, r0
 80094f4:	bf38      	it	cc
 80094f6:	2304      	movcc	r3, #4
 80094f8:	50ca      	str	r2, [r1, r3]
 80094fa:	b10a      	cbz	r2, 8009500 <__lshift+0xa4>
 80094fc:	f108 0602 	add.w	r6, r8, #2
 8009500:	3e01      	subs	r6, #1
 8009502:	4638      	mov	r0, r7
 8009504:	612e      	str	r6, [r5, #16]
 8009506:	4621      	mov	r1, r4
 8009508:	f7ff fd8c 	bl	8009024 <_Bfree>
 800950c:	4628      	mov	r0, r5
 800950e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009512:	f842 0f04 	str.w	r0, [r2, #4]!
 8009516:	3301      	adds	r3, #1
 8009518:	e7c5      	b.n	80094a6 <__lshift+0x4a>
 800951a:	3904      	subs	r1, #4
 800951c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009520:	f841 2f04 	str.w	r2, [r1, #4]!
 8009524:	459c      	cmp	ip, r3
 8009526:	d8f9      	bhi.n	800951c <__lshift+0xc0>
 8009528:	e7ea      	b.n	8009500 <__lshift+0xa4>
 800952a:	bf00      	nop
 800952c:	0800a60c 	.word	0x0800a60c
 8009530:	0800a700 	.word	0x0800a700

08009534 <__mcmp>:
 8009534:	b530      	push	{r4, r5, lr}
 8009536:	6902      	ldr	r2, [r0, #16]
 8009538:	690c      	ldr	r4, [r1, #16]
 800953a:	1b12      	subs	r2, r2, r4
 800953c:	d10e      	bne.n	800955c <__mcmp+0x28>
 800953e:	f100 0314 	add.w	r3, r0, #20
 8009542:	3114      	adds	r1, #20
 8009544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800954c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009554:	42a5      	cmp	r5, r4
 8009556:	d003      	beq.n	8009560 <__mcmp+0x2c>
 8009558:	d305      	bcc.n	8009566 <__mcmp+0x32>
 800955a:	2201      	movs	r2, #1
 800955c:	4610      	mov	r0, r2
 800955e:	bd30      	pop	{r4, r5, pc}
 8009560:	4283      	cmp	r3, r0
 8009562:	d3f3      	bcc.n	800954c <__mcmp+0x18>
 8009564:	e7fa      	b.n	800955c <__mcmp+0x28>
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	e7f7      	b.n	800955c <__mcmp+0x28>

0800956c <__mdiff>:
 800956c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	460c      	mov	r4, r1
 8009572:	4606      	mov	r6, r0
 8009574:	4611      	mov	r1, r2
 8009576:	4620      	mov	r0, r4
 8009578:	4617      	mov	r7, r2
 800957a:	f7ff ffdb 	bl	8009534 <__mcmp>
 800957e:	1e05      	subs	r5, r0, #0
 8009580:	d110      	bne.n	80095a4 <__mdiff+0x38>
 8009582:	4629      	mov	r1, r5
 8009584:	4630      	mov	r0, r6
 8009586:	f7ff fd0d 	bl	8008fa4 <_Balloc>
 800958a:	b930      	cbnz	r0, 800959a <__mdiff+0x2e>
 800958c:	4b39      	ldr	r3, [pc, #228]	; (8009674 <__mdiff+0x108>)
 800958e:	4602      	mov	r2, r0
 8009590:	f240 2132 	movw	r1, #562	; 0x232
 8009594:	4838      	ldr	r0, [pc, #224]	; (8009678 <__mdiff+0x10c>)
 8009596:	f000 fdbb 	bl	800a110 <__assert_func>
 800959a:	2301      	movs	r3, #1
 800959c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a4:	bfa4      	itt	ge
 80095a6:	463b      	movge	r3, r7
 80095a8:	4627      	movge	r7, r4
 80095aa:	4630      	mov	r0, r6
 80095ac:	6879      	ldr	r1, [r7, #4]
 80095ae:	bfa6      	itte	ge
 80095b0:	461c      	movge	r4, r3
 80095b2:	2500      	movge	r5, #0
 80095b4:	2501      	movlt	r5, #1
 80095b6:	f7ff fcf5 	bl	8008fa4 <_Balloc>
 80095ba:	b920      	cbnz	r0, 80095c6 <__mdiff+0x5a>
 80095bc:	4b2d      	ldr	r3, [pc, #180]	; (8009674 <__mdiff+0x108>)
 80095be:	4602      	mov	r2, r0
 80095c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095c4:	e7e6      	b.n	8009594 <__mdiff+0x28>
 80095c6:	693e      	ldr	r6, [r7, #16]
 80095c8:	60c5      	str	r5, [r0, #12]
 80095ca:	6925      	ldr	r5, [r4, #16]
 80095cc:	f107 0114 	add.w	r1, r7, #20
 80095d0:	f104 0914 	add.w	r9, r4, #20
 80095d4:	f100 0e14 	add.w	lr, r0, #20
 80095d8:	f107 0210 	add.w	r2, r7, #16
 80095dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80095e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80095e4:	46f2      	mov	sl, lr
 80095e6:	2700      	movs	r7, #0
 80095e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80095ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095f0:	fa1f f883 	uxth.w	r8, r3
 80095f4:	fa17 f78b 	uxtah	r7, r7, fp
 80095f8:	0c1b      	lsrs	r3, r3, #16
 80095fa:	eba7 0808 	sub.w	r8, r7, r8
 80095fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009602:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009606:	fa1f f888 	uxth.w	r8, r8
 800960a:	141f      	asrs	r7, r3, #16
 800960c:	454d      	cmp	r5, r9
 800960e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009612:	f84a 3b04 	str.w	r3, [sl], #4
 8009616:	d8e7      	bhi.n	80095e8 <__mdiff+0x7c>
 8009618:	1b2b      	subs	r3, r5, r4
 800961a:	3b15      	subs	r3, #21
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3304      	adds	r3, #4
 8009622:	3415      	adds	r4, #21
 8009624:	42a5      	cmp	r5, r4
 8009626:	bf38      	it	cc
 8009628:	2304      	movcc	r3, #4
 800962a:	4419      	add	r1, r3
 800962c:	4473      	add	r3, lr
 800962e:	469e      	mov	lr, r3
 8009630:	460d      	mov	r5, r1
 8009632:	4565      	cmp	r5, ip
 8009634:	d30e      	bcc.n	8009654 <__mdiff+0xe8>
 8009636:	f10c 0203 	add.w	r2, ip, #3
 800963a:	1a52      	subs	r2, r2, r1
 800963c:	f022 0203 	bic.w	r2, r2, #3
 8009640:	3903      	subs	r1, #3
 8009642:	458c      	cmp	ip, r1
 8009644:	bf38      	it	cc
 8009646:	2200      	movcc	r2, #0
 8009648:	441a      	add	r2, r3
 800964a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800964e:	b17b      	cbz	r3, 8009670 <__mdiff+0x104>
 8009650:	6106      	str	r6, [r0, #16]
 8009652:	e7a5      	b.n	80095a0 <__mdiff+0x34>
 8009654:	f855 8b04 	ldr.w	r8, [r5], #4
 8009658:	fa17 f488 	uxtah	r4, r7, r8
 800965c:	1422      	asrs	r2, r4, #16
 800965e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009662:	b2a4      	uxth	r4, r4
 8009664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009668:	f84e 4b04 	str.w	r4, [lr], #4
 800966c:	1417      	asrs	r7, r2, #16
 800966e:	e7e0      	b.n	8009632 <__mdiff+0xc6>
 8009670:	3e01      	subs	r6, #1
 8009672:	e7ea      	b.n	800964a <__mdiff+0xde>
 8009674:	0800a60c 	.word	0x0800a60c
 8009678:	0800a700 	.word	0x0800a700

0800967c <__ulp>:
 800967c:	b082      	sub	sp, #8
 800967e:	ed8d 0b00 	vstr	d0, [sp]
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	4912      	ldr	r1, [pc, #72]	; (80096d0 <__ulp+0x54>)
 8009686:	4019      	ands	r1, r3
 8009688:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800968c:	2900      	cmp	r1, #0
 800968e:	dd05      	ble.n	800969c <__ulp+0x20>
 8009690:	2200      	movs	r2, #0
 8009692:	460b      	mov	r3, r1
 8009694:	ec43 2b10 	vmov	d0, r2, r3
 8009698:	b002      	add	sp, #8
 800969a:	4770      	bx	lr
 800969c:	4249      	negs	r1, r1
 800969e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096a2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096a6:	f04f 0200 	mov.w	r2, #0
 80096aa:	f04f 0300 	mov.w	r3, #0
 80096ae:	da04      	bge.n	80096ba <__ulp+0x3e>
 80096b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096b4:	fa41 f300 	asr.w	r3, r1, r0
 80096b8:	e7ec      	b.n	8009694 <__ulp+0x18>
 80096ba:	f1a0 0114 	sub.w	r1, r0, #20
 80096be:	291e      	cmp	r1, #30
 80096c0:	bfda      	itte	le
 80096c2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096c6:	fa20 f101 	lsrle.w	r1, r0, r1
 80096ca:	2101      	movgt	r1, #1
 80096cc:	460a      	mov	r2, r1
 80096ce:	e7e1      	b.n	8009694 <__ulp+0x18>
 80096d0:	7ff00000 	.word	0x7ff00000

080096d4 <__b2d>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	6905      	ldr	r5, [r0, #16]
 80096d8:	f100 0714 	add.w	r7, r0, #20
 80096dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80096e0:	1f2e      	subs	r6, r5, #4
 80096e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f7ff fd52 	bl	8009190 <__hi0bits>
 80096ec:	f1c0 0320 	rsb	r3, r0, #32
 80096f0:	280a      	cmp	r0, #10
 80096f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009770 <__b2d+0x9c>
 80096f6:	600b      	str	r3, [r1, #0]
 80096f8:	dc14      	bgt.n	8009724 <__b2d+0x50>
 80096fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80096fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8009702:	42b7      	cmp	r7, r6
 8009704:	ea41 030c 	orr.w	r3, r1, ip
 8009708:	bf34      	ite	cc
 800970a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800970e:	2100      	movcs	r1, #0
 8009710:	3015      	adds	r0, #21
 8009712:	fa04 f000 	lsl.w	r0, r4, r0
 8009716:	fa21 f10e 	lsr.w	r1, r1, lr
 800971a:	ea40 0201 	orr.w	r2, r0, r1
 800971e:	ec43 2b10 	vmov	d0, r2, r3
 8009722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009724:	42b7      	cmp	r7, r6
 8009726:	bf3a      	itte	cc
 8009728:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800972c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009730:	2100      	movcs	r1, #0
 8009732:	380b      	subs	r0, #11
 8009734:	d017      	beq.n	8009766 <__b2d+0x92>
 8009736:	f1c0 0c20 	rsb	ip, r0, #32
 800973a:	fa04 f500 	lsl.w	r5, r4, r0
 800973e:	42be      	cmp	r6, r7
 8009740:	fa21 f40c 	lsr.w	r4, r1, ip
 8009744:	ea45 0504 	orr.w	r5, r5, r4
 8009748:	bf8c      	ite	hi
 800974a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800974e:	2400      	movls	r4, #0
 8009750:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009754:	fa01 f000 	lsl.w	r0, r1, r0
 8009758:	fa24 f40c 	lsr.w	r4, r4, ip
 800975c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009760:	ea40 0204 	orr.w	r2, r0, r4
 8009764:	e7db      	b.n	800971e <__b2d+0x4a>
 8009766:	ea44 030c 	orr.w	r3, r4, ip
 800976a:	460a      	mov	r2, r1
 800976c:	e7d7      	b.n	800971e <__b2d+0x4a>
 800976e:	bf00      	nop
 8009770:	3ff00000 	.word	0x3ff00000

08009774 <__d2b>:
 8009774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009778:	4689      	mov	r9, r1
 800977a:	2101      	movs	r1, #1
 800977c:	ec57 6b10 	vmov	r6, r7, d0
 8009780:	4690      	mov	r8, r2
 8009782:	f7ff fc0f 	bl	8008fa4 <_Balloc>
 8009786:	4604      	mov	r4, r0
 8009788:	b930      	cbnz	r0, 8009798 <__d2b+0x24>
 800978a:	4602      	mov	r2, r0
 800978c:	4b25      	ldr	r3, [pc, #148]	; (8009824 <__d2b+0xb0>)
 800978e:	4826      	ldr	r0, [pc, #152]	; (8009828 <__d2b+0xb4>)
 8009790:	f240 310a 	movw	r1, #778	; 0x30a
 8009794:	f000 fcbc 	bl	800a110 <__assert_func>
 8009798:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800979c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097a0:	bb35      	cbnz	r5, 80097f0 <__d2b+0x7c>
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	d028      	beq.n	80097fa <__d2b+0x86>
 80097a8:	4668      	mov	r0, sp
 80097aa:	9600      	str	r6, [sp, #0]
 80097ac:	f7ff fd10 	bl	80091d0 <__lo0bits>
 80097b0:	9900      	ldr	r1, [sp, #0]
 80097b2:	b300      	cbz	r0, 80097f6 <__d2b+0x82>
 80097b4:	9a01      	ldr	r2, [sp, #4]
 80097b6:	f1c0 0320 	rsb	r3, r0, #32
 80097ba:	fa02 f303 	lsl.w	r3, r2, r3
 80097be:	430b      	orrs	r3, r1
 80097c0:	40c2      	lsrs	r2, r0
 80097c2:	6163      	str	r3, [r4, #20]
 80097c4:	9201      	str	r2, [sp, #4]
 80097c6:	9b01      	ldr	r3, [sp, #4]
 80097c8:	61a3      	str	r3, [r4, #24]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bf14      	ite	ne
 80097ce:	2202      	movne	r2, #2
 80097d0:	2201      	moveq	r2, #1
 80097d2:	6122      	str	r2, [r4, #16]
 80097d4:	b1d5      	cbz	r5, 800980c <__d2b+0x98>
 80097d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097da:	4405      	add	r5, r0
 80097dc:	f8c9 5000 	str.w	r5, [r9]
 80097e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097e4:	f8c8 0000 	str.w	r0, [r8]
 80097e8:	4620      	mov	r0, r4
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097f4:	e7d5      	b.n	80097a2 <__d2b+0x2e>
 80097f6:	6161      	str	r1, [r4, #20]
 80097f8:	e7e5      	b.n	80097c6 <__d2b+0x52>
 80097fa:	a801      	add	r0, sp, #4
 80097fc:	f7ff fce8 	bl	80091d0 <__lo0bits>
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	6163      	str	r3, [r4, #20]
 8009804:	2201      	movs	r2, #1
 8009806:	6122      	str	r2, [r4, #16]
 8009808:	3020      	adds	r0, #32
 800980a:	e7e3      	b.n	80097d4 <__d2b+0x60>
 800980c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009814:	f8c9 0000 	str.w	r0, [r9]
 8009818:	6918      	ldr	r0, [r3, #16]
 800981a:	f7ff fcb9 	bl	8009190 <__hi0bits>
 800981e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009822:	e7df      	b.n	80097e4 <__d2b+0x70>
 8009824:	0800a60c 	.word	0x0800a60c
 8009828:	0800a700 	.word	0x0800a700

0800982c <__ratio>:
 800982c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009830:	4688      	mov	r8, r1
 8009832:	4669      	mov	r1, sp
 8009834:	4681      	mov	r9, r0
 8009836:	f7ff ff4d 	bl	80096d4 <__b2d>
 800983a:	a901      	add	r1, sp, #4
 800983c:	4640      	mov	r0, r8
 800983e:	ec55 4b10 	vmov	r4, r5, d0
 8009842:	f7ff ff47 	bl	80096d4 <__b2d>
 8009846:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800984a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800984e:	eba3 0c02 	sub.w	ip, r3, r2
 8009852:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009856:	1a9b      	subs	r3, r3, r2
 8009858:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800985c:	ec51 0b10 	vmov	r0, r1, d0
 8009860:	2b00      	cmp	r3, #0
 8009862:	bfd6      	itet	le
 8009864:	460a      	movle	r2, r1
 8009866:	462a      	movgt	r2, r5
 8009868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800986c:	468b      	mov	fp, r1
 800986e:	462f      	mov	r7, r5
 8009870:	bfd4      	ite	le
 8009872:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009876:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800987a:	4620      	mov	r0, r4
 800987c:	ee10 2a10 	vmov	r2, s0
 8009880:	465b      	mov	r3, fp
 8009882:	4639      	mov	r1, r7
 8009884:	f7f6 ffe2 	bl	800084c <__aeabi_ddiv>
 8009888:	ec41 0b10 	vmov	d0, r0, r1
 800988c:	b003      	add	sp, #12
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009892 <__copybits>:
 8009892:	3901      	subs	r1, #1
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	1149      	asrs	r1, r1, #5
 8009898:	6914      	ldr	r4, [r2, #16]
 800989a:	3101      	adds	r1, #1
 800989c:	f102 0314 	add.w	r3, r2, #20
 80098a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098a8:	1f05      	subs	r5, r0, #4
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d30c      	bcc.n	80098c8 <__copybits+0x36>
 80098ae:	1aa3      	subs	r3, r4, r2
 80098b0:	3b11      	subs	r3, #17
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	3211      	adds	r2, #17
 80098b8:	42a2      	cmp	r2, r4
 80098ba:	bf88      	it	hi
 80098bc:	2300      	movhi	r3, #0
 80098be:	4418      	add	r0, r3
 80098c0:	2300      	movs	r3, #0
 80098c2:	4288      	cmp	r0, r1
 80098c4:	d305      	bcc.n	80098d2 <__copybits+0x40>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80098cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80098d0:	e7eb      	b.n	80098aa <__copybits+0x18>
 80098d2:	f840 3b04 	str.w	r3, [r0], #4
 80098d6:	e7f4      	b.n	80098c2 <__copybits+0x30>

080098d8 <__any_on>:
 80098d8:	f100 0214 	add.w	r2, r0, #20
 80098dc:	6900      	ldr	r0, [r0, #16]
 80098de:	114b      	asrs	r3, r1, #5
 80098e0:	4298      	cmp	r0, r3
 80098e2:	b510      	push	{r4, lr}
 80098e4:	db11      	blt.n	800990a <__any_on+0x32>
 80098e6:	dd0a      	ble.n	80098fe <__any_on+0x26>
 80098e8:	f011 011f 	ands.w	r1, r1, #31
 80098ec:	d007      	beq.n	80098fe <__any_on+0x26>
 80098ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80098f2:	fa24 f001 	lsr.w	r0, r4, r1
 80098f6:	fa00 f101 	lsl.w	r1, r0, r1
 80098fa:	428c      	cmp	r4, r1
 80098fc:	d10b      	bne.n	8009916 <__any_on+0x3e>
 80098fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009902:	4293      	cmp	r3, r2
 8009904:	d803      	bhi.n	800990e <__any_on+0x36>
 8009906:	2000      	movs	r0, #0
 8009908:	bd10      	pop	{r4, pc}
 800990a:	4603      	mov	r3, r0
 800990c:	e7f7      	b.n	80098fe <__any_on+0x26>
 800990e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009912:	2900      	cmp	r1, #0
 8009914:	d0f5      	beq.n	8009902 <__any_on+0x2a>
 8009916:	2001      	movs	r0, #1
 8009918:	e7f6      	b.n	8009908 <__any_on+0x30>

0800991a <_calloc_r>:
 800991a:	b513      	push	{r0, r1, r4, lr}
 800991c:	434a      	muls	r2, r1
 800991e:	4611      	mov	r1, r2
 8009920:	9201      	str	r2, [sp, #4]
 8009922:	f000 f859 	bl	80099d8 <_malloc_r>
 8009926:	4604      	mov	r4, r0
 8009928:	b118      	cbz	r0, 8009932 <_calloc_r+0x18>
 800992a:	9a01      	ldr	r2, [sp, #4]
 800992c:	2100      	movs	r1, #0
 800992e:	f7fc f85d 	bl	80059ec <memset>
 8009932:	4620      	mov	r0, r4
 8009934:	b002      	add	sp, #8
 8009936:	bd10      	pop	{r4, pc}

08009938 <_free_r>:
 8009938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800993a:	2900      	cmp	r1, #0
 800993c:	d048      	beq.n	80099d0 <_free_r+0x98>
 800993e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009942:	9001      	str	r0, [sp, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f1a1 0404 	sub.w	r4, r1, #4
 800994a:	bfb8      	it	lt
 800994c:	18e4      	addlt	r4, r4, r3
 800994e:	f000 fc6d 	bl	800a22c <__malloc_lock>
 8009952:	4a20      	ldr	r2, [pc, #128]	; (80099d4 <_free_r+0x9c>)
 8009954:	9801      	ldr	r0, [sp, #4]
 8009956:	6813      	ldr	r3, [r2, #0]
 8009958:	4615      	mov	r5, r2
 800995a:	b933      	cbnz	r3, 800996a <_free_r+0x32>
 800995c:	6063      	str	r3, [r4, #4]
 800995e:	6014      	str	r4, [r2, #0]
 8009960:	b003      	add	sp, #12
 8009962:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009966:	f000 bc67 	b.w	800a238 <__malloc_unlock>
 800996a:	42a3      	cmp	r3, r4
 800996c:	d90b      	bls.n	8009986 <_free_r+0x4e>
 800996e:	6821      	ldr	r1, [r4, #0]
 8009970:	1862      	adds	r2, r4, r1
 8009972:	4293      	cmp	r3, r2
 8009974:	bf04      	itt	eq
 8009976:	681a      	ldreq	r2, [r3, #0]
 8009978:	685b      	ldreq	r3, [r3, #4]
 800997a:	6063      	str	r3, [r4, #4]
 800997c:	bf04      	itt	eq
 800997e:	1852      	addeq	r2, r2, r1
 8009980:	6022      	streq	r2, [r4, #0]
 8009982:	602c      	str	r4, [r5, #0]
 8009984:	e7ec      	b.n	8009960 <_free_r+0x28>
 8009986:	461a      	mov	r2, r3
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	b10b      	cbz	r3, 8009990 <_free_r+0x58>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d9fa      	bls.n	8009986 <_free_r+0x4e>
 8009990:	6811      	ldr	r1, [r2, #0]
 8009992:	1855      	adds	r5, r2, r1
 8009994:	42a5      	cmp	r5, r4
 8009996:	d10b      	bne.n	80099b0 <_free_r+0x78>
 8009998:	6824      	ldr	r4, [r4, #0]
 800999a:	4421      	add	r1, r4
 800999c:	1854      	adds	r4, r2, r1
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6011      	str	r1, [r2, #0]
 80099a2:	d1dd      	bne.n	8009960 <_free_r+0x28>
 80099a4:	681c      	ldr	r4, [r3, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	6053      	str	r3, [r2, #4]
 80099aa:	4421      	add	r1, r4
 80099ac:	6011      	str	r1, [r2, #0]
 80099ae:	e7d7      	b.n	8009960 <_free_r+0x28>
 80099b0:	d902      	bls.n	80099b8 <_free_r+0x80>
 80099b2:	230c      	movs	r3, #12
 80099b4:	6003      	str	r3, [r0, #0]
 80099b6:	e7d3      	b.n	8009960 <_free_r+0x28>
 80099b8:	6825      	ldr	r5, [r4, #0]
 80099ba:	1961      	adds	r1, r4, r5
 80099bc:	428b      	cmp	r3, r1
 80099be:	bf04      	itt	eq
 80099c0:	6819      	ldreq	r1, [r3, #0]
 80099c2:	685b      	ldreq	r3, [r3, #4]
 80099c4:	6063      	str	r3, [r4, #4]
 80099c6:	bf04      	itt	eq
 80099c8:	1949      	addeq	r1, r1, r5
 80099ca:	6021      	streq	r1, [r4, #0]
 80099cc:	6054      	str	r4, [r2, #4]
 80099ce:	e7c7      	b.n	8009960 <_free_r+0x28>
 80099d0:	b003      	add	sp, #12
 80099d2:	bd30      	pop	{r4, r5, pc}
 80099d4:	20000228 	.word	0x20000228

080099d8 <_malloc_r>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	1ccd      	adds	r5, r1, #3
 80099dc:	f025 0503 	bic.w	r5, r5, #3
 80099e0:	3508      	adds	r5, #8
 80099e2:	2d0c      	cmp	r5, #12
 80099e4:	bf38      	it	cc
 80099e6:	250c      	movcc	r5, #12
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	4606      	mov	r6, r0
 80099ec:	db01      	blt.n	80099f2 <_malloc_r+0x1a>
 80099ee:	42a9      	cmp	r1, r5
 80099f0:	d903      	bls.n	80099fa <_malloc_r+0x22>
 80099f2:	230c      	movs	r3, #12
 80099f4:	6033      	str	r3, [r6, #0]
 80099f6:	2000      	movs	r0, #0
 80099f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fa:	f000 fc17 	bl	800a22c <__malloc_lock>
 80099fe:	4921      	ldr	r1, [pc, #132]	; (8009a84 <_malloc_r+0xac>)
 8009a00:	680a      	ldr	r2, [r1, #0]
 8009a02:	4614      	mov	r4, r2
 8009a04:	b99c      	cbnz	r4, 8009a2e <_malloc_r+0x56>
 8009a06:	4f20      	ldr	r7, [pc, #128]	; (8009a88 <_malloc_r+0xb0>)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	b923      	cbnz	r3, 8009a16 <_malloc_r+0x3e>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 fafa 	bl	800a008 <_sbrk_r>
 8009a14:	6038      	str	r0, [r7, #0]
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 faf5 	bl	800a008 <_sbrk_r>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	d123      	bne.n	8009a6a <_malloc_r+0x92>
 8009a22:	230c      	movs	r3, #12
 8009a24:	6033      	str	r3, [r6, #0]
 8009a26:	4630      	mov	r0, r6
 8009a28:	f000 fc06 	bl	800a238 <__malloc_unlock>
 8009a2c:	e7e3      	b.n	80099f6 <_malloc_r+0x1e>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	1b5b      	subs	r3, r3, r5
 8009a32:	d417      	bmi.n	8009a64 <_malloc_r+0x8c>
 8009a34:	2b0b      	cmp	r3, #11
 8009a36:	d903      	bls.n	8009a40 <_malloc_r+0x68>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	441c      	add	r4, r3
 8009a3c:	6025      	str	r5, [r4, #0]
 8009a3e:	e004      	b.n	8009a4a <_malloc_r+0x72>
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	42a2      	cmp	r2, r4
 8009a44:	bf0c      	ite	eq
 8009a46:	600b      	streq	r3, [r1, #0]
 8009a48:	6053      	strne	r3, [r2, #4]
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f000 fbf4 	bl	800a238 <__malloc_unlock>
 8009a50:	f104 000b 	add.w	r0, r4, #11
 8009a54:	1d23      	adds	r3, r4, #4
 8009a56:	f020 0007 	bic.w	r0, r0, #7
 8009a5a:	1ac2      	subs	r2, r0, r3
 8009a5c:	d0cc      	beq.n	80099f8 <_malloc_r+0x20>
 8009a5e:	1a1b      	subs	r3, r3, r0
 8009a60:	50a3      	str	r3, [r4, r2]
 8009a62:	e7c9      	b.n	80099f8 <_malloc_r+0x20>
 8009a64:	4622      	mov	r2, r4
 8009a66:	6864      	ldr	r4, [r4, #4]
 8009a68:	e7cc      	b.n	8009a04 <_malloc_r+0x2c>
 8009a6a:	1cc4      	adds	r4, r0, #3
 8009a6c:	f024 0403 	bic.w	r4, r4, #3
 8009a70:	42a0      	cmp	r0, r4
 8009a72:	d0e3      	beq.n	8009a3c <_malloc_r+0x64>
 8009a74:	1a21      	subs	r1, r4, r0
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 fac6 	bl	800a008 <_sbrk_r>
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d1dd      	bne.n	8009a3c <_malloc_r+0x64>
 8009a80:	e7cf      	b.n	8009a22 <_malloc_r+0x4a>
 8009a82:	bf00      	nop
 8009a84:	20000228 	.word	0x20000228
 8009a88:	2000022c 	.word	0x2000022c

08009a8c <__ssputs_r>:
 8009a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a90:	688e      	ldr	r6, [r1, #8]
 8009a92:	429e      	cmp	r6, r3
 8009a94:	4682      	mov	sl, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	4690      	mov	r8, r2
 8009a9a:	461f      	mov	r7, r3
 8009a9c:	d838      	bhi.n	8009b10 <__ssputs_r+0x84>
 8009a9e:	898a      	ldrh	r2, [r1, #12]
 8009aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009aa4:	d032      	beq.n	8009b0c <__ssputs_r+0x80>
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	6909      	ldr	r1, [r1, #16]
 8009aaa:	eba5 0901 	sub.w	r9, r5, r1
 8009aae:	6965      	ldr	r5, [r4, #20]
 8009ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ab8:	3301      	adds	r3, #1
 8009aba:	444b      	add	r3, r9
 8009abc:	106d      	asrs	r5, r5, #1
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	bf38      	it	cc
 8009ac2:	461d      	movcc	r5, r3
 8009ac4:	0553      	lsls	r3, r2, #21
 8009ac6:	d531      	bpl.n	8009b2c <__ssputs_r+0xa0>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7ff ff85 	bl	80099d8 <_malloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	b950      	cbnz	r0, 8009ae8 <__ssputs_r+0x5c>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	f8ca 3000 	str.w	r3, [sl]
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ade:	81a3      	strh	r3, [r4, #12]
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae8:	6921      	ldr	r1, [r4, #16]
 8009aea:	464a      	mov	r2, r9
 8009aec:	f7ff fa4c 	bl	8008f88 <memcpy>
 8009af0:	89a3      	ldrh	r3, [r4, #12]
 8009af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009afa:	81a3      	strh	r3, [r4, #12]
 8009afc:	6126      	str	r6, [r4, #16]
 8009afe:	6165      	str	r5, [r4, #20]
 8009b00:	444e      	add	r6, r9
 8009b02:	eba5 0509 	sub.w	r5, r5, r9
 8009b06:	6026      	str	r6, [r4, #0]
 8009b08:	60a5      	str	r5, [r4, #8]
 8009b0a:	463e      	mov	r6, r7
 8009b0c:	42be      	cmp	r6, r7
 8009b0e:	d900      	bls.n	8009b12 <__ssputs_r+0x86>
 8009b10:	463e      	mov	r6, r7
 8009b12:	4632      	mov	r2, r6
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	4641      	mov	r1, r8
 8009b18:	f000 fb6e 	bl	800a1f8 <memmove>
 8009b1c:	68a3      	ldr	r3, [r4, #8]
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	1b9b      	subs	r3, r3, r6
 8009b22:	4432      	add	r2, r6
 8009b24:	60a3      	str	r3, [r4, #8]
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e7db      	b.n	8009ae4 <__ssputs_r+0x58>
 8009b2c:	462a      	mov	r2, r5
 8009b2e:	f000 fb89 	bl	800a244 <_realloc_r>
 8009b32:	4606      	mov	r6, r0
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d1e1      	bne.n	8009afc <__ssputs_r+0x70>
 8009b38:	6921      	ldr	r1, [r4, #16]
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	f7ff fefc 	bl	8009938 <_free_r>
 8009b40:	e7c7      	b.n	8009ad2 <__ssputs_r+0x46>
	...

08009b44 <_svfiprintf_r>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	4698      	mov	r8, r3
 8009b4a:	898b      	ldrh	r3, [r1, #12]
 8009b4c:	061b      	lsls	r3, r3, #24
 8009b4e:	b09d      	sub	sp, #116	; 0x74
 8009b50:	4607      	mov	r7, r0
 8009b52:	460d      	mov	r5, r1
 8009b54:	4614      	mov	r4, r2
 8009b56:	d50e      	bpl.n	8009b76 <_svfiprintf_r+0x32>
 8009b58:	690b      	ldr	r3, [r1, #16]
 8009b5a:	b963      	cbnz	r3, 8009b76 <_svfiprintf_r+0x32>
 8009b5c:	2140      	movs	r1, #64	; 0x40
 8009b5e:	f7ff ff3b 	bl	80099d8 <_malloc_r>
 8009b62:	6028      	str	r0, [r5, #0]
 8009b64:	6128      	str	r0, [r5, #16]
 8009b66:	b920      	cbnz	r0, 8009b72 <_svfiprintf_r+0x2e>
 8009b68:	230c      	movs	r3, #12
 8009b6a:	603b      	str	r3, [r7, #0]
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e0d1      	b.n	8009d16 <_svfiprintf_r+0x1d2>
 8009b72:	2340      	movs	r3, #64	; 0x40
 8009b74:	616b      	str	r3, [r5, #20]
 8009b76:	2300      	movs	r3, #0
 8009b78:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7a:	2320      	movs	r3, #32
 8009b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b84:	2330      	movs	r3, #48	; 0x30
 8009b86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d30 <_svfiprintf_r+0x1ec>
 8009b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b8e:	f04f 0901 	mov.w	r9, #1
 8009b92:	4623      	mov	r3, r4
 8009b94:	469a      	mov	sl, r3
 8009b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b9a:	b10a      	cbz	r2, 8009ba0 <_svfiprintf_r+0x5c>
 8009b9c:	2a25      	cmp	r2, #37	; 0x25
 8009b9e:	d1f9      	bne.n	8009b94 <_svfiprintf_r+0x50>
 8009ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ba4:	d00b      	beq.n	8009bbe <_svfiprintf_r+0x7a>
 8009ba6:	465b      	mov	r3, fp
 8009ba8:	4622      	mov	r2, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff ff6d 	bl	8009a8c <__ssputs_r>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f000 80aa 	beq.w	8009d0c <_svfiprintf_r+0x1c8>
 8009bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bba:	445a      	add	r2, fp
 8009bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8009bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80a2 	beq.w	8009d0c <_svfiprintf_r+0x1c8>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	f04f 32ff 	mov.w	r2, #4294967295
 8009bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bd2:	f10a 0a01 	add.w	sl, sl, #1
 8009bd6:	9304      	str	r3, [sp, #16]
 8009bd8:	9307      	str	r3, [sp, #28]
 8009bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bde:	931a      	str	r3, [sp, #104]	; 0x68
 8009be0:	4654      	mov	r4, sl
 8009be2:	2205      	movs	r2, #5
 8009be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be8:	4851      	ldr	r0, [pc, #324]	; (8009d30 <_svfiprintf_r+0x1ec>)
 8009bea:	f7f6 faf9 	bl	80001e0 <memchr>
 8009bee:	9a04      	ldr	r2, [sp, #16]
 8009bf0:	b9d8      	cbnz	r0, 8009c2a <_svfiprintf_r+0xe6>
 8009bf2:	06d0      	lsls	r0, r2, #27
 8009bf4:	bf44      	itt	mi
 8009bf6:	2320      	movmi	r3, #32
 8009bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bfc:	0711      	lsls	r1, r2, #28
 8009bfe:	bf44      	itt	mi
 8009c00:	232b      	movmi	r3, #43	; 0x2b
 8009c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c06:	f89a 3000 	ldrb.w	r3, [sl]
 8009c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c0c:	d015      	beq.n	8009c3a <_svfiprintf_r+0xf6>
 8009c0e:	9a07      	ldr	r2, [sp, #28]
 8009c10:	4654      	mov	r4, sl
 8009c12:	2000      	movs	r0, #0
 8009c14:	f04f 0c0a 	mov.w	ip, #10
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c1e:	3b30      	subs	r3, #48	; 0x30
 8009c20:	2b09      	cmp	r3, #9
 8009c22:	d94e      	bls.n	8009cc2 <_svfiprintf_r+0x17e>
 8009c24:	b1b0      	cbz	r0, 8009c54 <_svfiprintf_r+0x110>
 8009c26:	9207      	str	r2, [sp, #28]
 8009c28:	e014      	b.n	8009c54 <_svfiprintf_r+0x110>
 8009c2a:	eba0 0308 	sub.w	r3, r0, r8
 8009c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8009c32:	4313      	orrs	r3, r2
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	46a2      	mov	sl, r4
 8009c38:	e7d2      	b.n	8009be0 <_svfiprintf_r+0x9c>
 8009c3a:	9b03      	ldr	r3, [sp, #12]
 8009c3c:	1d19      	adds	r1, r3, #4
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	9103      	str	r1, [sp, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	bfbb      	ittet	lt
 8009c46:	425b      	neglt	r3, r3
 8009c48:	f042 0202 	orrlt.w	r2, r2, #2
 8009c4c:	9307      	strge	r3, [sp, #28]
 8009c4e:	9307      	strlt	r3, [sp, #28]
 8009c50:	bfb8      	it	lt
 8009c52:	9204      	strlt	r2, [sp, #16]
 8009c54:	7823      	ldrb	r3, [r4, #0]
 8009c56:	2b2e      	cmp	r3, #46	; 0x2e
 8009c58:	d10c      	bne.n	8009c74 <_svfiprintf_r+0x130>
 8009c5a:	7863      	ldrb	r3, [r4, #1]
 8009c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c5e:	d135      	bne.n	8009ccc <_svfiprintf_r+0x188>
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	9203      	str	r2, [sp, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bfb8      	it	lt
 8009c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c70:	3402      	adds	r4, #2
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d40 <_svfiprintf_r+0x1fc>
 8009c78:	7821      	ldrb	r1, [r4, #0]
 8009c7a:	2203      	movs	r2, #3
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	f7f6 faaf 	bl	80001e0 <memchr>
 8009c82:	b140      	cbz	r0, 8009c96 <_svfiprintf_r+0x152>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	eba0 000a 	sub.w	r0, r0, sl
 8009c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8009c8e:	9b04      	ldr	r3, [sp, #16]
 8009c90:	4303      	orrs	r3, r0
 8009c92:	3401      	adds	r4, #1
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9a:	4826      	ldr	r0, [pc, #152]	; (8009d34 <_svfiprintf_r+0x1f0>)
 8009c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ca0:	2206      	movs	r2, #6
 8009ca2:	f7f6 fa9d 	bl	80001e0 <memchr>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d038      	beq.n	8009d1c <_svfiprintf_r+0x1d8>
 8009caa:	4b23      	ldr	r3, [pc, #140]	; (8009d38 <_svfiprintf_r+0x1f4>)
 8009cac:	bb1b      	cbnz	r3, 8009cf6 <_svfiprintf_r+0x1b2>
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	3307      	adds	r3, #7
 8009cb2:	f023 0307 	bic.w	r3, r3, #7
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cbc:	4433      	add	r3, r6
 8009cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc0:	e767      	b.n	8009b92 <_svfiprintf_r+0x4e>
 8009cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	2001      	movs	r0, #1
 8009cca:	e7a5      	b.n	8009c18 <_svfiprintf_r+0xd4>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	3401      	adds	r4, #1
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f04f 0c0a 	mov.w	ip, #10
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cde:	3a30      	subs	r2, #48	; 0x30
 8009ce0:	2a09      	cmp	r2, #9
 8009ce2:	d903      	bls.n	8009cec <_svfiprintf_r+0x1a8>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0c5      	beq.n	8009c74 <_svfiprintf_r+0x130>
 8009ce8:	9105      	str	r1, [sp, #20]
 8009cea:	e7c3      	b.n	8009c74 <_svfiprintf_r+0x130>
 8009cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e7f0      	b.n	8009cd8 <_svfiprintf_r+0x194>
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <_svfiprintf_r+0x1f8>)
 8009cfe:	a904      	add	r1, sp, #16
 8009d00:	4638      	mov	r0, r7
 8009d02:	f7fb ff1b 	bl	8005b3c <_printf_float>
 8009d06:	1c42      	adds	r2, r0, #1
 8009d08:	4606      	mov	r6, r0
 8009d0a:	d1d6      	bne.n	8009cba <_svfiprintf_r+0x176>
 8009d0c:	89ab      	ldrh	r3, [r5, #12]
 8009d0e:	065b      	lsls	r3, r3, #25
 8009d10:	f53f af2c 	bmi.w	8009b6c <_svfiprintf_r+0x28>
 8009d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d16:	b01d      	add	sp, #116	; 0x74
 8009d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1c:	ab03      	add	r3, sp, #12
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	462a      	mov	r2, r5
 8009d22:	4b06      	ldr	r3, [pc, #24]	; (8009d3c <_svfiprintf_r+0x1f8>)
 8009d24:	a904      	add	r1, sp, #16
 8009d26:	4638      	mov	r0, r7
 8009d28:	f7fc f9ac 	bl	8006084 <_printf_i>
 8009d2c:	e7eb      	b.n	8009d06 <_svfiprintf_r+0x1c2>
 8009d2e:	bf00      	nop
 8009d30:	0800a85c 	.word	0x0800a85c
 8009d34:	0800a866 	.word	0x0800a866
 8009d38:	08005b3d 	.word	0x08005b3d
 8009d3c:	08009a8d 	.word	0x08009a8d
 8009d40:	0800a862 	.word	0x0800a862

08009d44 <__sfputc_r>:
 8009d44:	6893      	ldr	r3, [r2, #8]
 8009d46:	3b01      	subs	r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	b410      	push	{r4}
 8009d4c:	6093      	str	r3, [r2, #8]
 8009d4e:	da08      	bge.n	8009d62 <__sfputc_r+0x1e>
 8009d50:	6994      	ldr	r4, [r2, #24]
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	db01      	blt.n	8009d5a <__sfputc_r+0x16>
 8009d56:	290a      	cmp	r1, #10
 8009d58:	d103      	bne.n	8009d62 <__sfputc_r+0x1e>
 8009d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d5e:	f7fd bc2d 	b.w	80075bc <__swbuf_r>
 8009d62:	6813      	ldr	r3, [r2, #0]
 8009d64:	1c58      	adds	r0, r3, #1
 8009d66:	6010      	str	r0, [r2, #0]
 8009d68:	7019      	strb	r1, [r3, #0]
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d70:	4770      	bx	lr

08009d72 <__sfputs_r>:
 8009d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d74:	4606      	mov	r6, r0
 8009d76:	460f      	mov	r7, r1
 8009d78:	4614      	mov	r4, r2
 8009d7a:	18d5      	adds	r5, r2, r3
 8009d7c:	42ac      	cmp	r4, r5
 8009d7e:	d101      	bne.n	8009d84 <__sfputs_r+0x12>
 8009d80:	2000      	movs	r0, #0
 8009d82:	e007      	b.n	8009d94 <__sfputs_r+0x22>
 8009d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d88:	463a      	mov	r2, r7
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	f7ff ffda 	bl	8009d44 <__sfputc_r>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d1f3      	bne.n	8009d7c <__sfputs_r+0xa>
 8009d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d98 <_vfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	b09d      	sub	sp, #116	; 0x74
 8009da0:	4614      	mov	r4, r2
 8009da2:	4698      	mov	r8, r3
 8009da4:	4606      	mov	r6, r0
 8009da6:	b118      	cbz	r0, 8009db0 <_vfiprintf_r+0x18>
 8009da8:	6983      	ldr	r3, [r0, #24]
 8009daa:	b90b      	cbnz	r3, 8009db0 <_vfiprintf_r+0x18>
 8009dac:	f7fe fc5a 	bl	8008664 <__sinit>
 8009db0:	4b89      	ldr	r3, [pc, #548]	; (8009fd8 <_vfiprintf_r+0x240>)
 8009db2:	429d      	cmp	r5, r3
 8009db4:	d11b      	bne.n	8009dee <_vfiprintf_r+0x56>
 8009db6:	6875      	ldr	r5, [r6, #4]
 8009db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dba:	07d9      	lsls	r1, r3, #31
 8009dbc:	d405      	bmi.n	8009dca <_vfiprintf_r+0x32>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	059a      	lsls	r2, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_vfiprintf_r+0x32>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f7ff f85e 	bl	8008e86 <__retarget_lock_acquire_recursive>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	071b      	lsls	r3, r3, #28
 8009dce:	d501      	bpl.n	8009dd4 <_vfiprintf_r+0x3c>
 8009dd0:	692b      	ldr	r3, [r5, #16]
 8009dd2:	b9eb      	cbnz	r3, 8009e10 <_vfiprintf_r+0x78>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f7fd fc42 	bl	8007660 <__swsetup_r>
 8009ddc:	b1c0      	cbz	r0, 8009e10 <_vfiprintf_r+0x78>
 8009dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009de0:	07dc      	lsls	r4, r3, #31
 8009de2:	d50e      	bpl.n	8009e02 <_vfiprintf_r+0x6a>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	b01d      	add	sp, #116	; 0x74
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dee:	4b7b      	ldr	r3, [pc, #492]	; (8009fdc <_vfiprintf_r+0x244>)
 8009df0:	429d      	cmp	r5, r3
 8009df2:	d101      	bne.n	8009df8 <_vfiprintf_r+0x60>
 8009df4:	68b5      	ldr	r5, [r6, #8]
 8009df6:	e7df      	b.n	8009db8 <_vfiprintf_r+0x20>
 8009df8:	4b79      	ldr	r3, [pc, #484]	; (8009fe0 <_vfiprintf_r+0x248>)
 8009dfa:	429d      	cmp	r5, r3
 8009dfc:	bf08      	it	eq
 8009dfe:	68f5      	ldreq	r5, [r6, #12]
 8009e00:	e7da      	b.n	8009db8 <_vfiprintf_r+0x20>
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	0598      	lsls	r0, r3, #22
 8009e06:	d4ed      	bmi.n	8009de4 <_vfiprintf_r+0x4c>
 8009e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e0a:	f7ff f83d 	bl	8008e88 <__retarget_lock_release_recursive>
 8009e0e:	e7e9      	b.n	8009de4 <_vfiprintf_r+0x4c>
 8009e10:	2300      	movs	r3, #0
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	2320      	movs	r3, #32
 8009e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1e:	2330      	movs	r3, #48	; 0x30
 8009e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fe4 <_vfiprintf_r+0x24c>
 8009e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e28:	f04f 0901 	mov.w	r9, #1
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	469a      	mov	sl, r3
 8009e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e34:	b10a      	cbz	r2, 8009e3a <_vfiprintf_r+0xa2>
 8009e36:	2a25      	cmp	r2, #37	; 0x25
 8009e38:	d1f9      	bne.n	8009e2e <_vfiprintf_r+0x96>
 8009e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3e:	d00b      	beq.n	8009e58 <_vfiprintf_r+0xc0>
 8009e40:	465b      	mov	r3, fp
 8009e42:	4622      	mov	r2, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ff93 	bl	8009d72 <__sfputs_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f000 80aa 	beq.w	8009fa6 <_vfiprintf_r+0x20e>
 8009e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e54:	445a      	add	r2, fp
 8009e56:	9209      	str	r2, [sp, #36]	; 0x24
 8009e58:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80a2 	beq.w	8009fa6 <_vfiprintf_r+0x20e>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6c:	f10a 0a01 	add.w	sl, sl, #1
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e78:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7a:	4654      	mov	r4, sl
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4858      	ldr	r0, [pc, #352]	; (8009fe4 <_vfiprintf_r+0x24c>)
 8009e84:	f7f6 f9ac 	bl	80001e0 <memchr>
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	b9d8      	cbnz	r0, 8009ec4 <_vfiprintf_r+0x12c>
 8009e8c:	06d1      	lsls	r1, r2, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2320      	movmi	r3, #32
 8009e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e96:	0713      	lsls	r3, r2, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	232b      	movmi	r3, #43	; 0x2b
 8009e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea6:	d015      	beq.n	8009ed4 <_vfiprintf_r+0x13c>
 8009ea8:	9a07      	ldr	r2, [sp, #28]
 8009eaa:	4654      	mov	r4, sl
 8009eac:	2000      	movs	r0, #0
 8009eae:	f04f 0c0a 	mov.w	ip, #10
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb8:	3b30      	subs	r3, #48	; 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d94e      	bls.n	8009f5c <_vfiprintf_r+0x1c4>
 8009ebe:	b1b0      	cbz	r0, 8009eee <_vfiprintf_r+0x156>
 8009ec0:	9207      	str	r2, [sp, #28]
 8009ec2:	e014      	b.n	8009eee <_vfiprintf_r+0x156>
 8009ec4:	eba0 0308 	sub.w	r3, r0, r8
 8009ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	9304      	str	r3, [sp, #16]
 8009ed0:	46a2      	mov	sl, r4
 8009ed2:	e7d2      	b.n	8009e7a <_vfiprintf_r+0xe2>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d19      	adds	r1, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	425b      	neglt	r3, r3
 8009ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee6:	9307      	strge	r3, [sp, #28]
 8009ee8:	9307      	strlt	r3, [sp, #28]
 8009eea:	bfb8      	it	lt
 8009eec:	9204      	strlt	r2, [sp, #16]
 8009eee:	7823      	ldrb	r3, [r4, #0]
 8009ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef2:	d10c      	bne.n	8009f0e <_vfiprintf_r+0x176>
 8009ef4:	7863      	ldrb	r3, [r4, #1]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	d135      	bne.n	8009f66 <_vfiprintf_r+0x1ce>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	1d1a      	adds	r2, r3, #4
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	9203      	str	r2, [sp, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	bfb8      	it	lt
 8009f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0a:	3402      	adds	r4, #2
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ff4 <_vfiprintf_r+0x25c>
 8009f12:	7821      	ldrb	r1, [r4, #0]
 8009f14:	2203      	movs	r2, #3
 8009f16:	4650      	mov	r0, sl
 8009f18:	f7f6 f962 	bl	80001e0 <memchr>
 8009f1c:	b140      	cbz	r0, 8009f30 <_vfiprintf_r+0x198>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	eba0 000a 	sub.w	r0, r0, sl
 8009f24:	fa03 f000 	lsl.w	r0, r3, r0
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	4303      	orrs	r3, r0
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	9304      	str	r3, [sp, #16]
 8009f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f34:	482c      	ldr	r0, [pc, #176]	; (8009fe8 <_vfiprintf_r+0x250>)
 8009f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3a:	2206      	movs	r2, #6
 8009f3c:	f7f6 f950 	bl	80001e0 <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d03f      	beq.n	8009fc4 <_vfiprintf_r+0x22c>
 8009f44:	4b29      	ldr	r3, [pc, #164]	; (8009fec <_vfiprintf_r+0x254>)
 8009f46:	bb1b      	cbnz	r3, 8009f90 <_vfiprintf_r+0x1f8>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	3307      	adds	r3, #7
 8009f4c:	f023 0307 	bic.w	r3, r3, #7
 8009f50:	3308      	adds	r3, #8
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	443b      	add	r3, r7
 8009f58:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5a:	e767      	b.n	8009e2c <_vfiprintf_r+0x94>
 8009f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f60:	460c      	mov	r4, r1
 8009f62:	2001      	movs	r0, #1
 8009f64:	e7a5      	b.n	8009eb2 <_vfiprintf_r+0x11a>
 8009f66:	2300      	movs	r3, #0
 8009f68:	3401      	adds	r4, #1
 8009f6a:	9305      	str	r3, [sp, #20]
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f04f 0c0a 	mov.w	ip, #10
 8009f72:	4620      	mov	r0, r4
 8009f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f78:	3a30      	subs	r2, #48	; 0x30
 8009f7a:	2a09      	cmp	r2, #9
 8009f7c:	d903      	bls.n	8009f86 <_vfiprintf_r+0x1ee>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0c5      	beq.n	8009f0e <_vfiprintf_r+0x176>
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	e7c3      	b.n	8009f0e <_vfiprintf_r+0x176>
 8009f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e7f0      	b.n	8009f72 <_vfiprintf_r+0x1da>
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <_vfiprintf_r+0x258>)
 8009f98:	a904      	add	r1, sp, #16
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7fb fdce 	bl	8005b3c <_printf_float>
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	1c78      	adds	r0, r7, #1
 8009fa4:	d1d6      	bne.n	8009f54 <_vfiprintf_r+0x1bc>
 8009fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa8:	07d9      	lsls	r1, r3, #31
 8009faa:	d405      	bmi.n	8009fb8 <_vfiprintf_r+0x220>
 8009fac:	89ab      	ldrh	r3, [r5, #12]
 8009fae:	059a      	lsls	r2, r3, #22
 8009fb0:	d402      	bmi.n	8009fb8 <_vfiprintf_r+0x220>
 8009fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fb4:	f7fe ff68 	bl	8008e88 <__retarget_lock_release_recursive>
 8009fb8:	89ab      	ldrh	r3, [r5, #12]
 8009fba:	065b      	lsls	r3, r3, #25
 8009fbc:	f53f af12 	bmi.w	8009de4 <_vfiprintf_r+0x4c>
 8009fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc2:	e711      	b.n	8009de8 <_vfiprintf_r+0x50>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <_vfiprintf_r+0x258>)
 8009fcc:	a904      	add	r1, sp, #16
 8009fce:	4630      	mov	r0, r6
 8009fd0:	f7fc f858 	bl	8006084 <_printf_i>
 8009fd4:	e7e4      	b.n	8009fa0 <_vfiprintf_r+0x208>
 8009fd6:	bf00      	nop
 8009fd8:	0800a640 	.word	0x0800a640
 8009fdc:	0800a660 	.word	0x0800a660
 8009fe0:	0800a620 	.word	0x0800a620
 8009fe4:	0800a85c 	.word	0x0800a85c
 8009fe8:	0800a866 	.word	0x0800a866
 8009fec:	08005b3d 	.word	0x08005b3d
 8009ff0:	08009d73 	.word	0x08009d73
 8009ff4:	0800a862 	.word	0x0800a862

08009ff8 <nan>:
 8009ff8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a000 <nan+0x8>
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	00000000 	.word	0x00000000
 800a004:	7ff80000 	.word	0x7ff80000

0800a008 <_sbrk_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d06      	ldr	r5, [pc, #24]	; (800a024 <_sbrk_r+0x1c>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	f7f7 ff10 	bl	8001e38 <_sbrk>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_sbrk_r+0x1a>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_sbrk_r+0x1a>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200004b8 	.word	0x200004b8

0800a028 <__sread>:
 800a028:	b510      	push	{r4, lr}
 800a02a:	460c      	mov	r4, r1
 800a02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a030:	f000 f92e 	bl	800a290 <_read_r>
 800a034:	2800      	cmp	r0, #0
 800a036:	bfab      	itete	ge
 800a038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a03a:	89a3      	ldrhlt	r3, [r4, #12]
 800a03c:	181b      	addge	r3, r3, r0
 800a03e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a042:	bfac      	ite	ge
 800a044:	6563      	strge	r3, [r4, #84]	; 0x54
 800a046:	81a3      	strhlt	r3, [r4, #12]
 800a048:	bd10      	pop	{r4, pc}

0800a04a <__swrite>:
 800a04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a04e:	461f      	mov	r7, r3
 800a050:	898b      	ldrh	r3, [r1, #12]
 800a052:	05db      	lsls	r3, r3, #23
 800a054:	4605      	mov	r5, r0
 800a056:	460c      	mov	r4, r1
 800a058:	4616      	mov	r6, r2
 800a05a:	d505      	bpl.n	800a068 <__swrite+0x1e>
 800a05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a060:	2302      	movs	r3, #2
 800a062:	2200      	movs	r2, #0
 800a064:	f000 f8b6 	bl	800a1d4 <_lseek_r>
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a06e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a072:	81a3      	strh	r3, [r4, #12]
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	4628      	mov	r0, r5
 800a07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	f000 b835 	b.w	800a0ec <_write_r>

0800a082 <__sseek>:
 800a082:	b510      	push	{r4, lr}
 800a084:	460c      	mov	r4, r1
 800a086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a08a:	f000 f8a3 	bl	800a1d4 <_lseek_r>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	bf15      	itete	ne
 800a094:	6560      	strne	r0, [r4, #84]	; 0x54
 800a096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a09a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a09e:	81a3      	strheq	r3, [r4, #12]
 800a0a0:	bf18      	it	ne
 800a0a2:	81a3      	strhne	r3, [r4, #12]
 800a0a4:	bd10      	pop	{r4, pc}

0800a0a6 <__sclose>:
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	f000 b84f 	b.w	800a14c <_close_r>

0800a0ae <strncmp>:
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	b16a      	cbz	r2, 800a0ce <strncmp+0x20>
 800a0b2:	3901      	subs	r1, #1
 800a0b4:	1884      	adds	r4, r0, r2
 800a0b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a0ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d103      	bne.n	800a0ca <strncmp+0x1c>
 800a0c2:	42a0      	cmp	r0, r4
 800a0c4:	d001      	beq.n	800a0ca <strncmp+0x1c>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f5      	bne.n	800a0b6 <strncmp+0x8>
 800a0ca:	1a98      	subs	r0, r3, r2
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	e7fc      	b.n	800a0cc <strncmp+0x1e>

0800a0d2 <__ascii_wctomb>:
 800a0d2:	b149      	cbz	r1, 800a0e8 <__ascii_wctomb+0x16>
 800a0d4:	2aff      	cmp	r2, #255	; 0xff
 800a0d6:	bf85      	ittet	hi
 800a0d8:	238a      	movhi	r3, #138	; 0x8a
 800a0da:	6003      	strhi	r3, [r0, #0]
 800a0dc:	700a      	strbls	r2, [r1, #0]
 800a0de:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0e2:	bf98      	it	ls
 800a0e4:	2001      	movls	r0, #1
 800a0e6:	4770      	bx	lr
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	4770      	bx	lr

0800a0ec <_write_r>:
 800a0ec:	b538      	push	{r3, r4, r5, lr}
 800a0ee:	4d07      	ldr	r5, [pc, #28]	; (800a10c <_write_r+0x20>)
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	4608      	mov	r0, r1
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	602a      	str	r2, [r5, #0]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	f7f7 fe4b 	bl	8001d96 <_write>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_write_r+0x1e>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_write_r+0x1e>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	200004b8 	.word	0x200004b8

0800a110 <__assert_func>:
 800a110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a112:	4614      	mov	r4, r2
 800a114:	461a      	mov	r2, r3
 800a116:	4b09      	ldr	r3, [pc, #36]	; (800a13c <__assert_func+0x2c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4605      	mov	r5, r0
 800a11c:	68d8      	ldr	r0, [r3, #12]
 800a11e:	b14c      	cbz	r4, 800a134 <__assert_func+0x24>
 800a120:	4b07      	ldr	r3, [pc, #28]	; (800a140 <__assert_func+0x30>)
 800a122:	9100      	str	r1, [sp, #0]
 800a124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a128:	4906      	ldr	r1, [pc, #24]	; (800a144 <__assert_func+0x34>)
 800a12a:	462b      	mov	r3, r5
 800a12c:	f000 f81e 	bl	800a16c <fiprintf>
 800a130:	f000 f8c0 	bl	800a2b4 <abort>
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <__assert_func+0x38>)
 800a136:	461c      	mov	r4, r3
 800a138:	e7f3      	b.n	800a122 <__assert_func+0x12>
 800a13a:	bf00      	nop
 800a13c:	20000034 	.word	0x20000034
 800a140:	0800a86d 	.word	0x0800a86d
 800a144:	0800a87a 	.word	0x0800a87a
 800a148:	0800a8a8 	.word	0x0800a8a8

0800a14c <_close_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d06      	ldr	r5, [pc, #24]	; (800a168 <_close_r+0x1c>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f7 fe39 	bl	8001dce <_close>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_close_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_close_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	200004b8 	.word	0x200004b8

0800a16c <fiprintf>:
 800a16c:	b40e      	push	{r1, r2, r3}
 800a16e:	b503      	push	{r0, r1, lr}
 800a170:	4601      	mov	r1, r0
 800a172:	ab03      	add	r3, sp, #12
 800a174:	4805      	ldr	r0, [pc, #20]	; (800a18c <fiprintf+0x20>)
 800a176:	f853 2b04 	ldr.w	r2, [r3], #4
 800a17a:	6800      	ldr	r0, [r0, #0]
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	f7ff fe0b 	bl	8009d98 <_vfiprintf_r>
 800a182:	b002      	add	sp, #8
 800a184:	f85d eb04 	ldr.w	lr, [sp], #4
 800a188:	b003      	add	sp, #12
 800a18a:	4770      	bx	lr
 800a18c:	20000034 	.word	0x20000034

0800a190 <_fstat_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	; (800a1b0 <_fstat_r+0x20>)
 800a194:	2300      	movs	r3, #0
 800a196:	4604      	mov	r4, r0
 800a198:	4608      	mov	r0, r1
 800a19a:	4611      	mov	r1, r2
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	f7f7 fe22 	bl	8001de6 <_fstat>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d102      	bne.n	800a1ac <_fstat_r+0x1c>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b103      	cbz	r3, 800a1ac <_fstat_r+0x1c>
 800a1aa:	6023      	str	r3, [r4, #0]
 800a1ac:	bd38      	pop	{r3, r4, r5, pc}
 800a1ae:	bf00      	nop
 800a1b0:	200004b8 	.word	0x200004b8

0800a1b4 <_isatty_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d06      	ldr	r5, [pc, #24]	; (800a1d0 <_isatty_r+0x1c>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f7 fe21 	bl	8001e06 <_isatty>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_isatty_r+0x1a>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_isatty_r+0x1a>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	200004b8 	.word	0x200004b8

0800a1d4 <_lseek_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4d07      	ldr	r5, [pc, #28]	; (800a1f4 <_lseek_r+0x20>)
 800a1d8:	4604      	mov	r4, r0
 800a1da:	4608      	mov	r0, r1
 800a1dc:	4611      	mov	r1, r2
 800a1de:	2200      	movs	r2, #0
 800a1e0:	602a      	str	r2, [r5, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f7f7 fe1a 	bl	8001e1c <_lseek>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_lseek_r+0x1e>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_lseek_r+0x1e>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	200004b8 	.word	0x200004b8

0800a1f8 <memmove>:
 800a1f8:	4288      	cmp	r0, r1
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	eb01 0402 	add.w	r4, r1, r2
 800a200:	d902      	bls.n	800a208 <memmove+0x10>
 800a202:	4284      	cmp	r4, r0
 800a204:	4623      	mov	r3, r4
 800a206:	d807      	bhi.n	800a218 <memmove+0x20>
 800a208:	1e43      	subs	r3, r0, #1
 800a20a:	42a1      	cmp	r1, r4
 800a20c:	d008      	beq.n	800a220 <memmove+0x28>
 800a20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a216:	e7f8      	b.n	800a20a <memmove+0x12>
 800a218:	4402      	add	r2, r0
 800a21a:	4601      	mov	r1, r0
 800a21c:	428a      	cmp	r2, r1
 800a21e:	d100      	bne.n	800a222 <memmove+0x2a>
 800a220:	bd10      	pop	{r4, pc}
 800a222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a22a:	e7f7      	b.n	800a21c <memmove+0x24>

0800a22c <__malloc_lock>:
 800a22c:	4801      	ldr	r0, [pc, #4]	; (800a234 <__malloc_lock+0x8>)
 800a22e:	f7fe be2a 	b.w	8008e86 <__retarget_lock_acquire_recursive>
 800a232:	bf00      	nop
 800a234:	200004b0 	.word	0x200004b0

0800a238 <__malloc_unlock>:
 800a238:	4801      	ldr	r0, [pc, #4]	; (800a240 <__malloc_unlock+0x8>)
 800a23a:	f7fe be25 	b.w	8008e88 <__retarget_lock_release_recursive>
 800a23e:	bf00      	nop
 800a240:	200004b0 	.word	0x200004b0

0800a244 <_realloc_r>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	4607      	mov	r7, r0
 800a248:	4614      	mov	r4, r2
 800a24a:	460e      	mov	r6, r1
 800a24c:	b921      	cbnz	r1, 800a258 <_realloc_r+0x14>
 800a24e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a252:	4611      	mov	r1, r2
 800a254:	f7ff bbc0 	b.w	80099d8 <_malloc_r>
 800a258:	b922      	cbnz	r2, 800a264 <_realloc_r+0x20>
 800a25a:	f7ff fb6d 	bl	8009938 <_free_r>
 800a25e:	4625      	mov	r5, r4
 800a260:	4628      	mov	r0, r5
 800a262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a264:	f000 f82d 	bl	800a2c2 <_malloc_usable_size_r>
 800a268:	42a0      	cmp	r0, r4
 800a26a:	d20f      	bcs.n	800a28c <_realloc_r+0x48>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4638      	mov	r0, r7
 800a270:	f7ff fbb2 	bl	80099d8 <_malloc_r>
 800a274:	4605      	mov	r5, r0
 800a276:	2800      	cmp	r0, #0
 800a278:	d0f2      	beq.n	800a260 <_realloc_r+0x1c>
 800a27a:	4631      	mov	r1, r6
 800a27c:	4622      	mov	r2, r4
 800a27e:	f7fe fe83 	bl	8008f88 <memcpy>
 800a282:	4631      	mov	r1, r6
 800a284:	4638      	mov	r0, r7
 800a286:	f7ff fb57 	bl	8009938 <_free_r>
 800a28a:	e7e9      	b.n	800a260 <_realloc_r+0x1c>
 800a28c:	4635      	mov	r5, r6
 800a28e:	e7e7      	b.n	800a260 <_realloc_r+0x1c>

0800a290 <_read_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d07      	ldr	r5, [pc, #28]	; (800a2b0 <_read_r+0x20>)
 800a294:	4604      	mov	r4, r0
 800a296:	4608      	mov	r0, r1
 800a298:	4611      	mov	r1, r2
 800a29a:	2200      	movs	r2, #0
 800a29c:	602a      	str	r2, [r5, #0]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	f7f7 fd5c 	bl	8001d5c <_read>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d102      	bne.n	800a2ae <_read_r+0x1e>
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	b103      	cbz	r3, 800a2ae <_read_r+0x1e>
 800a2ac:	6023      	str	r3, [r4, #0]
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	200004b8 	.word	0x200004b8

0800a2b4 <abort>:
 800a2b4:	b508      	push	{r3, lr}
 800a2b6:	2006      	movs	r0, #6
 800a2b8:	f000 f834 	bl	800a324 <raise>
 800a2bc:	2001      	movs	r0, #1
 800a2be:	f7f7 fd43 	bl	8001d48 <_exit>

0800a2c2 <_malloc_usable_size_r>:
 800a2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2c6:	1f18      	subs	r0, r3, #4
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bfbc      	itt	lt
 800a2cc:	580b      	ldrlt	r3, [r1, r0]
 800a2ce:	18c0      	addlt	r0, r0, r3
 800a2d0:	4770      	bx	lr

0800a2d2 <_raise_r>:
 800a2d2:	291f      	cmp	r1, #31
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	460d      	mov	r5, r1
 800a2da:	d904      	bls.n	800a2e6 <_raise_r+0x14>
 800a2dc:	2316      	movs	r3, #22
 800a2de:	6003      	str	r3, [r0, #0]
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2e8:	b112      	cbz	r2, 800a2f0 <_raise_r+0x1e>
 800a2ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2ee:	b94b      	cbnz	r3, 800a304 <_raise_r+0x32>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f000 f831 	bl	800a358 <_getpid_r>
 800a2f6:	462a      	mov	r2, r5
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a300:	f000 b818 	b.w	800a334 <_kill_r>
 800a304:	2b01      	cmp	r3, #1
 800a306:	d00a      	beq.n	800a31e <_raise_r+0x4c>
 800a308:	1c59      	adds	r1, r3, #1
 800a30a:	d103      	bne.n	800a314 <_raise_r+0x42>
 800a30c:	2316      	movs	r3, #22
 800a30e:	6003      	str	r3, [r0, #0]
 800a310:	2001      	movs	r0, #1
 800a312:	e7e7      	b.n	800a2e4 <_raise_r+0x12>
 800a314:	2400      	movs	r4, #0
 800a316:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a31a:	4628      	mov	r0, r5
 800a31c:	4798      	blx	r3
 800a31e:	2000      	movs	r0, #0
 800a320:	e7e0      	b.n	800a2e4 <_raise_r+0x12>
	...

0800a324 <raise>:
 800a324:	4b02      	ldr	r3, [pc, #8]	; (800a330 <raise+0xc>)
 800a326:	4601      	mov	r1, r0
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	f7ff bfd2 	b.w	800a2d2 <_raise_r>
 800a32e:	bf00      	nop
 800a330:	20000034 	.word	0x20000034

0800a334 <_kill_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d07      	ldr	r5, [pc, #28]	; (800a354 <_kill_r+0x20>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	4611      	mov	r1, r2
 800a340:	602b      	str	r3, [r5, #0]
 800a342:	f7f7 fcf1 	bl	8001d28 <_kill>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d102      	bne.n	800a350 <_kill_r+0x1c>
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	b103      	cbz	r3, 800a350 <_kill_r+0x1c>
 800a34e:	6023      	str	r3, [r4, #0]
 800a350:	bd38      	pop	{r3, r4, r5, pc}
 800a352:	bf00      	nop
 800a354:	200004b8 	.word	0x200004b8

0800a358 <_getpid_r>:
 800a358:	f7f7 bcde 	b.w	8001d18 <_getpid>

0800a35c <_init>:
 800a35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35e:	bf00      	nop
 800a360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a362:	bc08      	pop	{r3}
 800a364:	469e      	mov	lr, r3
 800a366:	4770      	bx	lr

0800a368 <_fini>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr
